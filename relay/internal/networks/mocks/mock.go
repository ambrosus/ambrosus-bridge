// Code generated by MockGen. DO NOT EDIT.
// Source: network.go

// Package mock_networks is a generated GoMock package.
package mock_networks

import (
	reflect "reflect"

	interfaces "github.com/ambrosus/ambrosus-bridge/relay/internal/bindings/interfaces"
	networks "github.com/ambrosus/ambrosus-bridge/relay/internal/networks"
	ethclients "github.com/ambrosus/ambrosus-bridge/relay/pkg/ethclients"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	zerolog "github.com/rs/zerolog"
)

// MockBridge is a mock of Bridge interface.
type MockBridge struct {
	ctrl     *gomock.Controller
	recorder *MockBridgeMockRecorder
}

// MockBridgeMockRecorder is the mock recorder for MockBridge.
type MockBridgeMockRecorder struct {
	mock *MockBridge
}

// NewMockBridge creates a new mock instance.
func NewMockBridge(ctrl *gomock.Controller) *MockBridge {
	mock := &MockBridge{ctrl: ctrl}
	mock.recorder = &MockBridgeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBridge) EXPECT() *MockBridgeMockRecorder {
	return m.recorder
}

// GetAuth mocks base method.
func (m *MockBridge) GetAuth() *bind.TransactOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuth")
	ret0, _ := ret[0].(*bind.TransactOpts)
	return ret0
}

// GetAuth indicates an expected call of GetAuth.
func (mr *MockBridgeMockRecorder) GetAuth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuth", reflect.TypeOf((*MockBridge)(nil).GetAuth))
}

// GetClient mocks base method.
func (m *MockBridge) GetClient() ethclients.ClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(ethclients.ClientInterface)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockBridgeMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockBridge)(nil).GetClient))
}

// GetContract mocks base method.
func (m *MockBridge) GetContract() interfaces.BridgeContract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract")
	ret0, _ := ret[0].(interfaces.BridgeContract)
	return ret0
}

// GetContract indicates an expected call of GetContract.
func (mr *MockBridgeMockRecorder) GetContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockBridge)(nil).GetContract))
}

// GetContractAddress mocks base method.
func (m *MockBridge) GetContractAddress() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContractAddress")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// GetContractAddress indicates an expected call of GetContractAddress.
func (mr *MockBridgeMockRecorder) GetContractAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractAddress", reflect.TypeOf((*MockBridge)(nil).GetContractAddress))
}

// GetLogger mocks base method.
func (m *MockBridge) GetLogger() *zerolog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zerolog.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockBridgeMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockBridge)(nil).GetLogger))
}

// GetName mocks base method.
func (m *MockBridge) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockBridgeMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockBridge)(nil).GetName))
}

// GetWsClient mocks base method.
func (m *MockBridge) GetWsClient() ethclients.ClientInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWsClient")
	ret0, _ := ret[0].(ethclients.ClientInterface)
	return ret0
}

// GetWsClient indicates an expected call of GetWsClient.
func (mr *MockBridgeMockRecorder) GetWsClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWsClient", reflect.TypeOf((*MockBridge)(nil).GetWsClient))
}

// GetWsContract mocks base method.
func (m *MockBridge) GetWsContract() interfaces.BridgeContract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWsContract")
	ret0, _ := ret[0].(interfaces.BridgeContract)
	return ret0
}

// GetWsContract indicates an expected call of GetWsContract.
func (mr *MockBridgeMockRecorder) GetWsContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWsContract", reflect.TypeOf((*MockBridge)(nil).GetWsContract))
}

// ProcessTx mocks base method.
func (m *MockBridge) ProcessTx(methodName string, txCallback networks.ContractCallFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessTx", methodName, txCallback)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessTx indicates an expected call of ProcessTx.
func (mr *MockBridgeMockRecorder) ProcessTx(methodName, txCallback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessTx", reflect.TypeOf((*MockBridge)(nil).ProcessTx), methodName, txCallback)
}
