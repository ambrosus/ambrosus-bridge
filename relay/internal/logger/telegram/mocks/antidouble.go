// Code generated by MockGen. DO NOT EDIT.
// Source: antidouble.go

// Package mock_antidouble is a generated GoMock package.
package mock_antidouble

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTgLoggerI is a mock of TgLoggerI interface.
type MockTgLoggerI struct {
	ctrl     *gomock.Controller
	recorder *MockTgLoggerIMockRecorder
}

// MockTgLoggerIMockRecorder is the mock recorder for MockTgLoggerI.
type MockTgLoggerIMockRecorder struct {
	mock *MockTgLoggerI
}

// NewMockTgLoggerI creates a new mock instance.
func NewMockTgLoggerI(ctrl *gomock.Controller) *MockTgLoggerI {
	mock := &MockTgLoggerI{ctrl: ctrl}
	mock.recorder = &MockTgLoggerIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTgLoggerI) EXPECT() *MockTgLoggerIMockRecorder {
	return m.recorder
}

// EditText mocks base method.
func (m *MockTgLoggerI) EditText(msgId uint64, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditText", msgId, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// EditText indicates an expected call of EditText.
func (mr *MockTgLoggerIMockRecorder) EditText(msgId, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditText", reflect.TypeOf((*MockTgLoggerI)(nil).EditText), msgId, text)
}

// Send mocks base method.
func (m *MockTgLoggerI) Send(text string) ([]uint64, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", text)
	ret0, _ := ret[0].([]uint64)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Send indicates an expected call of Send.
func (mr *MockTgLoggerIMockRecorder) Send(text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTgLoggerI)(nil).Send), text)
}
