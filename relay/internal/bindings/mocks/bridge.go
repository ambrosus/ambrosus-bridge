// Code generated by MockGen. DO NOT EDIT.
// Source: ./interfaces/bridge.go

// Package mocks_bindings is a generated GoMock package.
package mocks_bindings

import (
	big "math/big"
	reflect "reflect"

	bindings "github.com/ambrosus/ambrosus-bridge/relay/internal/bindings"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
)

// MockBridgeContract is a mock of BridgeContract interface.
type MockBridgeContract struct {
	ctrl     *gomock.Controller
	recorder *MockBridgeContractMockRecorder
}

// MockBridgeContractMockRecorder is the mock recorder for MockBridgeContract.
type MockBridgeContractMockRecorder struct {
	mock *MockBridgeContract
}

// NewMockBridgeContract creates a new mock instance.
func NewMockBridgeContract(ctrl *gomock.Controller) *MockBridgeContract {
	mock := &MockBridgeContract{ctrl: ctrl}
	mock.recorder = &MockBridgeContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBridgeContract) EXPECT() *MockBridgeContractMockRecorder {
	return m.recorder
}

// ADMINROLE mocks base method.
func (m *MockBridgeContract) ADMINROLE(arg0 *bind.CallOpts) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ADMINROLE", arg0)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ADMINROLE indicates an expected call of ADMINROLE.
func (mr *MockBridgeContractMockRecorder) ADMINROLE(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ADMINROLE", reflect.TypeOf((*MockBridgeContract)(nil).ADMINROLE), arg0)
}

// ChangeBridgeFeeRecipient mocks base method.
func (m *MockBridgeContract) ChangeBridgeFeeRecipient(arg0 *bind.TransactOpts, arg1 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBridgeFeeRecipient", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBridgeFeeRecipient indicates an expected call of ChangeBridgeFeeRecipient.
func (mr *MockBridgeContractMockRecorder) ChangeBridgeFeeRecipient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBridgeFeeRecipient", reflect.TypeOf((*MockBridgeContract)(nil).ChangeBridgeFeeRecipient), arg0, arg1)
}

// ChangeLockTime mocks base method.
func (m *MockBridgeContract) ChangeLockTime(arg0 *bind.TransactOpts, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeLockTime", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeLockTime indicates an expected call of ChangeLockTime.
func (mr *MockBridgeContractMockRecorder) ChangeLockTime(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeLockTime", reflect.TypeOf((*MockBridgeContract)(nil).ChangeLockTime), arg0, arg1)
}

// ChangeMinSafetyBlocks mocks base method.
func (m *MockBridgeContract) ChangeMinSafetyBlocks(arg0 *bind.TransactOpts, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMinSafetyBlocks", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMinSafetyBlocks indicates an expected call of ChangeMinSafetyBlocks.
func (mr *MockBridgeContractMockRecorder) ChangeMinSafetyBlocks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMinSafetyBlocks", reflect.TypeOf((*MockBridgeContract)(nil).ChangeMinSafetyBlocks), arg0, arg1)
}

// ChangeMinSafetyBlocksValidators mocks base method.
func (m *MockBridgeContract) ChangeMinSafetyBlocksValidators(arg0 *bind.TransactOpts, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMinSafetyBlocksValidators", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeMinSafetyBlocksValidators indicates an expected call of ChangeMinSafetyBlocksValidators.
func (mr *MockBridgeContractMockRecorder) ChangeMinSafetyBlocksValidators(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMinSafetyBlocksValidators", reflect.TypeOf((*MockBridgeContract)(nil).ChangeMinSafetyBlocksValidators), arg0, arg1)
}

// ChangeSignatureFeeCheckNumber mocks base method.
func (m *MockBridgeContract) ChangeSignatureFeeCheckNumber(arg0 *bind.TransactOpts, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSignatureFeeCheckNumber", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeSignatureFeeCheckNumber indicates an expected call of ChangeSignatureFeeCheckNumber.
func (mr *MockBridgeContractMockRecorder) ChangeSignatureFeeCheckNumber(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSignatureFeeCheckNumber", reflect.TypeOf((*MockBridgeContract)(nil).ChangeSignatureFeeCheckNumber), arg0, arg1)
}

// ChangeTimeframeSeconds mocks base method.
func (m *MockBridgeContract) ChangeTimeframeSeconds(arg0 *bind.TransactOpts, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTimeframeSeconds", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTimeframeSeconds indicates an expected call of ChangeTimeframeSeconds.
func (mr *MockBridgeContractMockRecorder) ChangeTimeframeSeconds(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTimeframeSeconds", reflect.TypeOf((*MockBridgeContract)(nil).ChangeTimeframeSeconds), arg0, arg1)
}

// ChangeTransferFeeRecipient mocks base method.
func (m *MockBridgeContract) ChangeTransferFeeRecipient(arg0 *bind.TransactOpts, arg1 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeTransferFeeRecipient", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeTransferFeeRecipient indicates an expected call of ChangeTransferFeeRecipient.
func (mr *MockBridgeContractMockRecorder) ChangeTransferFeeRecipient(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeTransferFeeRecipient", reflect.TypeOf((*MockBridgeContract)(nil).ChangeTransferFeeRecipient), arg0, arg1)
}

// CurrentEpoch mocks base method.
func (m *MockBridgeContract) CurrentEpoch(arg0 *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentEpoch", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentEpoch indicates an expected call of CurrentEpoch.
func (mr *MockBridgeContractMockRecorder) CurrentEpoch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentEpoch", reflect.TypeOf((*MockBridgeContract)(nil).CurrentEpoch), arg0)
}

// DEFAULTADMINROLE mocks base method.
func (m *MockBridgeContract) DEFAULTADMINROLE(arg0 *bind.CallOpts) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DEFAULTADMINROLE", arg0)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DEFAULTADMINROLE indicates an expected call of DEFAULTADMINROLE.
func (mr *MockBridgeContractMockRecorder) DEFAULTADMINROLE(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DEFAULTADMINROLE", reflect.TypeOf((*MockBridgeContract)(nil).DEFAULTADMINROLE), arg0)
}

// FilterRoleAdminChanged mocks base method.
func (m *MockBridgeContract) FilterRoleAdminChanged(arg0 *bind.FilterOpts, arg1, arg2, arg3 [][32]byte) (*bindings.BridgeRoleAdminChangedIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterRoleAdminChanged", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*bindings.BridgeRoleAdminChangedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRoleAdminChanged indicates an expected call of FilterRoleAdminChanged.
func (mr *MockBridgeContractMockRecorder) FilterRoleAdminChanged(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRoleAdminChanged", reflect.TypeOf((*MockBridgeContract)(nil).FilterRoleAdminChanged), arg0, arg1, arg2, arg3)
}

// FilterRoleGranted mocks base method.
func (m *MockBridgeContract) FilterRoleGranted(arg0 *bind.FilterOpts, arg1 [][32]byte, arg2, arg3 []common.Address) (*bindings.BridgeRoleGrantedIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterRoleGranted", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*bindings.BridgeRoleGrantedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRoleGranted indicates an expected call of FilterRoleGranted.
func (mr *MockBridgeContractMockRecorder) FilterRoleGranted(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRoleGranted", reflect.TypeOf((*MockBridgeContract)(nil).FilterRoleGranted), arg0, arg1, arg2, arg3)
}

// FilterRoleRevoked mocks base method.
func (m *MockBridgeContract) FilterRoleRevoked(arg0 *bind.FilterOpts, arg1 [][32]byte, arg2, arg3 []common.Address) (*bindings.BridgeRoleRevokedIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterRoleRevoked", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*bindings.BridgeRoleRevokedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRoleRevoked indicates an expected call of FilterRoleRevoked.
func (mr *MockBridgeContractMockRecorder) FilterRoleRevoked(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRoleRevoked", reflect.TypeOf((*MockBridgeContract)(nil).FilterRoleRevoked), arg0, arg1, arg2, arg3)
}

// FilterTransfer mocks base method.
func (m *MockBridgeContract) FilterTransfer(arg0 *bind.FilterOpts, arg1 []*big.Int) (*bindings.BridgeTransferIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTransfer", arg0, arg1)
	ret0, _ := ret[0].(*bindings.BridgeTransferIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTransfer indicates an expected call of FilterTransfer.
func (mr *MockBridgeContractMockRecorder) FilterTransfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTransfer", reflect.TypeOf((*MockBridgeContract)(nil).FilterTransfer), arg0, arg1)
}

// FilterTransferFinish mocks base method.
func (m *MockBridgeContract) FilterTransferFinish(arg0 *bind.FilterOpts, arg1 []*big.Int) (*bindings.BridgeTransferFinishIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTransferFinish", arg0, arg1)
	ret0, _ := ret[0].(*bindings.BridgeTransferFinishIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTransferFinish indicates an expected call of FilterTransferFinish.
func (mr *MockBridgeContractMockRecorder) FilterTransferFinish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTransferFinish", reflect.TypeOf((*MockBridgeContract)(nil).FilterTransferFinish), arg0, arg1)
}

// FilterTransferSubmit mocks base method.
func (m *MockBridgeContract) FilterTransferSubmit(arg0 *bind.FilterOpts, arg1 []*big.Int) (*bindings.BridgeTransferSubmitIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTransferSubmit", arg0, arg1)
	ret0, _ := ret[0].(*bindings.BridgeTransferSubmitIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTransferSubmit indicates an expected call of FilterTransferSubmit.
func (mr *MockBridgeContractMockRecorder) FilterTransferSubmit(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTransferSubmit", reflect.TypeOf((*MockBridgeContract)(nil).FilterTransferSubmit), arg0, arg1)
}

// FilterUnpaused mocks base method.
func (m *MockBridgeContract) FilterUnpaused(arg0 *bind.FilterOpts) (*bindings.BridgeUnpausedIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterUnpaused", arg0)
	ret0, _ := ret[0].(*bindings.BridgeUnpausedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnpaused indicates an expected call of FilterUnpaused.
func (mr *MockBridgeContractMockRecorder) FilterUnpaused(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnpaused", reflect.TypeOf((*MockBridgeContract)(nil).FilterUnpaused), arg0)
}

// FilterWithdraw mocks base method.
func (m *MockBridgeContract) FilterWithdraw(arg0 *bind.FilterOpts, arg1 []common.Address) (*bindings.BridgeWithdrawIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterWithdraw", arg0, arg1)
	ret0, _ := ret[0].(*bindings.BridgeWithdrawIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterWithdraw indicates an expected call of FilterWithdraw.
func (mr *MockBridgeContractMockRecorder) FilterWithdraw(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterWithdraw", reflect.TypeOf((*MockBridgeContract)(nil).FilterWithdraw), arg0, arg1)
}

// GetLockedTransfers mocks base method.
func (m *MockBridgeContract) GetLockedTransfers(arg0 *bind.CallOpts, arg1 *big.Int) (bindings.CommonStructsLockedTransfers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLockedTransfers", arg0, arg1)
	ret0, _ := ret[0].(bindings.CommonStructsLockedTransfers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLockedTransfers indicates an expected call of GetLockedTransfers.
func (mr *MockBridgeContractMockRecorder) GetLockedTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLockedTransfers", reflect.TypeOf((*MockBridgeContract)(nil).GetLockedTransfers), arg0, arg1)
}

// GetRoleAdmin mocks base method.
func (m *MockBridgeContract) GetRoleAdmin(arg0 *bind.CallOpts, arg1 [32]byte) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleAdmin", arg0, arg1)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleAdmin indicates an expected call of GetRoleAdmin.
func (mr *MockBridgeContractMockRecorder) GetRoleAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleAdmin", reflect.TypeOf((*MockBridgeContract)(nil).GetRoleAdmin), arg0, arg1)
}

// GetValidatorSet mocks base method.
func (m *MockBridgeContract) GetValidatorSet(arg0 *bind.CallOpts) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSet", arg0)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorSet indicates an expected call of GetValidatorSet.
func (mr *MockBridgeContractMockRecorder) GetValidatorSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSet", reflect.TypeOf((*MockBridgeContract)(nil).GetValidatorSet), arg0)
}

// GrantRole mocks base method.
func (m *MockBridgeContract) GrantRole(arg0 *bind.TransactOpts, arg1 [32]byte, arg2 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantRole indicates an expected call of GrantRole.
func (mr *MockBridgeContractMockRecorder) GrantRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantRole", reflect.TypeOf((*MockBridgeContract)(nil).GrantRole), arg0, arg1, arg2)
}

// HasRole mocks base method.
func (m *MockBridgeContract) HasRole(arg0 *bind.CallOpts, arg1 [32]byte, arg2 common.Address) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasRole indicates an expected call of HasRole.
func (mr *MockBridgeContractMockRecorder) HasRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasRole", reflect.TypeOf((*MockBridgeContract)(nil).HasRole), arg0, arg1, arg2)
}

// Initialize mocks base method.
func (m *MockBridgeContract) Initialize(arg0 *bind.TransactOpts, arg1 bindings.CommonStructsConstructorArgs, arg2 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Initialize indicates an expected call of Initialize.
func (mr *MockBridgeContractMockRecorder) Initialize(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockBridgeContract)(nil).Initialize), arg0, arg1, arg2)
}

// InputEventId mocks base method.
func (m *MockBridgeContract) InputEventId(arg0 *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InputEventId", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InputEventId indicates an expected call of InputEventId.
func (mr *MockBridgeContractMockRecorder) InputEventId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InputEventId", reflect.TypeOf((*MockBridgeContract)(nil).InputEventId), arg0)
}

// IsEpochDataSet mocks base method.
func (m *MockBridgeContract) IsEpochDataSet(arg0 *bind.CallOpts, arg1 *big.Int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEpochDataSet", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEpochDataSet indicates an expected call of IsEpochDataSet.
func (mr *MockBridgeContractMockRecorder) IsEpochDataSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEpochDataSet", reflect.TypeOf((*MockBridgeContract)(nil).IsEpochDataSet), arg0, arg1)
}

// IsQueueEmpty mocks base method.
func (m *MockBridgeContract) IsQueueEmpty(arg0 *bind.CallOpts) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsQueueEmpty", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsQueueEmpty indicates an expected call of IsQueueEmpty.
func (mr *MockBridgeContractMockRecorder) IsQueueEmpty(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsQueueEmpty", reflect.TypeOf((*MockBridgeContract)(nil).IsQueueEmpty), arg0)
}

// LastProcessedBlock mocks base method.
func (m *MockBridgeContract) LastProcessedBlock(arg0 *bind.CallOpts) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastProcessedBlock", arg0)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastProcessedBlock indicates an expected call of LastProcessedBlock.
func (mr *MockBridgeContractMockRecorder) LastProcessedBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastProcessedBlock", reflect.TypeOf((*MockBridgeContract)(nil).LastProcessedBlock), arg0)
}

// LastTimeframe mocks base method.
func (m *MockBridgeContract) LastTimeframe(arg0 *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastTimeframe", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastTimeframe indicates an expected call of LastTimeframe.
func (mr *MockBridgeContractMockRecorder) LastTimeframe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastTimeframe", reflect.TypeOf((*MockBridgeContract)(nil).LastTimeframe), arg0)
}

// LockTime mocks base method.
func (m *MockBridgeContract) LockTime(arg0 *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockTime", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockTime indicates an expected call of LockTime.
func (mr *MockBridgeContractMockRecorder) LockTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockTime", reflect.TypeOf((*MockBridgeContract)(nil).LockTime), arg0)
}

// LockedTransfers mocks base method.
func (m *MockBridgeContract) LockedTransfers(arg0 *bind.CallOpts, arg1 *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockedTransfers", arg0, arg1)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockedTransfers indicates an expected call of LockedTransfers.
func (mr *MockBridgeContractMockRecorder) LockedTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockedTransfers", reflect.TypeOf((*MockBridgeContract)(nil).LockedTransfers), arg0, arg1)
}

// MinSafetyBlocks mocks base method.
func (m *MockBridgeContract) MinSafetyBlocks(arg0 *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinSafetyBlocks", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MinSafetyBlocks indicates an expected call of MinSafetyBlocks.
func (mr *MockBridgeContractMockRecorder) MinSafetyBlocks(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinSafetyBlocks", reflect.TypeOf((*MockBridgeContract)(nil).MinSafetyBlocks), arg0)
}

// MinSafetyBlocksValidators mocks base method.
func (m *MockBridgeContract) MinSafetyBlocksValidators(arg0 *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MinSafetyBlocksValidators", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MinSafetyBlocksValidators indicates an expected call of MinSafetyBlocksValidators.
func (mr *MockBridgeContractMockRecorder) MinSafetyBlocksValidators(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinSafetyBlocksValidators", reflect.TypeOf((*MockBridgeContract)(nil).MinSafetyBlocksValidators), arg0)
}

// OldestLockedEventId mocks base method.
func (m *MockBridgeContract) OldestLockedEventId(arg0 *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldestLockedEventId", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OldestLockedEventId indicates an expected call of OldestLockedEventId.
func (mr *MockBridgeContractMockRecorder) OldestLockedEventId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldestLockedEventId", reflect.TypeOf((*MockBridgeContract)(nil).OldestLockedEventId), arg0)
}

// ParseRoleAdminChanged mocks base method.
func (m *MockBridgeContract) ParseRoleAdminChanged(arg0 types.Log) (*bindings.BridgeRoleAdminChanged, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRoleAdminChanged", arg0)
	ret0, _ := ret[0].(*bindings.BridgeRoleAdminChanged)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRoleAdminChanged indicates an expected call of ParseRoleAdminChanged.
func (mr *MockBridgeContractMockRecorder) ParseRoleAdminChanged(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRoleAdminChanged", reflect.TypeOf((*MockBridgeContract)(nil).ParseRoleAdminChanged), arg0)
}

// ParseRoleGranted mocks base method.
func (m *MockBridgeContract) ParseRoleGranted(arg0 types.Log) (*bindings.BridgeRoleGranted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRoleGranted", arg0)
	ret0, _ := ret[0].(*bindings.BridgeRoleGranted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRoleGranted indicates an expected call of ParseRoleGranted.
func (mr *MockBridgeContractMockRecorder) ParseRoleGranted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRoleGranted", reflect.TypeOf((*MockBridgeContract)(nil).ParseRoleGranted), arg0)
}

// ParseRoleRevoked mocks base method.
func (m *MockBridgeContract) ParseRoleRevoked(arg0 types.Log) (*bindings.BridgeRoleRevoked, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRoleRevoked", arg0)
	ret0, _ := ret[0].(*bindings.BridgeRoleRevoked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRoleRevoked indicates an expected call of ParseRoleRevoked.
func (mr *MockBridgeContractMockRecorder) ParseRoleRevoked(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRoleRevoked", reflect.TypeOf((*MockBridgeContract)(nil).ParseRoleRevoked), arg0)
}

// ParseTransfer mocks base method.
func (m *MockBridgeContract) ParseTransfer(arg0 types.Log) (*bindings.BridgeTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTransfer", arg0)
	ret0, _ := ret[0].(*bindings.BridgeTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTransfer indicates an expected call of ParseTransfer.
func (mr *MockBridgeContractMockRecorder) ParseTransfer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTransfer", reflect.TypeOf((*MockBridgeContract)(nil).ParseTransfer), arg0)
}

// ParseTransferFinish mocks base method.
func (m *MockBridgeContract) ParseTransferFinish(arg0 types.Log) (*bindings.BridgeTransferFinish, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTransferFinish", arg0)
	ret0, _ := ret[0].(*bindings.BridgeTransferFinish)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTransferFinish indicates an expected call of ParseTransferFinish.
func (mr *MockBridgeContractMockRecorder) ParseTransferFinish(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTransferFinish", reflect.TypeOf((*MockBridgeContract)(nil).ParseTransferFinish), arg0)
}

// ParseTransferSubmit mocks base method.
func (m *MockBridgeContract) ParseTransferSubmit(arg0 types.Log) (*bindings.BridgeTransferSubmit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseTransferSubmit", arg0)
	ret0, _ := ret[0].(*bindings.BridgeTransferSubmit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTransferSubmit indicates an expected call of ParseTransferSubmit.
func (mr *MockBridgeContractMockRecorder) ParseTransferSubmit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTransferSubmit", reflect.TypeOf((*MockBridgeContract)(nil).ParseTransferSubmit), arg0)
}

// ParseUnpaused mocks base method.
func (m *MockBridgeContract) ParseUnpaused(arg0 types.Log) (*bindings.BridgeUnpaused, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseUnpaused", arg0)
	ret0, _ := ret[0].(*bindings.BridgeUnpaused)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnpaused indicates an expected call of ParseUnpaused.
func (mr *MockBridgeContractMockRecorder) ParseUnpaused(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnpaused", reflect.TypeOf((*MockBridgeContract)(nil).ParseUnpaused), arg0)
}

// ParseWithdraw mocks base method.
func (m *MockBridgeContract) ParseWithdraw(arg0 types.Log) (*bindings.BridgeWithdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseWithdraw", arg0)
	ret0, _ := ret[0].(*bindings.BridgeWithdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseWithdraw indicates an expected call of ParseWithdraw.
func (mr *MockBridgeContractMockRecorder) ParseWithdraw(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseWithdraw", reflect.TypeOf((*MockBridgeContract)(nil).ParseWithdraw), arg0)
}

// Pause mocks base method.
func (m *MockBridgeContract) Pause(arg0 *bind.TransactOpts) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pause", arg0)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pause indicates an expected call of Pause.
func (mr *MockBridgeContractMockRecorder) Pause(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pause", reflect.TypeOf((*MockBridgeContract)(nil).Pause), arg0)
}

// Paused mocks base method.
func (m *MockBridgeContract) Paused(arg0 *bind.CallOpts) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paused", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Paused indicates an expected call of Paused.
func (mr *MockBridgeContractMockRecorder) Paused(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paused", reflect.TypeOf((*MockBridgeContract)(nil).Paused), arg0)
}

// RELAYROLE mocks base method.
func (m *MockBridgeContract) RELAYROLE(arg0 *bind.CallOpts) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RELAYROLE", arg0)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RELAYROLE indicates an expected call of RELAYROLE.
func (mr *MockBridgeContractMockRecorder) RELAYROLE(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RELAYROLE", reflect.TypeOf((*MockBridgeContract)(nil).RELAYROLE), arg0)
}

// RemoveLockedTransfers mocks base method.
func (m *MockBridgeContract) RemoveLockedTransfers(arg0 *bind.TransactOpts, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLockedTransfers", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLockedTransfers indicates an expected call of RemoveLockedTransfers.
func (mr *MockBridgeContractMockRecorder) RemoveLockedTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLockedTransfers", reflect.TypeOf((*MockBridgeContract)(nil).RemoveLockedTransfers), arg0, arg1)
}

// RenounceRole mocks base method.
func (m *MockBridgeContract) RenounceRole(arg0 *bind.TransactOpts, arg1 [32]byte, arg2 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenounceRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenounceRole indicates an expected call of RenounceRole.
func (mr *MockBridgeContractMockRecorder) RenounceRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenounceRole", reflect.TypeOf((*MockBridgeContract)(nil).RenounceRole), arg0, arg1, arg2)
}

// RevokeRole mocks base method.
func (m *MockBridgeContract) RevokeRole(arg0 *bind.TransactOpts, arg1 [32]byte, arg2 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeRole", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeRole indicates an expected call of RevokeRole.
func (mr *MockBridgeContractMockRecorder) RevokeRole(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeRole", reflect.TypeOf((*MockBridgeContract)(nil).RevokeRole), arg0, arg1, arg2)
}

// SetEpochData mocks base method.
func (m *MockBridgeContract) SetEpochData(arg0 *bind.TransactOpts, arg1, arg2, arg3 *big.Int, arg4 []*big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetEpochData", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEpochData indicates an expected call of SetEpochData.
func (mr *MockBridgeContractMockRecorder) SetEpochData(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEpochData", reflect.TypeOf((*MockBridgeContract)(nil).SetEpochData), arg0, arg1, arg2, arg3, arg4)
}

// SetSideBridge mocks base method.
func (m *MockBridgeContract) SetSideBridge(arg0 *bind.TransactOpts, arg1 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSideBridge", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSideBridge indicates an expected call of SetSideBridge.
func (mr *MockBridgeContractMockRecorder) SetSideBridge(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSideBridge", reflect.TypeOf((*MockBridgeContract)(nil).SetSideBridge), arg0, arg1)
}

// SideBridgeAddress mocks base method.
func (m *MockBridgeContract) SideBridgeAddress(arg0 *bind.CallOpts) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SideBridgeAddress", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SideBridgeAddress indicates an expected call of SideBridgeAddress.
func (mr *MockBridgeContractMockRecorder) SideBridgeAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SideBridgeAddress", reflect.TypeOf((*MockBridgeContract)(nil).SideBridgeAddress), arg0)
}

// SubmitTransferAura mocks base method.
func (m *MockBridgeContract) SubmitTransferAura(arg0 *bind.TransactOpts, arg1 bindings.CheckAuraAuraProof) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTransferAura", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransferAura indicates an expected call of SubmitTransferAura.
func (mr *MockBridgeContractMockRecorder) SubmitTransferAura(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransferAura", reflect.TypeOf((*MockBridgeContract)(nil).SubmitTransferAura), arg0, arg1)
}

// SubmitTransferPoSA mocks base method.
func (m *MockBridgeContract) SubmitTransferPoSA(arg0 *bind.TransactOpts, arg1 bindings.CheckPoSAPoSAProof) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTransferPoSA", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransferPoSA indicates an expected call of SubmitTransferPoSA.
func (mr *MockBridgeContractMockRecorder) SubmitTransferPoSA(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransferPoSA", reflect.TypeOf((*MockBridgeContract)(nil).SubmitTransferPoSA), arg0, arg1)
}

// SubmitTransferPoW mocks base method.
func (m *MockBridgeContract) SubmitTransferPoW(arg0 *bind.TransactOpts, arg1 bindings.CheckPoWPoWProof) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitTransferPoW", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitTransferPoW indicates an expected call of SubmitTransferPoW.
func (mr *MockBridgeContractMockRecorder) SubmitTransferPoW(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTransferPoW", reflect.TypeOf((*MockBridgeContract)(nil).SubmitTransferPoW), arg0, arg1)
}

// SupportsInterface mocks base method.
func (m *MockBridgeContract) SupportsInterface(arg0 *bind.CallOpts, arg1 [4]byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsInterface", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsInterface indicates an expected call of SupportsInterface.
func (mr *MockBridgeContractMockRecorder) SupportsInterface(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsInterface", reflect.TypeOf((*MockBridgeContract)(nil).SupportsInterface), arg0, arg1)
}

// TimeframeSeconds mocks base method.
func (m *MockBridgeContract) TimeframeSeconds(arg0 *bind.CallOpts) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeframeSeconds", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TimeframeSeconds indicates an expected call of TimeframeSeconds.
func (mr *MockBridgeContractMockRecorder) TimeframeSeconds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeframeSeconds", reflect.TypeOf((*MockBridgeContract)(nil).TimeframeSeconds), arg0)
}

// TokenAddresses mocks base method.
func (m *MockBridgeContract) TokenAddresses(arg0 *bind.CallOpts, arg1 common.Address) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenAddresses", arg0, arg1)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenAddresses indicates an expected call of TokenAddresses.
func (mr *MockBridgeContractMockRecorder) TokenAddresses(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenAddresses", reflect.TypeOf((*MockBridgeContract)(nil).TokenAddresses), arg0, arg1)
}

// TokensAdd mocks base method.
func (m *MockBridgeContract) TokensAdd(arg0 *bind.TransactOpts, arg1, arg2 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokensAdd", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokensAdd indicates an expected call of TokensAdd.
func (mr *MockBridgeContractMockRecorder) TokensAdd(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokensAdd", reflect.TypeOf((*MockBridgeContract)(nil).TokensAdd), arg0, arg1, arg2)
}

// TokensAddBatch mocks base method.
func (m *MockBridgeContract) TokensAddBatch(arg0 *bind.TransactOpts, arg1, arg2 []common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokensAddBatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokensAddBatch indicates an expected call of TokensAddBatch.
func (mr *MockBridgeContractMockRecorder) TokensAddBatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokensAddBatch", reflect.TypeOf((*MockBridgeContract)(nil).TokensAddBatch), arg0, arg1, arg2)
}

// TokensRemove mocks base method.
func (m *MockBridgeContract) TokensRemove(arg0 *bind.TransactOpts, arg1 common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokensRemove", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokensRemove indicates an expected call of TokensRemove.
func (mr *MockBridgeContractMockRecorder) TokensRemove(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokensRemove", reflect.TypeOf((*MockBridgeContract)(nil).TokensRemove), arg0, arg1)
}

// TokensRemoveBatch mocks base method.
func (m *MockBridgeContract) TokensRemoveBatch(arg0 *bind.TransactOpts, arg1 []common.Address) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokensRemoveBatch", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokensRemoveBatch indicates an expected call of TokensRemoveBatch.
func (mr *MockBridgeContractMockRecorder) TokensRemoveBatch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokensRemoveBatch", reflect.TypeOf((*MockBridgeContract)(nil).TokensRemoveBatch), arg0, arg1)
}

// TriggerTransfers mocks base method.
func (m *MockBridgeContract) TriggerTransfers(arg0 *bind.TransactOpts) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TriggerTransfers", arg0)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerTransfers indicates an expected call of TriggerTransfers.
func (mr *MockBridgeContractMockRecorder) TriggerTransfers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerTransfers", reflect.TypeOf((*MockBridgeContract)(nil).TriggerTransfers), arg0)
}

// UnlockTransfers mocks base method.
func (m *MockBridgeContract) UnlockTransfers(arg0 *bind.TransactOpts, arg1 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockTransfers", arg0, arg1)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockTransfers indicates an expected call of UnlockTransfers.
func (mr *MockBridgeContractMockRecorder) UnlockTransfers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockTransfers", reflect.TypeOf((*MockBridgeContract)(nil).UnlockTransfers), arg0, arg1)
}

// UnlockTransfersBatch mocks base method.
func (m *MockBridgeContract) UnlockTransfersBatch(arg0 *bind.TransactOpts) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlockTransfersBatch", arg0)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockTransfersBatch indicates an expected call of UnlockTransfersBatch.
func (mr *MockBridgeContractMockRecorder) UnlockTransfersBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockTransfersBatch", reflect.TypeOf((*MockBridgeContract)(nil).UnlockTransfersBatch), arg0)
}

// Unpause mocks base method.
func (m *MockBridgeContract) Unpause(arg0 *bind.TransactOpts) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unpause", arg0)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unpause indicates an expected call of Unpause.
func (mr *MockBridgeContractMockRecorder) Unpause(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unpause", reflect.TypeOf((*MockBridgeContract)(nil).Unpause), arg0)
}

// ValidatorSet mocks base method.
func (m *MockBridgeContract) ValidatorSet(arg0 *bind.CallOpts, arg1 *big.Int) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatorSet", arg0, arg1)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidatorSet indicates an expected call of ValidatorSet.
func (mr *MockBridgeContractMockRecorder) ValidatorSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatorSet", reflect.TypeOf((*MockBridgeContract)(nil).ValidatorSet), arg0, arg1)
}

// WatchRoleAdminChanged mocks base method.
func (m *MockBridgeContract) WatchRoleAdminChanged(arg0 *bind.WatchOpts, arg1 chan<- *bindings.BridgeRoleAdminChanged, arg2, arg3, arg4 [][32]byte) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRoleAdminChanged", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRoleAdminChanged indicates an expected call of WatchRoleAdminChanged.
func (mr *MockBridgeContractMockRecorder) WatchRoleAdminChanged(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRoleAdminChanged", reflect.TypeOf((*MockBridgeContract)(nil).WatchRoleAdminChanged), arg0, arg1, arg2, arg3, arg4)
}

// WatchRoleGranted mocks base method.
func (m *MockBridgeContract) WatchRoleGranted(arg0 *bind.WatchOpts, arg1 chan<- *bindings.BridgeRoleGranted, arg2 [][32]byte, arg3, arg4 []common.Address) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRoleGranted", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRoleGranted indicates an expected call of WatchRoleGranted.
func (mr *MockBridgeContractMockRecorder) WatchRoleGranted(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRoleGranted", reflect.TypeOf((*MockBridgeContract)(nil).WatchRoleGranted), arg0, arg1, arg2, arg3, arg4)
}

// WatchRoleRevoked mocks base method.
func (m *MockBridgeContract) WatchRoleRevoked(arg0 *bind.WatchOpts, arg1 chan<- *bindings.BridgeRoleRevoked, arg2 [][32]byte, arg3, arg4 []common.Address) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRoleRevoked", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRoleRevoked indicates an expected call of WatchRoleRevoked.
func (mr *MockBridgeContractMockRecorder) WatchRoleRevoked(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRoleRevoked", reflect.TypeOf((*MockBridgeContract)(nil).WatchRoleRevoked), arg0, arg1, arg2, arg3, arg4)
}

// WatchTransfer mocks base method.
func (m *MockBridgeContract) WatchTransfer(arg0 *bind.WatchOpts, arg1 chan<- *bindings.BridgeTransfer, arg2 []*big.Int) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTransfer", arg0, arg1, arg2)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTransfer indicates an expected call of WatchTransfer.
func (mr *MockBridgeContractMockRecorder) WatchTransfer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTransfer", reflect.TypeOf((*MockBridgeContract)(nil).WatchTransfer), arg0, arg1, arg2)
}

// WatchTransferFinish mocks base method.
func (m *MockBridgeContract) WatchTransferFinish(arg0 *bind.WatchOpts, arg1 chan<- *bindings.BridgeTransferFinish, arg2 []*big.Int) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTransferFinish", arg0, arg1, arg2)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTransferFinish indicates an expected call of WatchTransferFinish.
func (mr *MockBridgeContractMockRecorder) WatchTransferFinish(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTransferFinish", reflect.TypeOf((*MockBridgeContract)(nil).WatchTransferFinish), arg0, arg1, arg2)
}

// WatchTransferSubmit mocks base method.
func (m *MockBridgeContract) WatchTransferSubmit(arg0 *bind.WatchOpts, arg1 chan<- *bindings.BridgeTransferSubmit, arg2 []*big.Int) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTransferSubmit", arg0, arg1, arg2)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTransferSubmit indicates an expected call of WatchTransferSubmit.
func (mr *MockBridgeContractMockRecorder) WatchTransferSubmit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTransferSubmit", reflect.TypeOf((*MockBridgeContract)(nil).WatchTransferSubmit), arg0, arg1, arg2)
}

// WatchUnpaused mocks base method.
func (m *MockBridgeContract) WatchUnpaused(arg0 *bind.WatchOpts, arg1 chan<- *bindings.BridgeUnpaused) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUnpaused", arg0, arg1)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnpaused indicates an expected call of WatchUnpaused.
func (mr *MockBridgeContractMockRecorder) WatchUnpaused(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnpaused", reflect.TypeOf((*MockBridgeContract)(nil).WatchUnpaused), arg0, arg1)
}

// WatchWithdraw mocks base method.
func (m *MockBridgeContract) WatchWithdraw(arg0 *bind.WatchOpts, arg1 chan<- *bindings.BridgeWithdraw, arg2 []common.Address) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchWithdraw", arg0, arg1, arg2)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchWithdraw indicates an expected call of WatchWithdraw.
func (mr *MockBridgeContractMockRecorder) WatchWithdraw(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchWithdraw", reflect.TypeOf((*MockBridgeContract)(nil).WatchWithdraw), arg0, arg1, arg2)
}

// Withdraw mocks base method.
func (m *MockBridgeContract) Withdraw(arg0 *bind.TransactOpts, arg1, arg2 common.Address, arg3 *big.Int, arg4 bool, arg5 []byte, arg6, arg7 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBridgeContractMockRecorder) Withdraw(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBridgeContract)(nil).Withdraw), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
}

// WrapWithdraw mocks base method.
func (m *MockBridgeContract) WrapWithdraw(arg0 *bind.TransactOpts, arg1 common.Address, arg2 []byte, arg3, arg4 *big.Int) (*types.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapWithdraw", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WrapWithdraw indicates an expected call of WrapWithdraw.
func (mr *MockBridgeContractMockRecorder) WrapWithdraw(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapWithdraw", reflect.TypeOf((*MockBridgeContract)(nil).WrapWithdraw), arg0, arg1, arg2, arg3, arg4)
}

// WrapperAddress mocks base method.
func (m *MockBridgeContract) WrapperAddress(arg0 *bind.CallOpts) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WrapperAddress", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WrapperAddress indicates an expected call of WrapperAddress.
func (mr *MockBridgeContractMockRecorder) WrapperAddress(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WrapperAddress", reflect.TypeOf((*MockBridgeContract)(nil).WrapperAddress), arg0)
}
