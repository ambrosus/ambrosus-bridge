import {deployments, ethers, getNamedAccounts} from "hardhat";
import type {Contract, Signer} from "ethers";

import chai from "chai";


chai.should();
export const expect = chai.expect;


describe("Contract", () => {
  let ownerS: Signer;
  let owner: string;

  let ethBridge: Contract;

  before(async () => {
    await deployments.fixture(["ethbridge"]);
    ({owner} = await getNamedAccounts());
    ownerS = await ethers.getSigner(owner);

    ethBridge = await ethers.getContract("EthBridge", ownerS);
  });

  beforeEach(async () => {
    await deployments.fixture(["ethbridge"]); // reset contracts state
  });


  it('BloomTest', async () => {

    const topicHashOk = "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62";
    const topicHashNeok = "0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d1337";
    const bloom = "0x4000b4140340201108c8000084240c1029802c009040000000d300400488230000042808048001a40212c028000120004800e20002001422040090018025214010100800400000044902100c0604465a0011b900000000200c00a81001004210008080a1020201604020888200b00a4406820040260900012000121000100040420059420008840000484003008049110010445b10480018200800204600080052d80084c90142970001103800104050c0200000400a40c886db04015004414500000002048409400400b219200300588891380600a80811020400040002230010500c9820b1040e85000000312048000480401021122240a0242c0000040e06";

    expect(await ethBridge.BloomTest(bloom, topicHashOk)).to.be.true;
    expect(await ethBridge.BloomTest(bloom, topicHashNeok)).to.be.false;

  });


  it('BlockHashTest', async () => {

    const header = "0xf9025ea0cfedf4c0ab76ee5020110c0cee557db0c6860f780345bb88b585c8f55f84e426a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347940000000000000000000000000000000000000000a0f327ceedf684500a7dac7dbf7cf58d419f0cf704d418d87ac19c7f88aeddec65a0e9901d8cfb921f5af0d3f40be8f55951becee5fbd8053e02fbfc914ffa77c5c9a0abb8e1f6e83ba4fae5859c246c325234289e7e2064d813f2201d31633188dc42b901004000b4140340201108c8000084240c1029802c009040000000d300400488230000042808048001a40212c028000120004800e20002001422040090018025214010100800400000044902100c0604465a0011b900000000200c00a81001004210008080a1020201604020888200b00a4406820040260900012000121000100040420059420008840000484003008049110010445b10480018200800204600080052d80084c90142970001103800104050c0200000400a40c886db04015004414500000002048409400400b219200300588891380600a80811020400040002230010500c9820b1040e85000000312048000480401021122240a0242c0000040e06028392689a8401c9c38083e2b3d8846186881ab861696e667572612e696f0000000000000000000000000000000000000000000000bafea70482f21976359fae417fff04c8053145e80f5007d432d2a842c15ea18849ee6ac1679de062523aabafd972926f2da0c88f3dcbbcb52f951d119bd6bf4d00a000000000000000000000000000000000000000000000000000000000000000008800000000000000000a"
    const hash = "0x8bd8d7d31423d4204eea19e0b3ee2e9bbb727498486289269e7fc69d5594ced0"

    expect(await ethBridge.BlockHashTest(header)).to.eq(hash);

  });


});
