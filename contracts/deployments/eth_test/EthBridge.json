{
  "address": "0xf9427deDdAa899d388db70c0Fb4dA84A06976C85",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sideBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokenThisAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokenSideAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeframeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSafetyBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.ConstructorArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "initialValidators",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "validatorSetAddress_",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "lastProcessedBlock_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "queue",
          "type": "tuple[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockTime_",
          "type": "uint256"
        }
      ],
      "name": "changeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSafetyBlocks_",
          "type": "uint256"
        }
      ],
      "name": "changeMinSafetyBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframeSeconds_",
          "type": "uint256"
        }
      ],
      "name": "changeTimeframeSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "getLockedTransfers",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonStructs.Transfer[]",
              "name": "transfers",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.LockedTransfers",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidatorSet",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProcessedBlock",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSafetyBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestLockedEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "removeLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes3",
                  "name": "p0Seal",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes3",
                  "name": "p0Bare",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "receiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes4",
                  "name": "step",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "finalizedVs",
                  "type": "uint64"
                }
              ],
              "internalType": "struct CheckAura.BlockAura[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receiptProof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "eventId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receiptProof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "address",
                  "name": "deltaAddress",
                  "type": "address"
                },
                {
                  "internalType": "int64",
                  "name": "deltaIndex",
                  "type": "int64"
                }
              ],
              "internalType": "struct CheckAura.ValidatorSetProof[]",
              "name": "vsChanges",
              "type": "tuple[]"
            },
            {
              "internalType": "uint64",
              "name": "transferEventBlock",
              "type": "uint64"
            }
          ],
          "internalType": "struct CheckAura.AuraProof",
          "name": "auraProof",
          "type": "tuple"
        }
      ],
      "name": "submitTransferAura",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeframeSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenSideAddress",
          "type": "address"
        }
      ],
      "name": "tokensAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenSideAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensAddBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        }
      ],
      "name": "tokensRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensRemoveBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "unlockTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validatorSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unwrapSide",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "wrapWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb4025abf217d54e1179650ad6a49d3eabaae913f5f80a19ab40bc41008abd3bb",
  "receipt": {
    "to": null,
    "from": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
    "contractAddress": "0xf9427deDdAa899d388db70c0Fb4dA84A06976C85",
    "transactionIndex": 34,
    "gasUsed": "4059763",
    "logsBloom": "0x00000004000000000000000400000000000000000000000000000000000000000000200000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000020000000000000000000a00000000000000000800000000000000000000000000000000000000000000004000000000000000020000000000000000000000000000000000040000000000000000000000000000005000000000000000000000400000000000000000000000000010000000000100000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf5e94f78fa56a1dc987859153854ea6a886a864f167b2015199894098014f6f8",
    "transactionHash": "0xb4025abf217d54e1179650ad6a49d3eabaae913f5f80a19ab40bc41008abd3bb",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 12204768,
        "transactionHash": "0xb4025abf217d54e1179650ad6a49d3eabaae913f5f80a19ab40bc41008abd3bb",
        "address": "0xf9427deDdAa899d388db70c0Fb4dA84A06976C85",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 31,
        "blockHash": "0xf5e94f78fa56a1dc987859153854ea6a886a864f167b2015199894098014f6f8"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 12204768,
        "transactionHash": "0xb4025abf217d54e1179650ad6a49d3eabaae913f5f80a19ab40bc41008abd3bb",
        "address": "0xf9427deDdAa899d388db70c0Fb4dA84A06976C85",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0xf5e94f78fa56a1dc987859153854ea6a886a864f167b2015199894098014f6f8"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 12204768,
        "transactionHash": "0xb4025abf217d54e1179650ad6a49d3eabaae913f5f80a19ab40bc41008abd3bb",
        "address": "0xf9427deDdAa899d388db70c0Fb4dA84A06976C85",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 33,
        "blockHash": "0xf5e94f78fa56a1dc987859153854ea6a886a864f167b2015199894098014f6f8"
      }
    ],
    "blockNumber": 12204768,
    "cumulativeGasUsed": "7731273",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "sideBridgeAddress": "0x32fac62b1196E03Ed3644a40DbFbe5728e31599A",
      "adminAddress": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
      "relayAddress": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
      "wrappingTokenAddress": "0xc778417E063141139Fce010982780140Aa0cD5Ab",
      "tokenThisAddresses": [
        "0xd390d1bFd4AAeCd1635da5dDa419d388a7CF8766",
        "0x0000000000000000000000000000000000000000",
        "0xc778417E063141139Fce010982780140Aa0cD5Ab"
      ],
      "tokenSideAddresses": [
        "0x37A715513f6DdEb9db9235f82dd823f5923791C4",
        "0x37A715513f6DdEb9db9235f82dd823f5923791C4",
        "0xE0b5DfA73BF1299e131000d5279a871c0ae1c17e"
      ],
      "fee": 10,
      "feeRecipient": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
      "timeframeSeconds": 1,
      "lockTime": 1,
      "minSafetyBlocks": 10
    },
    [
      "0x30C587199dfC2a82Cf6d087827A472aEebb5063e",
      "0xee02ACc1Ae6919eBB8ef3424b443a0F2718C255d",
      "0xe5c2feB69dF22E3a755e5f10FECc677DfBDAD8C2",
      "0xf4B075fDF227219fF2f72fE87641aDCdFDc019BC",
      "0xc1E639642a242396C420C4880ABB3599Fb69d242",
      "0x4137e5c2D3a17E931F96Ef4eAe7F34985d4e6FED",
      "0xe58647A6dB76F3e7eaA6c2dB86239E73e99ebE03"
    ],
    "0x0000000000000000000000000000000000000F00",
    "0xef164e92de4509c2ce122e4f76a5bbcc854795e68f2c3cb9a3a496184f2b7826"
  ],
  "numDeployments": 1,
  "solcInputHash": "48a0115daf5673e403fcb870d918396c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"initialValidators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"validatorSetAddress_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"lastProcessedBlock_\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"queue\",\"type\":\"tuple[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks_\",\"type\":\"uint256\"}],\"name\":\"changeMinSafetyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds_\",\"type\":\"uint256\"}],\"name\":\"changeTimeframeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getLockedTransfers\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.LockedTransfers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProcessedBlock\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSafetyBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestLockedEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"removeLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"p0Seal\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"p0Bare\",\"type\":\"bytes3\"},{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"step\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"finalizedVs\",\"type\":\"uint64\"}],\"internalType\":\"struct CheckAura.BlockAura[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receiptProof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receiptProof\",\"type\":\"bytes[]\"},{\"internalType\":\"address\",\"name\":\"deltaAddress\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"deltaIndex\",\"type\":\"int64\"}],\"internalType\":\"struct CheckAura.ValidatorSetProof[]\",\"name\":\"vsChanges\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"transferEventBlock\",\"type\":\"uint64\"}],\"internalType\":\"struct CheckAura.AuraProof\",\"name\":\"auraProof\",\"type\":\"tuple\"}],\"name\":\"submitTransferAura\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSideAddress\",\"type\":\"address\"}],\"name\":\"tokensAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensAddBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"}],\"name\":\"tokensRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensRemoveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"unlockTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrapSide\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"wrapWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/eth/EthBridge.sol\":\"EthBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4a1a0ba12bf1a33f10d9fe226278cf59675c0b929d29e4da99658a079b27fb84\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/checks/CheckAura.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\nimport \\\"./CheckReceiptsProof.sol\\\";\\n\\n\\ncontract CheckAura is CheckReceiptsProof {\\n    bytes1 constant PARENT_HASH_PREFIX = 0xA0;\\n    bytes1 constant STEP_PREFIX = 0x84;\\n    bytes2 constant SIGNATURE_PREFIX = 0xB841;\\n\\n    bytes32 public lastProcessedBlock;\\n    address[] public validatorSet;\\n\\n\\n    struct BlockAura {\\n        bytes3 p0Seal;\\n        bytes3 p0Bare;\\n\\n        bytes32 parentHash;\\n        bytes p2;\\n        bytes32 receiptHash;\\n        bytes p3;\\n\\n        bytes4 step;\\n        bytes signature;  // todo maybe pass s r v values?\\n\\n        uint64 finalizedVs;\\n    }\\n\\n\\n    struct ValidatorSetProof {\\n        bytes[] receiptProof;\\n        address deltaAddress;\\n        int64 deltaIndex; // < 0 ? remove : add\\n    }\\n\\n    struct AuraProof {\\n        BlockAura[] blocks;\\n        CommonStructs.TransferProof transfer;\\n        ValidatorSetProof[] vsChanges;\\n        uint64 transferEventBlock;\\n    }\\n\\n\\n\\n    constructor(address[] memory _initialValidators) {\\n        require(_initialValidators.length > 0, \\\"Length of _initialValidators must be bigger than 0\\\");\\n        validatorSet = _initialValidators;\\n    }\\n\\n    function checkAura_(AuraProof memory auraProof, uint minSafetyBlocks,\\n        address sideBridgeAddress, address validatorSetAddress) internal {\\n\\n        uint safetyChainLength;\\n        bytes32 blockHash;\\n        uint lastFinalizedVs;\\n\\n        bytes32 receiptHash = calcTransferReceiptsHash(auraProof.transfer, sideBridgeAddress);\\n        require(auraProof.blocks[auraProof.transferEventBlock].receiptHash == receiptHash, \\\"Transfer event validation failed\\\");\\n\\n\\n        for (uint i = 0; i < auraProof.blocks.length; i++) {\\n            BlockAura memory block_ = auraProof.blocks[i];\\n\\n            if (block_.finalizedVs != 0) {// 0 means no events should be finalized; so indexes are shifted by 1\\n                for (uint j = lastFinalizedVs; j < block_.finalizedVs; j++) {\\n                    ValidatorSetProof memory vsChange = auraProof.vsChanges[j];\\n\\n                    handleVS(vsChange);\\n                    if (vsChange.receiptProof.length != 0) {\\n                        receiptHash = calcValidatorSetReceiptHash(vsChange.receiptProof, validatorSetAddress, validatorSet);\\n\\n                        // event finalize always happened on block one after the block with event\\n                        // so event_block is finalized_block - 2\\n                        require(auraProof.blocks[i - 2].receiptHash == receiptHash, \\\"Wrong VS receipt hash\\\");\\n                        safetyChainLength = 2;\\n                    }\\n                }\\n\\n                lastFinalizedVs = block_.finalizedVs - 1;\\n            }\\n\\n            blockHash = checkBlock(block_);\\n\\n\\n            if (i + 1 != auraProof.blocks.length && blockHash == auraProof.blocks[i + 1].parentHash) {\\n                safetyChainLength++;\\n            } else if (i == auraProof.transferEventBlock) {\\n                safetyChainLength == 0;\\n            } else {\\n                require(safetyChainLength >= minSafetyBlocks, \\\"wrong parent hash\\\");\\n            }\\n\\n        }\\n\\n        lastProcessedBlock = blockHash;\\n    }\\n\\n    function getValidatorSet() public view returns (address[] memory) {\\n        return validatorSet;\\n    }\\n\\n    function handleVS(ValidatorSetProof memory vsEvent) internal {\\n        if (vsEvent.deltaIndex < 0) {\\n            uint index = uint(int(vsEvent.deltaIndex * (- 1) - 1));\\n            validatorSet[index] = validatorSet[validatorSet.length - 1];\\n            validatorSet.pop();\\n        }\\n        else {\\n            uint index = uint(int((vsEvent.deltaIndex)));\\n            validatorSet.push(validatorSet[index]);\\n            validatorSet[index] = vsEvent.deltaAddress;\\n        }\\n    }\\n\\n    function checkBlock(BlockAura memory block_) internal view returns (bytes32) {\\n        (bytes32 bareHash, bytes32 sealHash) = calcBlockHash(block_);\\n\\n        address validator = validatorSet[bytesToUint(block_.step) % validatorSet.length];\\n        checkSignature(validator, bareHash, block_.signature);\\n\\n        return sealHash;\\n    }\\n\\n    function calcBlockHash(BlockAura memory block_) internal pure returns (bytes32, bytes32) {\\n        bytes memory commonRlp = abi.encodePacked(PARENT_HASH_PREFIX, block_.parentHash, block_.p2, block_.receiptHash, block_.p3);\\n        return (\\n        // hash without seal (bare), for signature check\\n        keccak256(abi.encodePacked(block_.p0Bare, commonRlp)),\\n        // hash with seal, for prev_hash check\\n        keccak256(abi.encodePacked(block_.p0Seal, commonRlp, STEP_PREFIX, block_.step, SIGNATURE_PREFIX, block_.signature))\\n        );\\n    }\\n\\n\\n    function checkSignature(address signer, bytes32 messageHash, bytes memory signature) internal pure {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := byte(0, mload(add(signature, 96)))\\n            if lt(v, 27) {v := add(v, 27)}\\n        }\\n        require(ecrecover(messageHash, v, r, s) == signer, \\\"Failed to verify sign\\\");\\n    }\\n\\n    function calcValidatorSetReceiptHash(bytes[] memory receipt_proof, address validatorSetAddress, address[] memory vSet) private pure returns (bytes32) {\\n        bytes32 el = keccak256(abi.encodePacked(\\n                receipt_proof[0],\\n                validatorSetAddress,\\n                receipt_proof[1],\\n                abi.encode(vSet),\\n                receipt_proof[2]\\n            ));\\n        return calcReceiptsHash(receipt_proof, el, 3);\\n    }\\n\\n    function bytesToUint(bytes4 b) internal pure returns (uint){\\n        return uint(uint32(b));\\n    }\\n}\\n\",\"keccak256\":\"0x554ab7149dcf3a1914698845a8a7ca403abe173bd922d4628033b56f938fb7de\",\"license\":\"MIT\"},\"contracts/checks/CheckReceiptsProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\n\\n\\ncontract CheckReceiptsProof {\\n    // check readme for focs\\n    function calcReceiptsHash(bytes[] memory proof, bytes32 el, uint proofStart) internal pure returns (bytes32) {\\n        bytes memory s;\\n\\n        for (uint i = proofStart; i < proof.length; i += 2) {\\n            s = abi.encodePacked(proof[i], el, proof[i + 1]);\\n            el = (s.length > 32) ? keccak256(s) : bytes32(s);\\n        }\\n\\n        return el;\\n    }\\n\\n\\n    function calcTransferReceiptsHash(CommonStructs.TransferProof memory p, address eventContractAddress) internal pure returns (bytes32) {\\n        bytes32 el = keccak256(abi.encodePacked(\\n                p.receiptProof[0],\\n                eventContractAddress,\\n                p.receiptProof[1],\\n                toBinary(p.eventId),\\n                p.receiptProof[2],\\n                abi.encode(p.transfers),\\n                p.receiptProof[3]\\n            ));\\n        return calcReceiptsHash(p.receiptProof, el, 4);\\n        // start from proof[4]\\n    }\\n\\n\\n    function toBinary(uint _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), _x)\\n        }\\n        uint i;\\n        for (i = 0; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x7e46637724acc19ef57e50ac3bfc07826fe26f51aafb128d4f3f88e860ed869e\",\"license\":\"MIT\"},\"contracts/common/CommonBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./CommonStructs.sol\\\";\\nimport \\\"../tokens/IWrapper.sol\\\";\\n\\n\\ncontract CommonBridge is AccessControl, Pausable {\\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n\\n\\n    // queue to be pushed in another network\\n    CommonStructs.Transfer[] queue;\\n\\n    // locked transfers from another network\\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\\n    uint public oldestLockedEventId = 1;  // head index of lockedTransfers 'queue' mapping\\n\\n\\n    // this network to side network token addresses mapping\\n    mapping(address => address) public tokenAddresses;\\n    address public wrapperAddress;\\n\\n    uint public fee;\\n    address payable feeRecipient;\\n\\n    address public sideBridgeAddress;\\n    uint public minSafetyBlocks;\\n    uint public timeframeSeconds;\\n    uint public lockTime;\\n\\n    uint public inputEventId; // last processed event from side network\\n    uint outputEventId = 1;  // last created event in this network. start from 1 coz 0 consider already processed\\n\\n    uint lastTimeframe;\\n\\n    event Withdraw(address indexed from, uint eventId, uint feeAmount);\\n    event Transfer(uint indexed eventId, CommonStructs.Transfer[] queue);\\n    event TransferSubmit(uint indexed eventId);\\n    event TransferFinish(uint indexed eventId);\\n\\n\\n    constructor(CommonStructs.ConstructorArgs memory args)\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(RELAY_ROLE, args.relayAddress);\\n        _setupRole(ADMIN_ROLE, args.adminAddress);\\n\\n        // initialise tokenAddresses with start values\\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\\n        wrapperAddress = args.wrappingTokenAddress;\\n\\n        sideBridgeAddress = args.sideBridgeAddress;\\n        fee = args.fee;\\n        feeRecipient = args.feeRecipient;\\n        minSafetyBlocks = args.minSafetyBlocks;\\n        timeframeSeconds = args.timeframeSeconds;\\n        lockTime = args.lockTime;\\n    }\\n\\n\\n    function wrapWithdraw(address toAddress) public payable {\\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\\n        require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value > fee, \\\"Sent value < fee\\\");\\n        feeRecipient.transfer(fee);\\n\\n        uint restOfValue = msg.value - fee;\\n        IWrapper(wrapperAddress).deposit{value : restOfValue}();\\n\\n        //\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, restOfValue));\\n        emit Withdraw(msg.sender, outputEventId, fee);\\n\\n        withdraw_finish();\\n    }\\n\\n    function withdraw(address tokenThisAddress, address toAddress, uint amount, bool unwrapSide) payable public {\\n        address tokenSideAddress;\\n        if (unwrapSide) {\\n            require(tokenAddresses[address(0)] == tokenThisAddress, \\\"Token not point to native token\\\");\\n            // tokenSideAddress will be 0x0000000000000000000000000000000000000000 - for native token\\n        } else {\\n            tokenSideAddress = tokenAddresses[tokenThisAddress];\\n            require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n        }\\n\\n        require(msg.value == fee, \\\"Sent value != fee\\\");\\n        feeRecipient.transfer(msg.value);\\n\\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \\\"Fail transfer coins\\\");\\n\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, fee);\\n\\n        withdraw_finish();\\n    }\\n\\n    function withdraw_finish() internal {\\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\\n        if (nowTimeframe != lastTimeframe) {\\n            emit Transfer(outputEventId++, queue);\\n            delete queue;\\n\\n            lastTimeframe = nowTimeframe;\\n        }\\n    }\\n\\n\\n    // locked transfers from another network\\n    function getLockedTransfers(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\\n        return lockedTransfers[eventId];\\n    }\\n\\n\\n    function proceedTransfers(CommonStructs.Transfer[] memory transfers) internal {\\n        for (uint i = 0; i < transfers.length; i++) {\\n\\n            if (transfers[i].tokenAddress == address(0)) {// native token\\n                IWrapper(wrapperAddress).withdraw(transfers[i].amount);\\n                payable(transfers[i].toAddress).transfer(transfers[i].amount);\\n            } else {// ERC20 token\\n                require(\\n                    IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount),\\n                    \\\"Fail transfer coins\\\");\\n            }\\n\\n        }\\n    }\\n\\n\\n    // submitted transfers save here for `lockTime` period\\n    function lockTransfers(CommonStructs.Transfer[] memory events, uint eventId) internal {\\n        lockedTransfers[eventId].endTimestamp = block.timestamp + lockTime;\\n        for (uint i = 0; i < events.length; i++)\\n            lockedTransfers[eventId].transfers.push(events[i]);\\n    }\\n\\n    // after `lockTime` period, transfers can  be unlocked\\n    function unlockTransfers(uint eventId) public whenNotPaused {\\n        require(eventId == oldestLockedEventId, \\\"can unlock only oldest event\\\");\\n\\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n        require(transfersLocked.endTimestamp > 0, \\\"no locked transfers with this id\\\");\\n        require(transfersLocked.endTimestamp < block.timestamp, \\\"lockTime has not yet passed\\\");\\n\\n        proceedTransfers(transfersLocked.transfers);\\n\\n        delete lockedTransfers[eventId];\\n        emit TransferFinish(eventId);\\n\\n        oldestLockedEventId = eventId + 1;\\n    }\\n\\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\\n    function unlockTransfersBatch() public whenNotPaused {\\n        uint eventId = oldestLockedEventId;\\n        for (;; eventId++) {\\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\\n\\n            proceedTransfers(transfersLocked.transfers);\\n\\n            delete lockedTransfers[eventId];\\n            emit TransferFinish(eventId);\\n        }\\n        oldestLockedEventId = eventId;\\n    }\\n\\n    // delete transfers with passed eventId and all after it\\n    function removeLockedTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(eventId >= oldestLockedEventId, \\\"eventId must be >= oldestLockedEventId\\\");\\n        for (; lockedTransfers[eventId].endTimestamp != 0; eventId++)\\n            delete lockedTransfers[eventId];\\n    }\\n\\n\\n    // admin setters\\n\\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\\n        minSafetyBlocks = minSafetyBlocks_;\\n    }\\n\\n    function changeFee(uint fee_) public onlyRole(ADMIN_ROLE) {\\n        fee = fee_;\\n    }\\n\\n    function changeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        feeRecipient = feeRecipient_;\\n    }\\n\\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\\n        timeframeSeconds = timeframeSeconds_;\\n    }\\n\\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\\n        lockTime = lockTime_;\\n    }\\n\\n\\n    // token addressed mapping\\n\\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\\n    }\\n\\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\\n        delete tokenAddresses[tokenThisAddress];\\n    }\\n\\n    function tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\\n    }\\n\\n    function _tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) private {\\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \\\"sizes of tokenThisAddresses and tokenSideAddresses must be same\\\");\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\\n    }\\n\\n    function tokensRemoveBatch(address[] memory tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            delete tokenAddresses[tokenThisAddresses[i]];\\n    }\\n\\n    // pause\\n\\n    function pause() public onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // internal\\n\\n    function checkEventId(uint eventId) internal {\\n        require(eventId == ++inputEventId, \\\"EventId out of order\\\");\\n    }\\n\\n    receive() external payable {}  // need to receive native token from wrapper contract\\n\\n}\\n\",\"keccak256\":\"0x2720080e9a1c11db55e857b035fa5552619cb0b91ccfe7d1971b85effb4b59a6\",\"license\":\"MIT\"},\"contracts/common/CommonStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary CommonStructs {\\n    struct Transfer {\\n        address tokenAddress;\\n        address toAddress;\\n        uint amount;\\n    }\\n\\n    struct TransferProof {\\n        bytes[] receiptProof;\\n        uint eventId;\\n        Transfer[] transfers;\\n    }\\n\\n    struct LockedTransfers {\\n        Transfer[] transfers;\\n        uint endTimestamp;\\n    }\\n\\n    struct ConstructorArgs {\\n        address sideBridgeAddress; address adminAddress;\\n        address relayAddress; address wrappingTokenAddress;\\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\\n        uint fee; address payable feeRecipient;\\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0x21ed033271ffa50d60805037e81197610a3764b9647f8b67b85f7454b8ac0bd8\",\"license\":\"MIT\"},\"contracts/eth/EthBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonBridge.sol\\\";\\nimport \\\"../common/CommonStructs.sol\\\";\\nimport \\\"../checks/CheckAura.sol\\\";\\n\\n\\ncontract EthBridge is CommonBridge, CheckAura {\\n    address validatorSetAddress;\\n\\n    constructor(\\n        CommonStructs.ConstructorArgs memory args,\\n        address[] memory initialValidators,\\n        address validatorSetAddress_,\\n        bytes32 lastProcessedBlock_\\n    )\\n    CommonBridge(args)\\n    CheckAura(initialValidators)\\n    {\\n        validatorSetAddress = validatorSetAddress_;\\n        lastProcessedBlock = lastProcessedBlock_;\\n    }\\n\\n    function submitTransferAura(AuraProof memory auraProof) public onlyRole(RELAY_ROLE) whenNotPaused {\\n        emit TransferSubmit(auraProof.transfer.eventId);\\n\\n        checkEventId(auraProof.transfer.eventId);\\n\\n        checkAura_(auraProof, minSafetyBlocks, sideBridgeAddress, validatorSetAddress);\\n\\n        lockTransfers(auraProof.transfer.transfers, auraProof.transfer.eventId);\\n    }\\n}\\n\",\"keccak256\":\"0x366ad6b91caef62e198703559907de1533b93f42f4e51561d416e39b61c31b8b\",\"license\":\"MIT\"},\"contracts/tokens/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWrapper {\\n    event Deposit(address indexed dst, uint amount);\\n    event Withdrawal(address indexed src, uint amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external payable;\\n}\\n\",\"keccak256\":\"0x800c261f75f979f219a046bc3b5667e1371734606f47356c59a463dece282177\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016004556001600e553480156200001b57600080fd5b5060405162004598380380620045988339810160408190526200003e91620005ab565b6001805460ff1916905582846200006060003364010000000062000243810204565b6200009f7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7826040015162000243640100000000026401000000009004565b620000de7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826020015162000243640100000000026401000000009004565b6200010181608001518260a001516200025c640100000000026401000000009004565b606081015160068054600160a060020a03928316600160a060020a03199182161790915582516009805491841691831691909117905560c083015160075560e083015160088054919093169116179055610140810151600a55610100810151600b556101200151600c558051620001ff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4c656e677468206f66205f696e697469616c56616c696461746f7273206d757360448201527f7420626520626967676572207468616e2030000000000000000000000000000060648201526084015b60405180910390fd5b80516200021490601190602084019062000464565b505060128054600160a060020a031916600160a060020a03939093169290921790915560105550620007fb9050565b6200025882826401000000006200039b810204565b5050565b8051825114620002ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d65006064820152608401620001f6565b815160005b81811015620003955782818151811062000312576200031262000784565b60200260200101516005600086848151811062000333576200033362000784565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a0316021790555080806200038c9062000741565b915050620002f4565b50505050565b620003b0828264010000000062000437810204565b6200025857600082815260208181526040808320600160a060020a03851684529091529020805460ff19166001179055620003f364010000000062000460810204565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600091825260208281526040808420600160a060020a0393909316845291905290205460ff1690565b3390565b828054828255906000526020600020908101928215620004bc579160200282015b82811115620004bc5782518254600160a060020a031916600160a060020a0390911617825560209092019160019091019062000485565b50620004ca929150620004ce565b5090565b5b80821115620004ca5760008155600101620004cf565b8051620004f281620007e2565b919050565b600082601f8301126200050957600080fd5b815160206001604060020a0380831115620005285762000528620007b3565b818302604051601f19603f830116810181811084821117156200054f576200054f620007b3565b604052848152838101925086840182880185018910156200056f57600080fd5b600092505b858310156200059f5780516200058a81620007e2565b84529284019260019290920191840162000574565b50979650505050505050565b60008060008060808587031215620005c257600080fd5b84516001604060020a0380821115620005da57600080fd5b908601906101608289031215620005f057600080fd5b620005fa62000715565b6200060583620004e5565b81526200061560208401620004e5565b60208201526200062860408401620004e5565b60408201526200063b60608401620004e5565b60608201526080830151828111156200065357600080fd5b620006618a828601620004f7565b60808301525060a0830151828111156200067a57600080fd5b620006888a828601620004f7565b60a08301525060c083015160c0820152620006a660e08401620004e5565b60e0820152610100838101519082015261012080840151908201526101409283015192810192909252602087015191955080821115620006e557600080fd5b50620006f487828801620004f7565b9350506200070560408601620004e5565b6060959095015193969295505050565b60405161016081016001604060020a03811182821017156200073b576200073b620007b3565b60405290565b60006000198214156200077d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600160a060020a0381168114620007f857600080fd5b50565b613d8d806200080b6000396000f3fe60806040526004361061024e5760003560e060020a900480638ac1f86f1161013d578063ba8bbbe0116100ba578063e31be0871161007e578063e31be087146106be578063e4e6bba6146106eb578063e64808f3146106fe578063f33fe10f1461071e578063f862b7eb1461073e578063fd5d2ef31461075e57600080fd5b8063ba8bbbe01461063a578063baeebe7514610650578063cf33125014610666578063d547741f14610688578063ddca3f43146106a857600080fd5b8063934785b711610101578063934785b7146105a657806396cf5227146105b957806399b5bb64146105d9578063a217fddf146105ef578063b6d3385e1461060457600080fd5b80638ac1f86f1461051b5780638e5df9c7146105305780638ee112751461055057806391d1485414610570578063924cf6e01461059057600080fd5b80633f4ba83a116101cb5780636a1db1bf1161018f5780636a1db1bf1461046c57806375b238fc1461048c5780637df8b802146104ae5780638456cb59146104e6578063853890ae146104fb57600080fd5b80633f4ba83a146103cf57806342180fb8146103e45780634a1856de146104045780635249a705146104345780635c975abb1461045457600080fd5b8063248a9ca311610212578063248a9ca3146103295780632f2ff15d14610359578063331a891a1461037957806333de61d21461039957806336568abe146103af57600080fd5b806301ffc9a71461025a578063044218231461028f57806309fce356146102d15780630d668087146102f3578063236040711461030957600080fd5b3661025557005b600080fd5b34801561026657600080fd5b5061027a610275366004613273565b61077e565b60405190151581526020015b60405180910390f35b34801561029b57600080fd5b506102c37f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b604051908152602001610286565b3480156102dd57600080fd5b506102f16102ec3660046131b4565b6107e7565b005b3480156102ff57600080fd5b506102c3600c5481565b34801561031557600080fd5b506102f16103243660046130d6565b61080f565b34801561033557600080fd5b506102c3610344366004613235565b60009081526020819052604090206001015490565b34801561036557600080fd5b506102f161037436600461324e565b61084b565b34801561038557600080fd5b506102f1610394366004613235565b610871565b3480156103a557600080fd5b506102c360105481565b3480156103bb57600080fd5b506102f16103ca36600461324e565b6109af565b3480156103db57600080fd5b506102f1610a3a565b3480156103f057600080fd5b506102f16103ff366004613235565b610a5e565b34801561041057600080fd5b506102c361041f366004613235565b60036020526000908152604090206001015481565b34801561044057600080fd5b506102f161044f36600461317f565b610a7d565b34801561046057600080fd5b5060015460ff1661027a565b34801561047857600080fd5b506102f1610487366004613235565b610b02565b34801561049857600080fd5b506102c3600080516020613d3883398151915281565b3480156104ba57600080fd5b506006546104ce90600160a060020a031681565b604051600160a060020a039091168152602001610286565b3480156104f257600080fd5b506102f1610b21565b34801561050757600080fd5b506102f16105163660046130f3565b610b42565b34801561052757600080fd5b506102f1610b8a565b34801561053c57600080fd5b506102f161054b3660046130d6565b610ce2565b34801561055c57600080fd5b506102f161056b36600461328e565b610d23565b34801561057c57600080fd5b5061027a61058b36600461324e565b610df3565b34801561059c57600080fd5b506102c3600a5481565b6102f16105b436600461312c565b610e1c565b3480156105c557600080fd5b506102f16105d4366004613235565b6111c1565b3480156105e557600080fd5b506102c3600d5481565b3480156105fb57600080fd5b506102c3600081565b34801561061057600080fd5b506104ce61061f3660046130d6565b600560205260009081526040902054600160a060020a031681565b34801561064657600080fd5b506102c360045481565b34801561065c57600080fd5b506102c3600b5481565b34801561067257600080fd5b5061067b6111e0565b6040516102869190613857565b34801561069457600080fd5b506102f16106a336600461324e565b611242565b3480156106b457600080fd5b506102c360075481565b3480156106ca57600080fd5b506106de6106d9366004613235565b611268565b6040516102869190613991565b6102f16106f93660046130d6565b611324565b34801561070a57600080fd5b506104ce610719366004613235565b6115c2565b34801561072a57600080fd5b506009546104ce90600160a060020a031681565b34801561074a57600080fd5b506102f1610759366004613235565b6115ec565b34801561076a57600080fd5b506102f1610779366004613235565b61181f565b6000600160e060020a031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806107e157507f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a03198316145b92915050565b600080516020613d38833981519152610800813361183e565b61080a83836118a5565b505050565b600080516020613d38833981519152610828813361183e565b5060088054600160a060020a031916600160a060020a0392909216919091179055565b600082815260208190526040902060010154610867813361183e565b61080a83836119bb565b600080516020613d3883398151915261088a813361183e565b60015460ff166108e45760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064015b60405180910390fd5b60045482101561095f5760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e744964000000000000000000000000000000000000000000000000000060648201526084016108db565b600082815260036020526040902060010154156109ab5760008281526003602052604081209061098f8282612cb1565b50600060019190910155816109a381613c68565b92505061095f565b5050565b600160a060020a0381163314610a305760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108db565b6109ab8282611a3f565b600080516020613d38833981519152610a53813361183e565b610a5b611aa4565b50565b600080516020613d38833981519152610a77813361183e565b50600b55565b600080516020613d38833981519152610a96813361183e565b815160005b81811015610afc5760056000858381518110610ab957610ab9613ce2565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610af481613c68565b915050610a9b565b50505050565b600080516020613d38833981519152610b1b813361183e565b50600755565b600080516020613d38833981519152610b3a813361183e565b610a5b611b43565b600080516020613d38833981519152610b5b813361183e565b50600160a060020a0391821660009081526005602052604090208054600160a060020a03191691909216179055565b60015460ff1615610bb05760405160e560020a62461bcd0281526004016108db9061395a565b6004545b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610c4257600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610be8565b5050505081526020016001820154815250509050806020015160001480610c6c5750428160200151115b15610c775750600455565b8051610c8290611b9c565b600082815260036020526040812090610c9b8282612cb1565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610cda81613c68565b915050610bb4565b600080516020613d38833981519152610cfb813361183e565b50600160a060020a031660009081526005602052604090208054600160a060020a0319169055565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7610d4e813361183e565b60015460ff1615610d745760405160e560020a62461bcd0281526004016108db9061395a565b60208083015101516040517f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b90600090a2610db6826020015160200151611e30565b600a54600954601254610dd99285929091600160a060020a039182169116611e95565b6109ab8260200151604001518360200151602001516121d1565b600091825260208281526040808420600160a060020a0393909316845291905290205460ff1690565b60008115610eb1576000805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc54600160a060020a03868116911614610eac5760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e0060448201526064016108db565b610f1d565b50600160a060020a038085166000908152600560205260409020541680610f1d5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108db565b6007543414610f715760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d2066656500000000000000000000000000000060448201526064016108db565b600854604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610faa573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101849052600160a060020a038616906323b872dd90606401602060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190613218565b6110995760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108db565b60408051606081018252600160a060020a0380841682528681166020830190815282840187815260028054600181018255600091909152935160039094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81018054958516600160a060020a031996871617905591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830180549190941694169390931790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600e54600754915133927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568926111aa92909190918252602082015260400190565b60405180910390a26111ba612294565b5050505050565b600080516020613d388339815191526111da813361183e565b50600c55565b6060601180548060200260200160405190810160405280929190818152602001828054801561123857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161121a575b5050505050905090565b60008281526020819052604090206001015461125e813361183e565b61080a8383611a3f565b6040805180820190915260608152600060208201526000828152600360209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b8282101561130b57600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016112b1565b5050505081526020016001820154815250509050919050565b600654600160a060020a0390811660009081526005602052604090205416806113925760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108db565b60075434116113e65760405160e560020a62461bcd02815260206004820152601060248201527f53656e742076616c7565203c206665650000000000000000000000000000000060448201526064016108db565b600854600754604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015611422573d6000803e3d6000fd5b506000600754346114339190613bbc565b9050600660009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b15801561148857600080fd5b505af115801561149c573d6000803e3d6000fd5b505060408051606081018252600160a060020a0380881682528881166020830190815282840188815260028054600181018255600091909152935160039094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81018054958516600160a060020a031996871617905591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830180549190941694169390931790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600e5460075491513395507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56894506115b29350909190918252602082015260400190565b60405180910390a261080a612294565b601181815481106115d257600080fd5b600091825260209091200154600160a060020a0316905081565b60015460ff16156116125760405160e560020a62461bcd0281526004016108db9061395a565b60045481146116665760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e740000000060448201526064016108db565b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b828210156116f457600084815260209081902060408051606081018252600386029092018054600160a060020a0390811684526001808301549091168486015260029091015491830191909152908352909201910161169a565b5050505081526020016001820154815250509050600081602001511161175f5760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e73666572732077697468207468697320696460448201526064016108db565b428160200151106117b55760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f742079657420706173736564000000000060448201526064016108db565b80516117c090611b9c565b6000828152600360205260408120906117d98282612cb1565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2611818826001613a88565b6004555050565b600080516020613d38833981519152611838813361183e565b50600a55565b6118488282610df3565b6109ab5761186081600160a060020a0316601461230c565b61186b83602061230c565b60405160200161187c9291906137d6565b60408051601f198184030181529082905260e560020a62461bcd0282526108db91600401613927565b805182511461191f5760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d650060648201526084016108db565b815160005b81811015610afc5782818151811061193e5761193e613ce2565b60200260200101516005600086848151811061195c5761195c613ce2565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a0316021790555080806119b390613c68565b915050611924565b6119c58282610df3565b6109ab57600082815260208181526040808320600160a060020a03851684529091529020805460ff191660011790556119fb3390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611a498282610df3565b156109ab57600082815260208181526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16611af95760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108db565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60015460ff1615611b695760405160e560020a62461bcd0281526004016108db9061395a565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611b26565b60005b81518110156109ab576000600160a060020a0316828281518110611bc557611bc5613ce2565b602002602001015160000151600160a060020a03161415611ce1576006548251600160a060020a0390911690632e1a7d4d90849084908110611c0957611c09613ce2565b6020026020010151604001516040518263ffffffff1660e060020a028152600401611c3691815260200190565b600060405180830381600087803b158015611c5057600080fd5b505af1158015611c64573d6000803e3d6000fd5b50505050818181518110611c7a57611c7a613ce2565b602002602001015160200151600160a060020a03166108fc838381518110611ca457611ca4613ce2565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015611cdb573d6000803e3d6000fd5b50611e1e565b818181518110611cf357611cf3613ce2565b602002602001015160000151600160a060020a031663a9059cbb838381518110611d1f57611d1f613ce2565b602002602001015160200151848481518110611d3d57611d3d613ce2565b6020026020010151604001516040518363ffffffff1660e060020a028152600401611d7d929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b158015611d9757600080fd5b505af1158015611dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcf9190613218565b611e1e5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108db565b80611e2881613c68565b915050611b9f565b600d60008154611e3f90613c68565b91829055508114610a5b5760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f7264657200000000000000000000000060448201526064016108db565b600080600080611ea98860200151876124f9565b9050808860000151896060015167ffffffffffffffff1681518110611ed057611ed0613ce2565b60200260200101516080015114611f2c5760405160e560020a62461bcd02815260206004820181905260248201527f5472616e73666572206576656e742076616c69646174696f6e206661696c656460448201526064016108db565b60005b8851518110156121c457600089600001518281518110611f5157611f51613ce2565b6020026020010151905080610100015167ffffffffffffffff166000146120dd57835b81610100015167ffffffffffffffff168110156120bd5760008b604001518281518110611fa357611fa3613ce2565b60200260200101519050611fb6816125ee565b805151156120aa5761202781600001518a601180548060200260200160405190810160405280929190818152602001828054801561201d57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611fff575b505050505061277e565b8c519095508590612039600287613bbc565b8151811061204957612049613ce2565b602002602001015160800151146120a55760405160e560020a62461bcd02815260206004820152601560248201527f57726f6e6720565320726563656970742068617368000000000000000000000060448201526064016108db565b600297505b50806120b581613c68565b915050611f74565b5060018161010001516120d09190613bd3565b67ffffffffffffffff1693505b6120e681612834565b8a51519095506120f7836001613a88565b1415801561212c5750895161210d836001613a88565b8151811061211d5761211d613ce2565b60200260200101516040015185145b15612143578561213b81613c68565b9650506121b1565b896060015167ffffffffffffffff1682141561215e576121b1565b888610156121b15760405160e560020a62461bcd02815260206004820152601160248201527f77726f6e6720706172656e74206861736800000000000000000000000000000060448201526064016108db565b50806121bc81613c68565b915050611f2f565b5050506010555050505050565b600c546121de9042613a88565b6000828152600360205260408120600101919091555b825181101561080a576000828152600360205260409020835184908390811061221f5761221f613ce2565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a039384161782559383015194810180549094169490911693909317909155604001516002909101558061228c81613c68565b9150506121f4565b6000600b54426122a49190613aa0565b9050600f548114610a5b57600e80549060006122bf83613c68565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260026040516122f391906138b7565b60405180910390a261230760026000612cb1565b600f55565b6060600061231b836002613b4b565b612326906002613a88565b67ffffffffffffffff81111561233e5761233e613cfb565b6040519080825280601f01601f191660200182016040528015612368576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061239f5761239f613ce2565b6020010190600160f860020a031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106123ea576123ea613ce2565b6020010190600160f860020a031916908160001a905350600061240e846002613b4b565b612419906001613a88565b90505b60018111156124a0577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061245a5761245a613ce2565b1a60f860020a0282828151811061247357612473613ce2565b6020010190600160f860020a031916908160001a90535060109094049361249981613c51565b905061241c565b5083156124f25760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108db565b9392505050565b600080836000015160008151811061251357612513613ce2565b602002602001015183856000015160018151811061253357612533613ce2565b602002602001015161254887602001516128b9565b87518051600290811061255d5761255d613ce2565b6020026020010151886040015160405160200161257a91906138a4565b60405160208183030381529060405289600001516003815181106125a0576125a0613ce2565b60200260200101516040516020016125be97969594939291906136f4565b6040516020818303038152906040528051906020012090506125e68460000151826004612a21565b949350505050565b6000816040015160070b12156126d8576000600182604001516000196126149190613ab4565b61261e9190613b6a565b60070b9050601160016011805490506126379190613bbc565b8154811061264757612647613ce2565b60009182526020909120015460118054600160a060020a03909216918390811061267357612673613ce2565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555060118054806126b2576126b2613cc9565b60008281526020902081016000199081018054600160a060020a03191690550190555050565b6000816040015160070b905060118082815481106126f8576126f8613ce2565b60009182526020808320909101548354600181018555938352918190209092018054600160a060020a031916600160a060020a03909216919091179055820151601180548390811061274c5761274c613ce2565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505050565b6000808460008151811061279457612794613ce2565b602002602001015184866001815181106127b0576127b0613ce2565b6020026020010151856040516020016127c99190613857565b604051602081830303815290604052886002815181106127eb576127eb613ce2565b6020026020010151604051602001612807959493929190613675565b60405160208183030381529060405280519060200120905061282b85826003612a21565b95945050505050565b600080600061284284612ad1565b915091506000601180805490506128688760c0015163ffffffff60e060020a9091041690565b6128729190613c83565b8154811061288257612882613ce2565b9060005260206000200160009054906101000a9004600160a060020a031690506128b181848760e00151612bc9565b509392505050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b60208110156129505781818151811061290257612902613ce2565b60209101015160f860020a90819004027fff00000000000000000000000000000000000000000000000000000000000000161561293e57612950565b8061294881613c68565b9150506128e7565b600061295d826020613bbc565b67ffffffffffffffff81111561297557612975613cfb565b6040519080825280601f01601f19166020018201604052801561299f576020820181803683370190505b50905060005b8151811015612a185783836129b981613c68565b9450815181106129cb576129cb613ce2565b602001015160f860020a900460f860020a028282815181106129ef576129ef613ce2565b6020010190600160f860020a031916908160001a90535080612a1081613c68565b9150506129a5565b50949350505050565b60006060825b8551811015612ac757858181518110612a4257612a42613ce2565b60200260200101518587836001612a599190613a88565b81518110612a6957612a69613ce2565b6020026020010151604051602001612a839392919061379f565b60405160208183030381529060405291506020825111612aab57612aa682613bfc565b612ab3565b815160208301205b9450612ac0600282613a88565b9050612a27565b5092949350505050565b600080600060a060f860020a028460400151856060015186608001518760a00151604051602001612b06959493929190613503565b6040516020818303038152906040529050836020015181604051602001612b2e929190613570565b60408051601f19818403018152908290528051602091820120865160c088015160e08901519294612ba994929387937f840000000000000000000000000000000000000000000000000000000000000093927fb8410000000000000000000000000000000000000000000000000000000000009291016135b6565b604051602081830303815290604052805190602001209250925050915091565b60208101516040820151606083015160001a601b811015612be857601b015b60408051600081526020810180835287905260ff8316918101919091526060810184905260808101839052600160a060020a0387169060019060a0016020604051602081039080840390855afa158015612c46573d6000803e3d6000fd5b50505060206040510351600160a060020a031614612ca95760405160e560020a62461bcd02815260206004820152601560248201527f4661696c656420746f20766572696679207369676e000000000000000000000060448201526064016108db565b505050505050565b5080546000825560030290600052602060002090810190610a5b91905b80821115612d00578054600160a060020a03199081168255600182018054909116905560006002820155600301612cce565b5090565b600082601f830112612d1557600080fd5b81356020612d2a612d2583613a64565b613a33565b8281528181019085830183850287018401881015612d4757600080fd5b60005b85811015612d6f578135612d5d81613d14565b84529284019290840190600101612d4a565b5090979650505050505050565b600082601f830112612d8d57600080fd5b81356020612d9d612d2583613a64565b8281528181019085830183850287018401881015612dba57600080fd5b6000805b86811015612dfd57823567ffffffffffffffff811115612ddc578283fd5b612dea8b88838d0101612f3e565b8652509385019391850191600101612dbe565b509198975050505050505050565b600082601f830112612e1c57600080fd5b81356020612e2c612d2583613a64565b8281528181019085830183850287018401881015612e4957600080fd5b60005b85811015612d6f57813567ffffffffffffffff80821115612e6c57600080fd5b908901906060828c03601f1901811315612e8557600080fd5b612e8d6139c3565b8884013583811115612e9e57600080fd5b612eac8e8b83880101612d7c565b8252506040925082840135612ec081613d14565b818a01529281013592600784900b8414612ed957600080fd5b918201929092528552509284019290840190600101612e4c565b80357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612f2157600080fd5b919050565b8035600160e060020a031981168114612f2157600080fd5b600082601f830112612f4f57600080fd5b813567ffffffffffffffff811115612f6957612f69613cfb565b612f7c601f8201601f1916602001613a33565b818152846020838601011115612f9157600080fd5b816020850160208301376000918101602001919091529392505050565b60006060808385031215612fc157600080fd5b612fc96139c3565b9150823567ffffffffffffffff80821115612fe357600080fd5b612fef86838701612d7c565b84526020915081850135828501526040808601358281111561301057600080fd5b86019150601f8201871361302357600080fd5b8135613031612d2582613a64565b81815284810190848601878402860187018b101561304e57600080fd5b60009550855b848110156130aa5788828d03121561306a578687fd5b6130726139c3565b823561307d81613d14565b81528289013561308c81613d14565b818a0152828701358782015284529287019290880190600101613054565b505080848901525050505050505092915050565b803567ffffffffffffffff81168114612f2157600080fd5b6000602082840312156130e857600080fd5b81356124f281613d14565b6000806040838503121561310657600080fd5b823561311181613d14565b9150602083013561312181613d14565b809150509250929050565b6000806000806080858703121561314257600080fd5b843561314d81613d14565b9350602085013561315d81613d14565b925060408501359150606085013561317481613d29565b939692955090935050565b60006020828403121561319157600080fd5b813567ffffffffffffffff8111156131a857600080fd5b6125e684828501612d04565b600080604083850312156131c757600080fd5b823567ffffffffffffffff808211156131df57600080fd5b6131eb86838701612d04565b9350602085013591508082111561320157600080fd5b5061320e85828601612d04565b9150509250929050565b60006020828403121561322a57600080fd5b81516124f281613d29565b60006020828403121561324757600080fd5b5035919050565b6000806040838503121561326157600080fd5b82359150602083013561312181613d14565b60006020828403121561328557600080fd5b6124f282612f26565b600060208083850312156132a157600080fd5b67ffffffffffffffff80843511156132b857600080fd5b83358401608081870312156132cc57600080fd5b6132d46139ec565b82823511156132e257600080fd5b8135820187601f8201126132f557600080fd5b613302612d258235613a64565b808235825286820191508683018a8889863502860101111561332357600080fd5b60005b843581101561343d57878235111561333d57600080fd5b81358501610120818e03601f1901121561335657600080fd5b61335e613a0f565b6133698b8301612ef3565b815261337760408301612ef3565b8b82015260608201356040820152896080830135111561339657600080fd5b6133a88e8c6080850135850101612f3e565b606082015260a082013560808201528960c083013511156133c857600080fd5b6133da8e8c60c0850135850101612f3e565b60a08201526133eb60e08301612f26565b60c08201526101008201358a81111561340357600080fd5b6134118f8d83860101612f3e565b60e08301525061342461012083016130be565b6101008201528552509288019290880190600101613326565b505083525050818401358381111561345457600080fd5b61346088828501612fae565b8583015250826040830135111561347657600080fd5b6134868760408401358401612e0b565b6040820152613497606083016130be565b60608201529695505050505050565b600081518084526020808501945080840160005b838110156134f85781518051600160a060020a03908116895284820151168489015260409081015190880152606090960195908201906001016134ba565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008616815284600182015260008451613543816021850160208901613c25565b80830190508460218201528351613561816041840160208801613c25565b01604101979650505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1983168152600082516135a8816003850160208701613c25565b919091016003019392505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1987168152600086516135ee816003850160208b01613c25565b7fff000000000000000000000000000000000000000000000000000000000000008716600391840191820152600160e060020a0319861660048201527fffff00000000000000000000000000000000000000000000000000000000000085166008820152835161366581600a840160208801613c25565b01600a0198975050505050505050565b60008651613687818460208b01613c25565b600160a060020a0387166c010000000000000000000000000290830190815285516136b9816014840160208a01613c25565b85519101906136cf816014840160208901613c25565b84519101906136e5816014840160208801613c25565b01601401979650505050505050565b6000885160206137078285838e01613c25565b81840191506c01000000000000000000000000600160a060020a038b160282526014895161373a81838601858e01613c25565b895193019261374e81838601858d01613c25565b885193019261376281838601858c01613c25565b875193019261377681838601858b01613c25565b865193019261378a81838601858a01613c25565b929092019091019a9950505050505050505050565b600084516137b1818460208901613c25565b820184815283516137c9816020808501908801613c25565b0160200195945050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161380e816017850160208801613c25565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161384b816028840160208801613c25565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b81811015613898578351600160a060020a031683529284019291840191600101613873565b50909695505050505050565b6020815260006124f260208301846134a6565b60006020808301818452808554808352604092508286019150866000528360002060005b8281101561391a578154600160a060020a03908116855260018084015490911687860152600283015486860152606090940193600390920191016138db565b5091979650505050505050565b6020815260008251806020840152613946816040850160208701613c25565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020815260008251604060208401526139ad60608401826134a6565b9050602084015160408401528091505092915050565b6040516060810167ffffffffffffffff811182821017156139e6576139e6613cfb565b60405290565b6040516080810167ffffffffffffffff811182821017156139e6576139e6613cfb565b604051610120810167ffffffffffffffff811182821017156139e6576139e6613cfb565b604051601f8201601f1916810167ffffffffffffffff81118282101715613a5c57613a5c613cfb565b604052919050565b600067ffffffffffffffff821115613a7e57613a7e613cfb565b5060209081020190565b60008219821115613a9b57613a9b613c97565b500190565b600082613aaf57613aaf613cb0565b500490565b60008160070b8360070b677fffffffffffffff600082136000841383830485118282161615613ae557613ae5613c97565b677fffffffffffffff196000851282811687830587121615613b0957613b09613c97565b60008712925085820587128484161615613b2557613b25613c97565b85850587128184161615613b3b57613b3b613c97565b5050509290910295945050505050565b6000816000190483118215151615613b6557613b65613c97565b500290565b60008160070b8360070b6000811281677fffffffffffffff1901831281151615613b9657613b96613c97565b81677fffffffffffffff018313811615613bb257613bb2613c97565b5090039392505050565b600082821015613bce57613bce613c97565b500390565b600067ffffffffffffffff83811690831681811015613bf457613bf4613c97565b039392505050565b80516020808301519190811015613c1f578060200360080260020a600003821691505b50919050565b60005b83811015613c40578181015183820152602001613c28565b83811115610afc5750506000910152565b600081613c6057613c60613c97565b506000190190565b6000600019821415613c7c57613c7c613c97565b5060010190565b600082613c9257613c92613cb0565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603160045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610a5b57600080fd5b8015158114610a5b57600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212208d1fedc5954325923f6dbb615a66010d9558d38d4afa61471f437dbf5ef529bd64736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061024e5760003560e060020a900480638ac1f86f1161013d578063ba8bbbe0116100ba578063e31be0871161007e578063e31be087146106be578063e4e6bba6146106eb578063e64808f3146106fe578063f33fe10f1461071e578063f862b7eb1461073e578063fd5d2ef31461075e57600080fd5b8063ba8bbbe01461063a578063baeebe7514610650578063cf33125014610666578063d547741f14610688578063ddca3f43146106a857600080fd5b8063934785b711610101578063934785b7146105a657806396cf5227146105b957806399b5bb64146105d9578063a217fddf146105ef578063b6d3385e1461060457600080fd5b80638ac1f86f1461051b5780638e5df9c7146105305780638ee112751461055057806391d1485414610570578063924cf6e01461059057600080fd5b80633f4ba83a116101cb5780636a1db1bf1161018f5780636a1db1bf1461046c57806375b238fc1461048c5780637df8b802146104ae5780638456cb59146104e6578063853890ae146104fb57600080fd5b80633f4ba83a146103cf57806342180fb8146103e45780634a1856de146104045780635249a705146104345780635c975abb1461045457600080fd5b8063248a9ca311610212578063248a9ca3146103295780632f2ff15d14610359578063331a891a1461037957806333de61d21461039957806336568abe146103af57600080fd5b806301ffc9a71461025a578063044218231461028f57806309fce356146102d15780630d668087146102f3578063236040711461030957600080fd5b3661025557005b600080fd5b34801561026657600080fd5b5061027a610275366004613273565b61077e565b60405190151581526020015b60405180910390f35b34801561029b57600080fd5b506102c37f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b604051908152602001610286565b3480156102dd57600080fd5b506102f16102ec3660046131b4565b6107e7565b005b3480156102ff57600080fd5b506102c3600c5481565b34801561031557600080fd5b506102f16103243660046130d6565b61080f565b34801561033557600080fd5b506102c3610344366004613235565b60009081526020819052604090206001015490565b34801561036557600080fd5b506102f161037436600461324e565b61084b565b34801561038557600080fd5b506102f1610394366004613235565b610871565b3480156103a557600080fd5b506102c360105481565b3480156103bb57600080fd5b506102f16103ca36600461324e565b6109af565b3480156103db57600080fd5b506102f1610a3a565b3480156103f057600080fd5b506102f16103ff366004613235565b610a5e565b34801561041057600080fd5b506102c361041f366004613235565b60036020526000908152604090206001015481565b34801561044057600080fd5b506102f161044f36600461317f565b610a7d565b34801561046057600080fd5b5060015460ff1661027a565b34801561047857600080fd5b506102f1610487366004613235565b610b02565b34801561049857600080fd5b506102c3600080516020613d3883398151915281565b3480156104ba57600080fd5b506006546104ce90600160a060020a031681565b604051600160a060020a039091168152602001610286565b3480156104f257600080fd5b506102f1610b21565b34801561050757600080fd5b506102f16105163660046130f3565b610b42565b34801561052757600080fd5b506102f1610b8a565b34801561053c57600080fd5b506102f161054b3660046130d6565b610ce2565b34801561055c57600080fd5b506102f161056b36600461328e565b610d23565b34801561057c57600080fd5b5061027a61058b36600461324e565b610df3565b34801561059c57600080fd5b506102c3600a5481565b6102f16105b436600461312c565b610e1c565b3480156105c557600080fd5b506102f16105d4366004613235565b6111c1565b3480156105e557600080fd5b506102c3600d5481565b3480156105fb57600080fd5b506102c3600081565b34801561061057600080fd5b506104ce61061f3660046130d6565b600560205260009081526040902054600160a060020a031681565b34801561064657600080fd5b506102c360045481565b34801561065c57600080fd5b506102c3600b5481565b34801561067257600080fd5b5061067b6111e0565b6040516102869190613857565b34801561069457600080fd5b506102f16106a336600461324e565b611242565b3480156106b457600080fd5b506102c360075481565b3480156106ca57600080fd5b506106de6106d9366004613235565b611268565b6040516102869190613991565b6102f16106f93660046130d6565b611324565b34801561070a57600080fd5b506104ce610719366004613235565b6115c2565b34801561072a57600080fd5b506009546104ce90600160a060020a031681565b34801561074a57600080fd5b506102f1610759366004613235565b6115ec565b34801561076a57600080fd5b506102f1610779366004613235565b61181f565b6000600160e060020a031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806107e157507f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a03198316145b92915050565b600080516020613d38833981519152610800813361183e565b61080a83836118a5565b505050565b600080516020613d38833981519152610828813361183e565b5060088054600160a060020a031916600160a060020a0392909216919091179055565b600082815260208190526040902060010154610867813361183e565b61080a83836119bb565b600080516020613d3883398151915261088a813361183e565b60015460ff166108e45760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064015b60405180910390fd5b60045482101561095f5760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e744964000000000000000000000000000000000000000000000000000060648201526084016108db565b600082815260036020526040902060010154156109ab5760008281526003602052604081209061098f8282612cb1565b50600060019190910155816109a381613c68565b92505061095f565b5050565b600160a060020a0381163314610a305760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108db565b6109ab8282611a3f565b600080516020613d38833981519152610a53813361183e565b610a5b611aa4565b50565b600080516020613d38833981519152610a77813361183e565b50600b55565b600080516020613d38833981519152610a96813361183e565b815160005b81811015610afc5760056000858381518110610ab957610ab9613ce2565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610af481613c68565b915050610a9b565b50505050565b600080516020613d38833981519152610b1b813361183e565b50600755565b600080516020613d38833981519152610b3a813361183e565b610a5b611b43565b600080516020613d38833981519152610b5b813361183e565b50600160a060020a0391821660009081526005602052604090208054600160a060020a03191691909216179055565b60015460ff1615610bb05760405160e560020a62461bcd0281526004016108db9061395a565b6004545b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610c4257600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610be8565b5050505081526020016001820154815250509050806020015160001480610c6c5750428160200151115b15610c775750600455565b8051610c8290611b9c565b600082815260036020526040812090610c9b8282612cb1565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610cda81613c68565b915050610bb4565b600080516020613d38833981519152610cfb813361183e565b50600160a060020a031660009081526005602052604090208054600160a060020a0319169055565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7610d4e813361183e565b60015460ff1615610d745760405160e560020a62461bcd0281526004016108db9061395a565b60208083015101516040517f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b90600090a2610db6826020015160200151611e30565b600a54600954601254610dd99285929091600160a060020a039182169116611e95565b6109ab8260200151604001518360200151602001516121d1565b600091825260208281526040808420600160a060020a0393909316845291905290205460ff1690565b60008115610eb1576000805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc54600160a060020a03868116911614610eac5760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e0060448201526064016108db565b610f1d565b50600160a060020a038085166000908152600560205260409020541680610f1d5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108db565b6007543414610f715760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d2066656500000000000000000000000000000060448201526064016108db565b600854604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610faa573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101849052600160a060020a038616906323b872dd90606401602060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a9190613218565b6110995760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108db565b60408051606081018252600160a060020a0380841682528681166020830190815282840187815260028054600181018255600091909152935160039094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81018054958516600160a060020a031996871617905591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830180549190941694169390931790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600e54600754915133927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568926111aa92909190918252602082015260400190565b60405180910390a26111ba612294565b5050505050565b600080516020613d388339815191526111da813361183e565b50600c55565b6060601180548060200260200160405190810160405280929190818152602001828054801561123857602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161121a575b5050505050905090565b60008281526020819052604090206001015461125e813361183e565b61080a8383611a3f565b6040805180820190915260608152600060208201526000828152600360209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b8282101561130b57600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016112b1565b5050505081526020016001820154815250509050919050565b600654600160a060020a0390811660009081526005602052604090205416806113925760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108db565b60075434116113e65760405160e560020a62461bcd02815260206004820152601060248201527f53656e742076616c7565203c206665650000000000000000000000000000000060448201526064016108db565b600854600754604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015611422573d6000803e3d6000fd5b506000600754346114339190613bbc565b9050600660009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b15801561148857600080fd5b505af115801561149c573d6000803e3d6000fd5b505060408051606081018252600160a060020a0380881682528881166020830190815282840188815260028054600181018255600091909152935160039094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81018054958516600160a060020a031996871617905591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830180549190941694169390931790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600e5460075491513395507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56894506115b29350909190918252602082015260400190565b60405180910390a261080a612294565b601181815481106115d257600080fd5b600091825260209091200154600160a060020a0316905081565b60015460ff16156116125760405160e560020a62461bcd0281526004016108db9061395a565b60045481146116665760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e740000000060448201526064016108db565b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b828210156116f457600084815260209081902060408051606081018252600386029092018054600160a060020a0390811684526001808301549091168486015260029091015491830191909152908352909201910161169a565b5050505081526020016001820154815250509050600081602001511161175f5760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e73666572732077697468207468697320696460448201526064016108db565b428160200151106117b55760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f742079657420706173736564000000000060448201526064016108db565b80516117c090611b9c565b6000828152600360205260408120906117d98282612cb1565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2611818826001613a88565b6004555050565b600080516020613d38833981519152611838813361183e565b50600a55565b6118488282610df3565b6109ab5761186081600160a060020a0316601461230c565b61186b83602061230c565b60405160200161187c9291906137d6565b60408051601f198184030181529082905260e560020a62461bcd0282526108db91600401613927565b805182511461191f5760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d650060648201526084016108db565b815160005b81811015610afc5782818151811061193e5761193e613ce2565b60200260200101516005600086848151811061195c5761195c613ce2565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a0316021790555080806119b390613c68565b915050611924565b6119c58282610df3565b6109ab57600082815260208181526040808320600160a060020a03851684529091529020805460ff191660011790556119fb3390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611a498282610df3565b156109ab57600082815260208181526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16611af95760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108db565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60015460ff1615611b695760405160e560020a62461bcd0281526004016108db9061395a565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611b26565b60005b81518110156109ab576000600160a060020a0316828281518110611bc557611bc5613ce2565b602002602001015160000151600160a060020a03161415611ce1576006548251600160a060020a0390911690632e1a7d4d90849084908110611c0957611c09613ce2565b6020026020010151604001516040518263ffffffff1660e060020a028152600401611c3691815260200190565b600060405180830381600087803b158015611c5057600080fd5b505af1158015611c64573d6000803e3d6000fd5b50505050818181518110611c7a57611c7a613ce2565b602002602001015160200151600160a060020a03166108fc838381518110611ca457611ca4613ce2565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015611cdb573d6000803e3d6000fd5b50611e1e565b818181518110611cf357611cf3613ce2565b602002602001015160000151600160a060020a031663a9059cbb838381518110611d1f57611d1f613ce2565b602002602001015160200151848481518110611d3d57611d3d613ce2565b6020026020010151604001516040518363ffffffff1660e060020a028152600401611d7d929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b158015611d9757600080fd5b505af1158015611dab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dcf9190613218565b611e1e5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108db565b80611e2881613c68565b915050611b9f565b600d60008154611e3f90613c68565b91829055508114610a5b5760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f7264657200000000000000000000000060448201526064016108db565b600080600080611ea98860200151876124f9565b9050808860000151896060015167ffffffffffffffff1681518110611ed057611ed0613ce2565b60200260200101516080015114611f2c5760405160e560020a62461bcd02815260206004820181905260248201527f5472616e73666572206576656e742076616c69646174696f6e206661696c656460448201526064016108db565b60005b8851518110156121c457600089600001518281518110611f5157611f51613ce2565b6020026020010151905080610100015167ffffffffffffffff166000146120dd57835b81610100015167ffffffffffffffff168110156120bd5760008b604001518281518110611fa357611fa3613ce2565b60200260200101519050611fb6816125ee565b805151156120aa5761202781600001518a601180548060200260200160405190810160405280929190818152602001828054801561201d57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611fff575b505050505061277e565b8c519095508590612039600287613bbc565b8151811061204957612049613ce2565b602002602001015160800151146120a55760405160e560020a62461bcd02815260206004820152601560248201527f57726f6e6720565320726563656970742068617368000000000000000000000060448201526064016108db565b600297505b50806120b581613c68565b915050611f74565b5060018161010001516120d09190613bd3565b67ffffffffffffffff1693505b6120e681612834565b8a51519095506120f7836001613a88565b1415801561212c5750895161210d836001613a88565b8151811061211d5761211d613ce2565b60200260200101516040015185145b15612143578561213b81613c68565b9650506121b1565b896060015167ffffffffffffffff1682141561215e576121b1565b888610156121b15760405160e560020a62461bcd02815260206004820152601160248201527f77726f6e6720706172656e74206861736800000000000000000000000000000060448201526064016108db565b50806121bc81613c68565b915050611f2f565b5050506010555050505050565b600c546121de9042613a88565b6000828152600360205260408120600101919091555b825181101561080a576000828152600360205260409020835184908390811061221f5761221f613ce2565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a039384161782559383015194810180549094169490911693909317909155604001516002909101558061228c81613c68565b9150506121f4565b6000600b54426122a49190613aa0565b9050600f548114610a5b57600e80549060006122bf83613c68565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260026040516122f391906138b7565b60405180910390a261230760026000612cb1565b600f55565b6060600061231b836002613b4b565b612326906002613a88565b67ffffffffffffffff81111561233e5761233e613cfb565b6040519080825280601f01601f191660200182016040528015612368576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061239f5761239f613ce2565b6020010190600160f860020a031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106123ea576123ea613ce2565b6020010190600160f860020a031916908160001a905350600061240e846002613b4b565b612419906001613a88565b90505b60018111156124a0577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061245a5761245a613ce2565b1a60f860020a0282828151811061247357612473613ce2565b6020010190600160f860020a031916908160001a90535060109094049361249981613c51565b905061241c565b5083156124f25760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108db565b9392505050565b600080836000015160008151811061251357612513613ce2565b602002602001015183856000015160018151811061253357612533613ce2565b602002602001015161254887602001516128b9565b87518051600290811061255d5761255d613ce2565b6020026020010151886040015160405160200161257a91906138a4565b60405160208183030381529060405289600001516003815181106125a0576125a0613ce2565b60200260200101516040516020016125be97969594939291906136f4565b6040516020818303038152906040528051906020012090506125e68460000151826004612a21565b949350505050565b6000816040015160070b12156126d8576000600182604001516000196126149190613ab4565b61261e9190613b6a565b60070b9050601160016011805490506126379190613bbc565b8154811061264757612647613ce2565b60009182526020909120015460118054600160a060020a03909216918390811061267357612673613ce2565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555060118054806126b2576126b2613cc9565b60008281526020902081016000199081018054600160a060020a03191690550190555050565b6000816040015160070b905060118082815481106126f8576126f8613ce2565b60009182526020808320909101548354600181018555938352918190209092018054600160a060020a031916600160a060020a03909216919091179055820151601180548390811061274c5761274c613ce2565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a031602179055505050565b6000808460008151811061279457612794613ce2565b602002602001015184866001815181106127b0576127b0613ce2565b6020026020010151856040516020016127c99190613857565b604051602081830303815290604052886002815181106127eb576127eb613ce2565b6020026020010151604051602001612807959493929190613675565b60405160208183030381529060405280519060200120905061282b85826003612a21565b95945050505050565b600080600061284284612ad1565b915091506000601180805490506128688760c0015163ffffffff60e060020a9091041690565b6128729190613c83565b8154811061288257612882613ce2565b9060005260206000200160009054906101000a9004600160a060020a031690506128b181848760e00151612bc9565b509392505050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b60208110156129505781818151811061290257612902613ce2565b60209101015160f860020a90819004027fff00000000000000000000000000000000000000000000000000000000000000161561293e57612950565b8061294881613c68565b9150506128e7565b600061295d826020613bbc565b67ffffffffffffffff81111561297557612975613cfb565b6040519080825280601f01601f19166020018201604052801561299f576020820181803683370190505b50905060005b8151811015612a185783836129b981613c68565b9450815181106129cb576129cb613ce2565b602001015160f860020a900460f860020a028282815181106129ef576129ef613ce2565b6020010190600160f860020a031916908160001a90535080612a1081613c68565b9150506129a5565b50949350505050565b60006060825b8551811015612ac757858181518110612a4257612a42613ce2565b60200260200101518587836001612a599190613a88565b81518110612a6957612a69613ce2565b6020026020010151604051602001612a839392919061379f565b60405160208183030381529060405291506020825111612aab57612aa682613bfc565b612ab3565b815160208301205b9450612ac0600282613a88565b9050612a27565b5092949350505050565b600080600060a060f860020a028460400151856060015186608001518760a00151604051602001612b06959493929190613503565b6040516020818303038152906040529050836020015181604051602001612b2e929190613570565b60408051601f19818403018152908290528051602091820120865160c088015160e08901519294612ba994929387937f840000000000000000000000000000000000000000000000000000000000000093927fb8410000000000000000000000000000000000000000000000000000000000009291016135b6565b604051602081830303815290604052805190602001209250925050915091565b60208101516040820151606083015160001a601b811015612be857601b015b60408051600081526020810180835287905260ff8316918101919091526060810184905260808101839052600160a060020a0387169060019060a0016020604051602081039080840390855afa158015612c46573d6000803e3d6000fd5b50505060206040510351600160a060020a031614612ca95760405160e560020a62461bcd02815260206004820152601560248201527f4661696c656420746f20766572696679207369676e000000000000000000000060448201526064016108db565b505050505050565b5080546000825560030290600052602060002090810190610a5b91905b80821115612d00578054600160a060020a03199081168255600182018054909116905560006002820155600301612cce565b5090565b600082601f830112612d1557600080fd5b81356020612d2a612d2583613a64565b613a33565b8281528181019085830183850287018401881015612d4757600080fd5b60005b85811015612d6f578135612d5d81613d14565b84529284019290840190600101612d4a565b5090979650505050505050565b600082601f830112612d8d57600080fd5b81356020612d9d612d2583613a64565b8281528181019085830183850287018401881015612dba57600080fd5b6000805b86811015612dfd57823567ffffffffffffffff811115612ddc578283fd5b612dea8b88838d0101612f3e565b8652509385019391850191600101612dbe565b509198975050505050505050565b600082601f830112612e1c57600080fd5b81356020612e2c612d2583613a64565b8281528181019085830183850287018401881015612e4957600080fd5b60005b85811015612d6f57813567ffffffffffffffff80821115612e6c57600080fd5b908901906060828c03601f1901811315612e8557600080fd5b612e8d6139c3565b8884013583811115612e9e57600080fd5b612eac8e8b83880101612d7c565b8252506040925082840135612ec081613d14565b818a01529281013592600784900b8414612ed957600080fd5b918201929092528552509284019290840190600101612e4c565b80357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612f2157600080fd5b919050565b8035600160e060020a031981168114612f2157600080fd5b600082601f830112612f4f57600080fd5b813567ffffffffffffffff811115612f6957612f69613cfb565b612f7c601f8201601f1916602001613a33565b818152846020838601011115612f9157600080fd5b816020850160208301376000918101602001919091529392505050565b60006060808385031215612fc157600080fd5b612fc96139c3565b9150823567ffffffffffffffff80821115612fe357600080fd5b612fef86838701612d7c565b84526020915081850135828501526040808601358281111561301057600080fd5b86019150601f8201871361302357600080fd5b8135613031612d2582613a64565b81815284810190848601878402860187018b101561304e57600080fd5b60009550855b848110156130aa5788828d03121561306a578687fd5b6130726139c3565b823561307d81613d14565b81528289013561308c81613d14565b818a0152828701358782015284529287019290880190600101613054565b505080848901525050505050505092915050565b803567ffffffffffffffff81168114612f2157600080fd5b6000602082840312156130e857600080fd5b81356124f281613d14565b6000806040838503121561310657600080fd5b823561311181613d14565b9150602083013561312181613d14565b809150509250929050565b6000806000806080858703121561314257600080fd5b843561314d81613d14565b9350602085013561315d81613d14565b925060408501359150606085013561317481613d29565b939692955090935050565b60006020828403121561319157600080fd5b813567ffffffffffffffff8111156131a857600080fd5b6125e684828501612d04565b600080604083850312156131c757600080fd5b823567ffffffffffffffff808211156131df57600080fd5b6131eb86838701612d04565b9350602085013591508082111561320157600080fd5b5061320e85828601612d04565b9150509250929050565b60006020828403121561322a57600080fd5b81516124f281613d29565b60006020828403121561324757600080fd5b5035919050565b6000806040838503121561326157600080fd5b82359150602083013561312181613d14565b60006020828403121561328557600080fd5b6124f282612f26565b600060208083850312156132a157600080fd5b67ffffffffffffffff80843511156132b857600080fd5b83358401608081870312156132cc57600080fd5b6132d46139ec565b82823511156132e257600080fd5b8135820187601f8201126132f557600080fd5b613302612d258235613a64565b808235825286820191508683018a8889863502860101111561332357600080fd5b60005b843581101561343d57878235111561333d57600080fd5b81358501610120818e03601f1901121561335657600080fd5b61335e613a0f565b6133698b8301612ef3565b815261337760408301612ef3565b8b82015260608201356040820152896080830135111561339657600080fd5b6133a88e8c6080850135850101612f3e565b606082015260a082013560808201528960c083013511156133c857600080fd5b6133da8e8c60c0850135850101612f3e565b60a08201526133eb60e08301612f26565b60c08201526101008201358a81111561340357600080fd5b6134118f8d83860101612f3e565b60e08301525061342461012083016130be565b6101008201528552509288019290880190600101613326565b505083525050818401358381111561345457600080fd5b61346088828501612fae565b8583015250826040830135111561347657600080fd5b6134868760408401358401612e0b565b6040820152613497606083016130be565b60608201529695505050505050565b600081518084526020808501945080840160005b838110156134f85781518051600160a060020a03908116895284820151168489015260409081015190880152606090960195908201906001016134ba565b509495945050505050565b7fff000000000000000000000000000000000000000000000000000000000000008616815284600182015260008451613543816021850160208901613c25565b80830190508460218201528351613561816041840160208801613c25565b01604101979650505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1983168152600082516135a8816003850160208701613c25565b919091016003019392505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1987168152600086516135ee816003850160208b01613c25565b7fff000000000000000000000000000000000000000000000000000000000000008716600391840191820152600160e060020a0319861660048201527fffff00000000000000000000000000000000000000000000000000000000000085166008820152835161366581600a840160208801613c25565b01600a0198975050505050505050565b60008651613687818460208b01613c25565b600160a060020a0387166c010000000000000000000000000290830190815285516136b9816014840160208a01613c25565b85519101906136cf816014840160208901613c25565b84519101906136e5816014840160208801613c25565b01601401979650505050505050565b6000885160206137078285838e01613c25565b81840191506c01000000000000000000000000600160a060020a038b160282526014895161373a81838601858e01613c25565b895193019261374e81838601858d01613c25565b885193019261376281838601858c01613c25565b875193019261377681838601858b01613c25565b865193019261378a81838601858a01613c25565b929092019091019a9950505050505050505050565b600084516137b1818460208901613c25565b820184815283516137c9816020808501908801613c25565b0160200195945050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161380e816017850160208801613c25565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161384b816028840160208801613c25565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b81811015613898578351600160a060020a031683529284019291840191600101613873565b50909695505050505050565b6020815260006124f260208301846134a6565b60006020808301818452808554808352604092508286019150866000528360002060005b8281101561391a578154600160a060020a03908116855260018084015490911687860152600283015486860152606090940193600390920191016138db565b5091979650505050505050565b6020815260008251806020840152613946816040850160208701613c25565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020815260008251604060208401526139ad60608401826134a6565b9050602084015160408401528091505092915050565b6040516060810167ffffffffffffffff811182821017156139e6576139e6613cfb565b60405290565b6040516080810167ffffffffffffffff811182821017156139e6576139e6613cfb565b604051610120810167ffffffffffffffff811182821017156139e6576139e6613cfb565b604051601f8201601f1916810167ffffffffffffffff81118282101715613a5c57613a5c613cfb565b604052919050565b600067ffffffffffffffff821115613a7e57613a7e613cfb565b5060209081020190565b60008219821115613a9b57613a9b613c97565b500190565b600082613aaf57613aaf613cb0565b500490565b60008160070b8360070b677fffffffffffffff600082136000841383830485118282161615613ae557613ae5613c97565b677fffffffffffffff196000851282811687830587121615613b0957613b09613c97565b60008712925085820587128484161615613b2557613b25613c97565b85850587128184161615613b3b57613b3b613c97565b5050509290910295945050505050565b6000816000190483118215151615613b6557613b65613c97565b500290565b60008160070b8360070b6000811281677fffffffffffffff1901831281151615613b9657613b96613c97565b81677fffffffffffffff018313811615613bb257613bb2613c97565b5090039392505050565b600082821015613bce57613bce613c97565b500390565b600067ffffffffffffffff83811690831681811015613bf457613bf4613c97565b039392505050565b80516020808301519190811015613c1f578060200360080260020a600003821691505b50919050565b60005b83811015613c40578181015183820152602001613c28565b83811115610afc5750506000910152565b600081613c6057613c60613c97565b506000190190565b6000600019821415613c7c57613c7c613c97565b5060010190565b600082613c9257613c92613cb0565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603160045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610a5b57600080fd5b8015158114610a5b57600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212208d1fedc5954325923f6dbb615a66010d9558d38d4afa61471f437dbf5ef529bd64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 399,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5488,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "queue",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Transfer)6332_storage)dyn_storage"
      },
      {
        "astId": 5493,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "lockedTransfers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LockedTransfers)6349_storage)"
      },
      {
        "astId": 5496,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "oldestLockedEventId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5500,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5502,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5504,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "fee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5506,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "8",
        "type": "t_address_payable"
      },
      {
        "astId": 5508,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "sideBridgeAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5510,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "minSafetyBlocks",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5512,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "timeframeSeconds",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5514,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "lockTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5516,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "inputEventId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5519,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "outputEventId",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5521,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "lastTimeframe",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1442,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "lastProcessedBlock",
        "offset": 0,
        "slot": "16",
        "type": "t_bytes32"
      },
      {
        "astId": 1445,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "validatorSet",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6657,
        "contract": "contracts/eth/EthBridge.sol:EthBridge",
        "label": "validatorSetAddress",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Transfer)6332_storage)dyn_storage": {
        "base": "t_struct(Transfer)6332_storage",
        "encoding": "dynamic_array",
        "label": "struct CommonStructs.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedTransfers)6349_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonStructs.LockedTransfers)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedTransfers)6349_storage"
      },
      "t_struct(LockedTransfers)6349_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.LockedTransfers",
        "members": [
          {
            "astId": 6346,
            "contract": "contracts/eth/EthBridge.sol:EthBridge",
            "label": "transfers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transfer)6332_storage)dyn_storage"
          },
          {
            "astId": 6348,
            "contract": "contracts/eth/EthBridge.sol:EthBridge",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/eth/EthBridge.sol:EthBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/eth/EthBridge.sol:EthBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transfer)6332_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.Transfer",
        "members": [
          {
            "astId": 6327,
            "contract": "contracts/eth/EthBridge.sol:EthBridge",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6329,
            "contract": "contracts/eth/EthBridge.sol:EthBridge",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6331,
            "contract": "contracts/eth/EthBridge.sol:EthBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}