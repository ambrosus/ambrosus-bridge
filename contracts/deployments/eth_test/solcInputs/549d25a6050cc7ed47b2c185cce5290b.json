{
  "language": "Solidity",
  "sources": {
    "contracts/checks/CheckAura.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"../common/CommonStructs.sol\";\r\nimport \"./CheckReceiptsProof.sol\";\r\n\r\n\r\ncontract CheckAura is CheckReceiptsProof {\r\n    bytes1 constant PARENT_HASH_PREFIX = 0xA0;\r\n    bytes1 constant STEP_PREFIX = 0x84;\r\n    bytes2 constant SIGNATURE_PREFIX = 0xB841;\r\n\r\n    bytes32 public lastProcessedBlock;\r\n    address[] public validatorSet;\r\n\r\n\r\n    struct BlockAura {\r\n        bytes3 p0Seal;\r\n        bytes3 p0Bare;\r\n\r\n        bytes32 parentHash;\r\n        bytes p2;\r\n        bytes32 receiptHash;\r\n        bytes p3;\r\n\r\n        bytes4 step;\r\n        bytes signature;  // todo maybe pass s r v values?\r\n\r\n        uint64 finalizedVs;\r\n    }\r\n\r\n\r\n    struct ValidatorSetProof {\r\n        bytes[] receiptProof;\r\n        address deltaAddress;\r\n        int64 deltaIndex; // < 0 ? remove : add\r\n    }\r\n\r\n    struct AuraProof {\r\n        BlockAura[] blocks;\r\n        CommonStructs.TransferProof transfer;\r\n        ValidatorSetProof[] vsChanges;\r\n        uint64 transferEventBlock;\r\n    }\r\n\r\n\r\n\r\n    constructor(address[] memory _initialValidators) {\r\n        require(_initialValidators.length > 0, \"Length of _initialValidators must be bigger than 0\");\r\n        validatorSet = _initialValidators;\r\n    }\r\n\r\n    function checkAura_(AuraProof memory auraProof, uint minSafetyBlocks,\r\n        address sideBridgeAddress, address validatorSetAddress) internal {\r\n\r\n        uint safetyChainLength;\r\n        bytes32 blockHash;\r\n        uint lastFinalizedVs;\r\n\r\n        bytes32 receiptHash = calcTransferReceiptsHash(auraProof.transfer, sideBridgeAddress);\r\n        require(auraProof.blocks[auraProof.transferEventBlock].receiptHash == receiptHash, \"Transfer event validation failed\");\r\n\r\n\r\n        for (uint i = 0; i < auraProof.blocks.length; i++) {\r\n            BlockAura memory block_ = auraProof.blocks[i];\r\n\r\n            if (block_.finalizedVs != 0) {// 0 means no events should be finalized; so indexes are shifted by 1\r\n                for (uint j = lastFinalizedVs; j < block_.finalizedVs; j++) {\r\n                    ValidatorSetProof memory vsChange = auraProof.vsChanges[j];\r\n\r\n                    handleVS(vsChange);\r\n                    if (vsChange.receiptProof.length != 0) {\r\n                        receiptHash = calcValidatorSetReceiptHash(vsChange.receiptProof, validatorSetAddress, validatorSet);\r\n\r\n                        // event finalize always happened on block one after the block with event\r\n                        // so event_block is finalized_block - 2\r\n                        require(auraProof.blocks[i - 2].receiptHash == receiptHash, \"Wrong VS receipt hash\");\r\n                        safetyChainLength = 2;\r\n                    }\r\n                }\r\n\r\n                lastFinalizedVs = block_.finalizedVs - 1;\r\n            }\r\n\r\n            blockHash = checkBlock(block_);\r\n\r\n\r\n            if (i + 1 != auraProof.blocks.length && blockHash == auraProof.blocks[i + 1].parentHash) {\r\n                safetyChainLength++;\r\n            } else if (i == auraProof.transferEventBlock) {\r\n                safetyChainLength == 0;\r\n            } else {\r\n                require(safetyChainLength >= minSafetyBlocks, \"wrong parent hash\");\r\n            }\r\n\r\n        }\r\n\r\n        lastProcessedBlock = blockHash;\r\n    }\r\n\r\n    function getValidatorSet() public view returns (address[] memory) {\r\n        return validatorSet;\r\n    }\r\n\r\n    function handleVS(ValidatorSetProof memory vsEvent) internal {\r\n        if (vsEvent.deltaIndex < 0) {\r\n            uint index = uint(int(vsEvent.deltaIndex * (- 1) - 1));\r\n            validatorSet[index] = validatorSet[validatorSet.length - 1];\r\n            validatorSet.pop();\r\n        }\r\n        else {\r\n            uint index = uint(int((vsEvent.deltaIndex)));\r\n            validatorSet.push(validatorSet[index]);\r\n            validatorSet[index] = vsEvent.deltaAddress;\r\n        }\r\n    }\r\n\r\n    function checkBlock(BlockAura memory block_) internal view returns (bytes32) {\r\n        (bytes32 bareHash, bytes32 sealHash) = calcBlockHash(block_);\r\n\r\n        address validator = validatorSet[bytesToUint(block_.step) % validatorSet.length];\r\n        checkSignature(validator, bareHash, block_.signature);\r\n\r\n        return sealHash;\r\n    }\r\n\r\n    function calcBlockHash(BlockAura memory block_) internal pure returns (bytes32, bytes32) {\r\n        bytes memory commonRlp = abi.encodePacked(PARENT_HASH_PREFIX, block_.parentHash, block_.p2, block_.receiptHash, block_.p3);\r\n        return (\r\n        // hash without seal (bare), for signature check\r\n        keccak256(abi.encodePacked(block_.p0Bare, commonRlp)),\r\n        // hash with seal, for prev_hash check\r\n        keccak256(abi.encodePacked(block_.p0Seal, commonRlp, STEP_PREFIX, block_.step, SIGNATURE_PREFIX, block_.signature))\r\n        );\r\n    }\r\n\r\n\r\n    function checkSignature(address signer, bytes32 messageHash, bytes memory signature) internal pure {\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            r := mload(add(signature, 32))\r\n            s := mload(add(signature, 64))\r\n            v := byte(0, mload(add(signature, 96)))\r\n            if lt(v, 27) {v := add(v, 27)}\r\n        }\r\n        require(ecrecover(messageHash, v, r, s) == signer, \"Failed to verify sign\");\r\n    }\r\n\r\n    function calcValidatorSetReceiptHash(bytes[] memory receipt_proof, address validatorSetAddress, address[] memory vSet) private pure returns (bytes32) {\r\n        bytes32 el = keccak256(abi.encodePacked(\r\n                receipt_proof[0],\r\n                validatorSetAddress,\r\n                receipt_proof[1],\r\n                abi.encode(vSet),\r\n                receipt_proof[2]\r\n            ));\r\n        return calcReceiptsHash(receipt_proof, el, 3);\r\n    }\r\n\r\n    function bytesToUint(bytes4 b) internal pure returns (uint){\r\n        return uint(uint32(b));\r\n    }\r\n}\r\n"
    },
    "contracts/common/CommonStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.6;\r\n\r\nlibrary CommonStructs {\r\n    struct Transfer {\r\n        address tokenAddress;\r\n        address toAddress;\r\n        uint amount;\r\n    }\r\n\r\n    struct TransferProof {\r\n        bytes[] receiptProof;\r\n        uint eventId;\r\n        Transfer[] transfers;\r\n    }\r\n\r\n    struct LockedTransfers {\r\n        Transfer[] transfers;\r\n        uint endTimestamp;\r\n    }\r\n\r\n    struct ConstructorArgs {\r\n        address sideBridgeAddress; address adminAddress;\r\n        address relayAddress; address wrappingTokenAddress;\r\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\r\n        uint fee; address payable feeRecipient;\r\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\r\n    }\r\n}\r\n"
    },
    "contracts/checks/CheckReceiptsProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"../common/CommonStructs.sol\";\r\n\r\n\r\ncontract CheckReceiptsProof {\r\n    // check readme for focs\r\n    function calcReceiptsHash(bytes[] memory proof, bytes32 el, uint proofStart) internal pure returns (bytes32) {\r\n        bytes memory s;\r\n\r\n        for (uint i = proofStart; i < proof.length; i += 2) {\r\n            s = abi.encodePacked(proof[i], el, proof[i + 1]);\r\n            el = (s.length > 32) ? keccak256(s) : bytes32(s);\r\n        }\r\n\r\n        return el;\r\n    }\r\n\r\n\r\n    function calcTransferReceiptsHash(CommonStructs.TransferProof memory p, address eventContractAddress) internal pure returns (bytes32) {\r\n        bytes32 el = keccak256(abi.encodePacked(\r\n                p.receiptProof[0],\r\n                eventContractAddress,\r\n                p.receiptProof[1],\r\n                toBinary(p.eventId),\r\n                p.receiptProof[2],\r\n                abi.encode(p.transfers),\r\n                p.receiptProof[3]\r\n            ));\r\n        return calcReceiptsHash(p.receiptProof, el, 4);\r\n        // start from proof[4]\r\n    }\r\n\r\n\r\n    function toBinary(uint _x) private pure returns (bytes memory) {\r\n        bytes memory b = new bytes(32);\r\n        assembly {\r\n            mstore(add(b, 32), _x)\r\n        }\r\n        uint i;\r\n        for (i = 0; i < 32; i++) {\r\n            if (b[i] != 0) {\r\n                break;\r\n            }\r\n        }\r\n        bytes memory res = new bytes(32 - i);\r\n        for (uint j = 0; j < res.length; j++) {\r\n            res[j] = b[i++];\r\n        }\r\n        return res;\r\n    }\r\n}\r\n"
    },
    "contracts/eth/EthBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"../common/CommonBridge.sol\";\r\nimport \"../common/CommonStructs.sol\";\r\nimport \"../checks/CheckAura.sol\";\r\n\r\n\r\ncontract EthBridge is CommonBridge, CheckAura {\r\n    address validatorSetAddress;\r\n\r\n    constructor(\r\n        CommonStructs.ConstructorArgs memory args,\r\n        address[] memory initialValidators,\r\n        address validatorSetAddress_,\r\n        bytes32 lastProcessedBlock_\r\n    )\r\n    CommonBridge(args)\r\n    CheckAura(initialValidators)\r\n    {\r\n        validatorSetAddress = validatorSetAddress_;\r\n        lastProcessedBlock = lastProcessedBlock_;\r\n    }\r\n\r\n    function submitTransferAura(AuraProof memory auraProof) public onlyRole(RELAY_ROLE) whenNotPaused {\r\n        emit TransferSubmit(auraProof.transfer.eventId);\r\n\r\n        checkEventId(auraProof.transfer.eventId);\r\n\r\n        checkAura_(auraProof, minSafetyBlocks, sideBridgeAddress, validatorSetAddress);\r\n\r\n        lockTransfers(auraProof.transfer.transfers, auraProof.transfer.eventId);\r\n    }\r\n}\r\n"
    },
    "contracts/common/CommonBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\r\nimport \"./CommonStructs.sol\";\r\nimport \"../tokens/IWrapper.sol\";\r\n\r\n\r\ncontract CommonBridge is AccessControl, Pausable {\r\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\r\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\r\n    bytes32 public constant RELAY_ROLE = keccak256(\"RELAY_ROLE\");\r\n\r\n\r\n    // queue to be pushed in another network\r\n    CommonStructs.Transfer[] queue;\r\n\r\n    // locked transfers from another network\r\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\r\n    uint public oldestLockedEventId = 1;  // head index of lockedTransfers 'queue' mapping\r\n\r\n\r\n    // this network to side network token addresses mapping\r\n    mapping(address => address) public tokenAddresses;\r\n    address public wrapperAddress;\r\n\r\n    uint public fee;\r\n    address payable feeRecipient;\r\n\r\n    address public sideBridgeAddress;\r\n    uint public minSafetyBlocks;\r\n    uint public timeframeSeconds;\r\n    uint public lockTime;\r\n\r\n    uint public inputEventId; // last processed event from side network\r\n    uint outputEventId = 1;  // last created event in this network. start from 1 coz 0 consider already processed\r\n\r\n    uint lastTimeframe;\r\n\r\n    event Withdraw(address indexed from, address tokenFrom, address tokentTo, uint eventId, uint feeAmount);\r\n    event Transfer(uint indexed eventId, CommonStructs.Transfer[] queue);\r\n    event TransferSubmit(uint indexed eventId);\r\n    event TransferFinish(uint indexed eventId);\r\n\r\n\r\n    constructor(CommonStructs.ConstructorArgs memory args)\r\n    {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setupRole(RELAY_ROLE, args.relayAddress);\r\n        _setupRole(ADMIN_ROLE, args.adminAddress);\r\n\r\n        // initialise tokenAddresses with start values\r\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\r\n        wrapperAddress = args.wrappingTokenAddress;\r\n\r\n        sideBridgeAddress = args.sideBridgeAddress;\r\n        fee = args.fee;\r\n        feeRecipient = args.feeRecipient;\r\n        minSafetyBlocks = args.minSafetyBlocks;\r\n        timeframeSeconds = args.timeframeSeconds;\r\n        lockTime = args.lockTime;\r\n    }\r\n\r\n\r\n    function wrapWithdraw(address toAddress) public payable {\r\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\r\n        require(tokenSideAddress != address(0), \"Unknown token address\");\r\n\r\n        require(msg.value > fee, \"Sent value < fee\");\r\n        feeRecipient.transfer(fee);\r\n\r\n        uint restOfValue = msg.value - fee;\r\n        IWrapper(wrapperAddress).deposit{value : restOfValue}();\r\n\r\n        //\r\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, restOfValue));\r\n        emit Withdraw(msg.sender, wrapperAddress, tokenSideAddress, outputEventId, fee);\r\n\r\n        withdraw_finish();\r\n    }\r\n\r\n    function withdraw(address tokenThisAddress, address toAddress, uint amount, bool unwrapSide) payable public {\r\n        address tokenSideAddress;\r\n        if (unwrapSide) {\r\n            require(tokenAddresses[address(0)] == tokenThisAddress, \"Token not point to native token\");\r\n            // tokenSideAddress will be 0x0000000000000000000000000000000000000000 - for native token\r\n        } else {\r\n            tokenSideAddress = tokenAddresses[tokenThisAddress];\r\n            require(tokenSideAddress != address(0), \"Unknown token address\");\r\n        }\r\n\r\n        require(msg.value == fee, \"Sent value != fee\");\r\n        feeRecipient.transfer(msg.value);\r\n\r\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \"Fail transfer coins\");\r\n\r\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\r\n        emit Withdraw(msg.sender, tokenThisAddress, tokenSideAddress, outputEventId, fee);\r\n\r\n        withdraw_finish();\r\n    }\r\n\r\n    function withdraw_finish() internal {\r\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\r\n        if (nowTimeframe != lastTimeframe) {\r\n            emit Transfer(outputEventId++, queue);\r\n            delete queue;\r\n\r\n            lastTimeframe = nowTimeframe;\r\n        }\r\n    }\r\n\r\n\r\n    // locked transfers from another network\r\n    function getLockedTransfers(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\r\n        return lockedTransfers[eventId];\r\n    }\r\n\r\n\r\n    function proceedTransfers(CommonStructs.Transfer[] memory transfers) internal {\r\n        for (uint i = 0; i < transfers.length; i++) {\r\n\r\n            if (transfers[i].tokenAddress == address(0)) {// native token\r\n                IWrapper(wrapperAddress).withdraw(transfers[i].amount);\r\n                payable(transfers[i].toAddress).transfer(transfers[i].amount);\r\n            } else {// ERC20 token\r\n                require(\r\n                    IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount),\r\n                    \"Fail transfer coins\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // submitted transfers save here for `lockTime` period\r\n    function lockTransfers(CommonStructs.Transfer[] memory events, uint eventId) internal {\r\n        lockedTransfers[eventId].endTimestamp = block.timestamp + lockTime;\r\n        for (uint i = 0; i < events.length; i++)\r\n            lockedTransfers[eventId].transfers.push(events[i]);\r\n    }\r\n\r\n    // after `lockTime` period, transfers can  be unlocked\r\n    function unlockTransfers(uint eventId) public whenNotPaused {\r\n        require(eventId == oldestLockedEventId, \"can unlock only oldest event\");\r\n\r\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\r\n        require(transfersLocked.endTimestamp > 0, \"no locked transfers with this id\");\r\n        require(transfersLocked.endTimestamp < block.timestamp, \"lockTime has not yet passed\");\r\n\r\n        proceedTransfers(transfersLocked.transfers);\r\n\r\n        delete lockedTransfers[eventId];\r\n        emit TransferFinish(eventId);\r\n\r\n        oldestLockedEventId = eventId + 1;\r\n    }\r\n\r\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\r\n    function unlockTransfersBatch() public whenNotPaused {\r\n        uint eventId = oldestLockedEventId;\r\n        for (;; eventId++) {\r\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\r\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\r\n\r\n            proceedTransfers(transfersLocked.transfers);\r\n\r\n            delete lockedTransfers[eventId];\r\n            emit TransferFinish(eventId);\r\n        }\r\n        oldestLockedEventId = eventId;\r\n    }\r\n\r\n    // delete transfers with passed eventId and all after it\r\n    function removeLockedTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\r\n        require(eventId >= oldestLockedEventId, \"eventId must be >= oldestLockedEventId\");\r\n        for (; lockedTransfers[eventId].endTimestamp != 0; eventId++)\r\n            delete lockedTransfers[eventId];\r\n    }\r\n\r\n\r\n    // admin setters\r\n\r\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\r\n        minSafetyBlocks = minSafetyBlocks_;\r\n    }\r\n\r\n    function changeFee(uint fee_) public onlyRole(ADMIN_ROLE) {\r\n        fee = fee_;\r\n    }\r\n\r\n    function changeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\r\n        feeRecipient = feeRecipient_;\r\n    }\r\n\r\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\r\n        timeframeSeconds = timeframeSeconds_;\r\n    }\r\n\r\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\r\n        lockTime = lockTime_;\r\n    }\r\n\r\n\r\n    // token addressed mapping\r\n\r\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\r\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\r\n    }\r\n\r\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\r\n        delete tokenAddresses[tokenThisAddress];\r\n    }\r\n\r\n    function tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\r\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\r\n    }\r\n\r\n    function _tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) private {\r\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \"sizes of tokenThisAddresses and tokenSideAddresses must be same\");\r\n        uint arrayLength = tokenThisAddresses.length;\r\n        for (uint i = 0; i < arrayLength; i++)\r\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\r\n    }\r\n\r\n    function tokensRemoveBatch(address[] memory tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\r\n        uint arrayLength = tokenThisAddresses.length;\r\n        for (uint i = 0; i < arrayLength; i++)\r\n            delete tokenAddresses[tokenThisAddresses[i]];\r\n    }\r\n\r\n    // pause\r\n\r\n    function pause() public onlyRole(ADMIN_ROLE) {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() public onlyRole(ADMIN_ROLE) {\r\n        _unpause();\r\n    }\r\n\r\n    // internal\r\n\r\n    function checkEventId(uint eventId) internal {\r\n        require(eventId == ++inputEventId, \"EventId out of order\");\r\n    }\r\n\r\n    receive() external payable {}  // need to receive native token from wrapper contract\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/tokens/IWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\ninterface IWrapper {\r\n    event Deposit(address indexed dst, uint amount);\r\n    event Withdrawal(address indexed src, uint amount);\r\n\r\n    function deposit() external payable;\r\n\r\n    function withdraw(uint amount) external payable;\r\n}\r\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/contracts_for_tests/EthBridgeTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"../eth/EthBridge.sol\";\r\nimport \"../common/CommonStructs.sol\";\r\n\r\ncontract EthBridgeTest is EthBridge {\r\n    constructor(\r\n        CommonStructs.ConstructorArgs memory args,\r\n        address[] memory initialValidators,\r\n        address validatorSetAddress_,\r\n        bytes32 lastProcessedBlock\r\n    )\r\n    EthBridge(args, initialValidators, validatorSetAddress_, lastProcessedBlock) {}\r\n\r\n    function checkAuraTest(AuraProof memory auraProof, uint minSafetyBlocks, address sideBridgeAddress, address validatorSetAddress) public {\r\n        checkAura_(auraProof, minSafetyBlocks, sideBridgeAddress, validatorSetAddress);\r\n    }\r\n\r\n    function checkSignatureTest(address signer, bytes32 message, bytes memory signature) public pure {\r\n        checkSignature(signer, message, signature);\r\n    }\r\n\r\n    function blockHashTest(BlockAura memory block_) public pure returns (bytes32, bytes32) {\r\n        return calcBlockHash(block_);\r\n    }\r\n\r\n    function blockHashTestPaid(BlockAura memory block_) public returns (bytes32, bytes32) {\r\n        return calcBlockHash(block_);\r\n    }\r\n\r\n    function bytesToUintTest(bytes4 b) public pure returns (uint) {\r\n        return bytesToUint(b);\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/eth/AmbBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"../common/CommonBridge.sol\";\r\nimport \"../common/CommonStructs.sol\";\r\nimport \"../checks/CheckPoW.sol\";\r\n\r\n\r\ncontract AmbBridge is CommonBridge, CheckPoW {\r\n    constructor(CommonStructs.ConstructorArgs memory args) CommonBridge(args) {}\r\n\r\n    function submitTransferPoW(PoWProof memory powProof) public onlyRole(RELAY_ROLE) whenNotPaused {\r\n        emit TransferSubmit(powProof.transfer.eventId);\r\n\r\n        checkEventId(powProof.transfer.eventId);\r\n\r\n        checkPoW_(powProof, sideBridgeAddress);\r\n\r\n        lockTransfers(powProof.transfer.transfers, powProof.transfer.eventId);\r\n    }\r\n\r\n    function setSideBridge(address _sideBridgeAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        require(sideBridgeAddress == address(0), \"sideBridgeAddress already set\");\r\n        sideBridgeAddress = _sideBridgeAddress;\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/checks/CheckPoW.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"../common/CommonStructs.sol\";\r\nimport \"./CheckReceiptsProof.sol\";\r\nimport \"./CheckPoW_Ethash.sol\";\r\n\r\ncontract CheckPoW is CheckReceiptsProof, Ethash  {\r\n    struct BlockPoW {\r\n        bytes3 p0WithNonce;\r\n        bytes3 p0WithoutNonce;\r\n\r\n        bytes p1;\r\n        bytes32 parentOrReceiptHash;\r\n        bytes p2;\r\n        bytes difficulty;\r\n        bytes p3;\r\n        bytes number;\r\n        bytes p4;  // end when extra end\r\n        bytes p5;  // after extra\r\n        bytes nonce;\r\n        bytes p6;\r\n\r\n        uint[] dataSetLookup;\r\n        uint[] witnessForLookup;\r\n    }\r\n\r\n    struct PoWProof {\r\n        BlockPoW[] blocks;\r\n        CommonStructs.TransferProof transfer;\r\n    }\r\n\r\n    function checkPoW_(PoWProof memory powProof, address sideBridgeAddress) internal view\r\n    {\r\n        bytes32 hash = calcTransferReceiptsHash(powProof.transfer, sideBridgeAddress);\r\n        for (uint i = 0; i < powProof.blocks.length; i++) {\r\n            require(powProof.blocks[i].parentOrReceiptHash == hash, \"parentHash or receiptHash wrong\");\r\n            hash = blockHash(powProof.blocks[i]);\r\n\r\n            verifyEthash(powProof.blocks[i]);\r\n        }\r\n    }\r\n\r\n\r\n    function verifyEthash(BlockPoW memory block_) internal view {\r\n        verifyPoW(\r\n            bytesToUint(block_.number),\r\n            blockHashWithoutNonce(block_),\r\n            bytesToUint(block_.nonce),\r\n            bytesToUint(block_.difficulty),\r\n            block_.dataSetLookup,\r\n            block_.witnessForLookup\r\n        );\r\n    }\r\n\r\n    function blockHash(BlockPoW memory block_) internal pure returns (bytes32) {\r\n        // Note: too much arguments in abi.encodePacked() function cause CompilerError: Stack too deep...\r\n        return keccak256(abi.encodePacked(\r\n                abi.encodePacked(\r\n                    block_.p0WithNonce,\r\n                    block_.p1,\r\n                    block_.parentOrReceiptHash,\r\n                    block_.p2,\r\n                    block_.difficulty,\r\n                    block_.p3\r\n                ),\r\n                abi.encodePacked(\r\n                    block_.number,\r\n                    block_.p4,\r\n                    block_.p5,\r\n                    block_.nonce,\r\n                    block_.p6\r\n                )\r\n            ));\r\n    }\r\n\r\n    function blockHashWithoutNonce(BlockPoW memory block_) internal pure returns (bytes32) {\r\n        bytes memory rlpHeaderHashWithoutNonce = abi.encodePacked(\r\n            block_.p0WithoutNonce,\r\n            block_.p1,\r\n            block_.parentOrReceiptHash,\r\n            block_.p2,\r\n            block_.difficulty,\r\n            block_.p3,\r\n            block_.number,\r\n            block_.p4,\r\n            block_.p6\r\n        );\r\n\r\n        return keccak256(rlpHeaderHashWithoutNonce);\r\n    }\r\n\r\n\r\n    function bytesToUint(bytes memory b) private pure returns (uint){\r\n        return uint(bytes32(b)) >> (256 - b.length * 8);\r\n    }\r\n}\r\n"
    },
    "contracts/checks/CheckPoW_Ethash.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @dev These contracts are used to verify Proof of Work within a smart contract.\r\n///      The algorithms have been extracted from the implementation of smart pool (https://github.com/smartpool)\r\ncontract SHA3_512 {\r\n    constructor() {}\r\n\r\n    function keccak_f(uint[25] memory A) pure private returns (uint[25] memory) {\r\n        uint[25] memory B;\r\n        uint[5]  memory C;\r\n        uint[5]  memory D;\r\n\r\n        uint[24] memory RC = [\r\n        uint(0x0000000000000001),\r\n        0x0000000000008082,\r\n        0x800000000000808A,\r\n        0x8000000080008000,\r\n        0x000000000000808B,\r\n        0x0000000080000001,\r\n        0x8000000080008081,\r\n        0x8000000000008009,\r\n        0x000000000000008A,\r\n        0x0000000000000088,\r\n        0x0000000080008009,\r\n        0x000000008000000A,\r\n        0x000000008000808B,\r\n        0x800000000000008B,\r\n        0x8000000000008089,\r\n        0x8000000000008003,\r\n        0x8000000000008002,\r\n        0x8000000000000080,\r\n        0x000000000000800A,\r\n        0x800000008000000A,\r\n        0x8000000080008081,\r\n        0x8000000000008080,\r\n        0x0000000080000001,\r\n        0x8000000080008008];\r\n\r\n        for (uint i = 0; i < 24; i++) {\r\n\r\n            C[0] = A[0] ^ A[1] ^ A[2] ^ A[3] ^ A[4];\r\n            C[1] = A[5] ^ A[6] ^ A[7] ^ A[8] ^ A[9];\r\n            C[2] = A[10] ^ A[11] ^ A[12] ^ A[13] ^ A[14];\r\n            C[3] = A[15] ^ A[16] ^ A[17] ^ A[18] ^ A[19];\r\n            C[4] = A[20] ^ A[21] ^ A[22] ^ A[23] ^ A[24];\r\n\r\n            D[0] = C[4] ^ ((C[1] * 2) & 0xffffffffffffffff | (C[1] / (2 ** 63)));\r\n            D[1] = C[0] ^ ((C[2] * 2) & 0xffffffffffffffff | (C[2] / (2 ** 63)));\r\n            D[2] = C[1] ^ ((C[3] * 2) & 0xffffffffffffffff | (C[3] / (2 ** 63)));\r\n            D[3] = C[2] ^ ((C[4] * 2) & 0xffffffffffffffff | (C[4] / (2 ** 63)));\r\n            D[4] = C[3] ^ ((C[0] * 2) & 0xffffffffffffffff | (C[0] / (2 ** 63)));\r\n\r\n            A[0] = A[0] ^ D[0];\r\n            A[1] = A[1] ^ D[0];\r\n            A[2] = A[2] ^ D[0];\r\n            A[3] = A[3] ^ D[0];\r\n            A[4] = A[4] ^ D[0];\r\n            A[5] = A[5] ^ D[1];\r\n            A[6] = A[6] ^ D[1];\r\n            A[7] = A[7] ^ D[1];\r\n            A[8] = A[8] ^ D[1];\r\n            A[9] = A[9] ^ D[1];\r\n            A[10] = A[10] ^ D[2];\r\n            A[11] = A[11] ^ D[2];\r\n            A[12] = A[12] ^ D[2];\r\n            A[13] = A[13] ^ D[2];\r\n            A[14] = A[14] ^ D[2];\r\n            A[15] = A[15] ^ D[3];\r\n            A[16] = A[16] ^ D[3];\r\n            A[17] = A[17] ^ D[3];\r\n            A[18] = A[18] ^ D[3];\r\n            A[19] = A[19] ^ D[3];\r\n            A[20] = A[20] ^ D[4];\r\n            A[21] = A[21] ^ D[4];\r\n            A[22] = A[22] ^ D[4];\r\n            A[23] = A[23] ^ D[4];\r\n            A[24] = A[24] ^ D[4];\r\n\r\n            /*Rho and pi steps*/\r\n            B[0] = A[0];\r\n            B[8] = ((A[1] * (2 ** 36)) & 0xffffffffffffffff | (A[1] / (2 ** 28)));\r\n            B[11] = ((A[2] * (2 ** 3)) & 0xffffffffffffffff | (A[2] / (2 ** 61)));\r\n            B[19] = ((A[3] * (2 ** 41)) & 0xffffffffffffffff | (A[3] / (2 ** 23)));\r\n            B[22] = ((A[4] * (2 ** 18)) & 0xffffffffffffffff | (A[4] / (2 ** 46)));\r\n            B[2] = ((A[5] * (2 ** 1)) & 0xffffffffffffffff | (A[5] / (2 ** 63)));\r\n            B[5] = ((A[6] * (2 ** 44)) & 0xffffffffffffffff | (A[6] / (2 ** 20)));\r\n            B[13] = ((A[7] * (2 ** 10)) & 0xffffffffffffffff | (A[7] / (2 ** 54)));\r\n            B[16] = ((A[8] * (2 ** 45)) & 0xffffffffffffffff | (A[8] / (2 ** 19)));\r\n            B[24] = ((A[9] * (2 ** 2)) & 0xffffffffffffffff | (A[9] / (2 ** 62)));\r\n            B[4] = ((A[10] * (2 ** 62)) & 0xffffffffffffffff | (A[10] / (2 ** 2)));\r\n            B[7] = ((A[11] * (2 ** 6)) & 0xffffffffffffffff | (A[11] / (2 ** 58)));\r\n            B[10] = ((A[12] * (2 ** 43)) & 0xffffffffffffffff | (A[12] / (2 ** 21)));\r\n            B[18] = ((A[13] * (2 ** 15)) & 0xffffffffffffffff | (A[13] / (2 ** 49)));\r\n            B[21] = ((A[14] * (2 ** 61)) & 0xffffffffffffffff | (A[14] / (2 ** 3)));\r\n            B[1] = ((A[15] * (2 ** 28)) & 0xffffffffffffffff | (A[15] / (2 ** 36)));\r\n            B[9] = ((A[16] * (2 ** 55)) & 0xffffffffffffffff | (A[16] / (2 ** 9)));\r\n            B[12] = ((A[17] * (2 ** 25)) & 0xffffffffffffffff | (A[17] / (2 ** 39)));\r\n            B[15] = ((A[18] * (2 ** 21)) & 0xffffffffffffffff | (A[18] / (2 ** 43)));\r\n            B[23] = ((A[19] * (2 ** 56)) & 0xffffffffffffffff | (A[19] / (2 ** 8)));\r\n            B[3] = ((A[20] * (2 ** 27)) & 0xffffffffffffffff | (A[20] / (2 ** 37)));\r\n            B[6] = ((A[21] * (2 ** 20)) & 0xffffffffffffffff | (A[21] / (2 ** 44)));\r\n            B[14] = ((A[22] * (2 ** 39)) & 0xffffffffffffffff | (A[22] / (2 ** 25)));\r\n            B[17] = ((A[23] * (2 ** 8)) & 0xffffffffffffffff | (A[23] / (2 ** 56)));\r\n            B[20] = ((A[24] * (2 ** 14)) & 0xffffffffffffffff | (A[24] / (2 ** 50)));\r\n\r\n            /*Xi state*/\r\n            A[0] = B[0] ^ ((~B[5]) & B[10]);\r\n            A[1] = B[1] ^ ((~B[6]) & B[11]);\r\n            A[2] = B[2] ^ ((~B[7]) & B[12]);\r\n            A[3] = B[3] ^ ((~B[8]) & B[13]);\r\n            A[4] = B[4] ^ ((~B[9]) & B[14]);\r\n            A[5] = B[5] ^ ((~B[10]) & B[15]);\r\n            A[6] = B[6] ^ ((~B[11]) & B[16]);\r\n            A[7] = B[7] ^ ((~B[12]) & B[17]);\r\n            A[8] = B[8] ^ ((~B[13]) & B[18]);\r\n            A[9] = B[9] ^ ((~B[14]) & B[19]);\r\n            A[10] = B[10] ^ ((~B[15]) & B[20]);\r\n            A[11] = B[11] ^ ((~B[16]) & B[21]);\r\n            A[12] = B[12] ^ ((~B[17]) & B[22]);\r\n            A[13] = B[13] ^ ((~B[18]) & B[23]);\r\n            A[14] = B[14] ^ ((~B[19]) & B[24]);\r\n            A[15] = B[15] ^ ((~B[20]) & B[0]);\r\n            A[16] = B[16] ^ ((~B[21]) & B[1]);\r\n            A[17] = B[17] ^ ((~B[22]) & B[2]);\r\n            A[18] = B[18] ^ ((~B[23]) & B[3]);\r\n            A[19] = B[19] ^ ((~B[24]) & B[4]);\r\n            A[20] = B[20] ^ ((~B[0]) & B[5]);\r\n            A[21] = B[21] ^ ((~B[1]) & B[6]);\r\n            A[22] = B[22] ^ ((~B[2]) & B[7]);\r\n            A[23] = B[23] ^ ((~B[3]) & B[8]);\r\n            A[24] = B[24] ^ ((~B[4]) & B[9]);\r\n\r\n            /*Last step*/\r\n            A[0] = A[0] ^ RC[i];\r\n        }\r\n\r\n        return A;\r\n    }\r\n\r\n\r\n    function sponge(uint[9] memory M) pure internal returns (uint[16] memory) {\r\n        require((M.length * 8) == 72, \"sponge error\");\r\n\r\n        M[5] = 0x01;\r\n        M[8] = 0x8000000000000000;\r\n\r\n        uint r = 72;\r\n        uint w = 8;\r\n        uint size = M.length * 8;\r\n\r\n        uint[25] memory S;\r\n        uint i;\r\n        uint y;\r\n        uint x;\r\n        /*Absorbing Phase*/\r\n        for (i = 0; i < size / r; i++) {\r\n            for (y = 0; y < 5; y++) {\r\n                for (x = 0; x < 5; x++) {\r\n                    if ((x + 5 * y) < (r / w)) {\r\n                        S[5 * x + y] = S[5 * x + y] ^ M[i * 9 + x + 5 * y];\r\n                    }\r\n                }\r\n            }\r\n            S = keccak_f(S);\r\n        }\r\n\r\n        /*Squeezing phase*/\r\n        uint[16] memory result;\r\n        uint b = 0;\r\n        while (b < 16) {\r\n            for (y = 0; y < 5; y++) {\r\n                for (x = 0; x < 5; x++) {\r\n                    if ((x + 5 * y) < (r / w) && (b < 16)) {\r\n                        result[b] = S[5 * x + y] & 0xFFFFFFFF;\r\n                        result[b + 1] = S[5 * x + y] / 0x100000000;\r\n                        b += 2;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n////////////////////////////////////////////////////////////////////////////////\r\n\r\ncontract Ethash is SHA3_512 {\r\n\r\n    uint constant EPOCH_LENGTH = 30000;   // blocks per epoch\r\n\r\n    constructor() {\r\n    }\r\n\r\n    struct EthashCacheOptData {\r\n        uint[512] merkleNodes;\r\n        uint fullSizeIn128Resultion;\r\n        uint branchDepth;\r\n    }\r\n\r\n    mapping(uint => EthashCacheOptData) epochData;\r\n\r\n\r\n    function verifyPoW(uint blockNumber, bytes32 rlpHeaderHashWithoutNonce, uint nonce, uint difficulty,\r\n        uint[] memory dataSetLookup, uint[] memory witnessForLookup) internal view {\r\n\r\n        uint epoch = blockNumber / EPOCH_LENGTH;\r\n        uint ethash = hashimoto(rlpHeaderHashWithoutNonce, nonce, dataSetLookup, witnessForLookup, epoch);\r\n\r\n        require(ethash <= (2 ** 256 - 1) / difficulty, \"Ethash difficulty too low\");\r\n    }\r\n\r\n    function isEpochDataSet(uint epochIndex) public view returns (bool) {\r\n        return epochData[epochIndex].fullSizeIn128Resultion != 0;\r\n    }\r\n\r\n    function setEpochData(\r\n        uint epochNum,\r\n        uint fullSizeIn128Resultion,\r\n        uint branchDepth,\r\n        uint[] memory merkleNodes\r\n    ) public {\r\n\r\n        // we store only previous and current epochs\r\n        // so, delete second from the end epoch\r\n        if (epochNum >= 2)  // underflow check\r\n            delete epochData[epochNum - 2];\r\n\r\n\r\n        uint l = merkleNodes.length;\r\n        uint[512] storage nodes = epochData[epochNum].merkleNodes;\r\n\r\n        for (uint i = 0; i < l; i++) {\r\n            nodes[i] = merkleNodes[i];\r\n        }\r\n\r\n        epochData[epochNum].fullSizeIn128Resultion = fullSizeIn128Resultion;\r\n        epochData[epochNum].branchDepth = branchDepth;\r\n    }\r\n\r\n\r\n    function hashimoto(bytes32 header,\r\n        uint nonceLe,\r\n        uint[] memory dataSetLookup,\r\n        uint[] memory witnessForLookup,\r\n        uint epochIndex) private view returns (uint) {\r\n\r\n        uint[16] memory s = computeS(uint(header), nonceLe);\r\n        uint[32] memory mix;\r\n        uint[8]  memory cmix;\r\n\r\n\r\n        uint depth = epochData[epochIndex].branchDepth;\r\n        uint fullSize = epochData[epochIndex].fullSizeIn128Resultion;\r\n\r\n        uint i;\r\n        uint j;\r\n\r\n        require(fullSize != 0, \"EpochData not set\");\r\n\r\n\r\n        for (i = 0; i < 16; i++) {\r\n            assembly {\r\n                let offset := mul(i, 0x20)\r\n\r\n            //mix[i] = s[i];\r\n                mstore(add(mix, offset), mload(add(s, offset)))\r\n\r\n            // mix[i+16] = s[i];\r\n                mstore(add(mix, add(0x200, offset)), mload(add(s, offset)))\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < 64; i++) {\r\n            uint p = fnv(i ^ s[0], mix[i % 32]) % fullSize;\r\n\r\n            // console.log(computeCacheRoot( p, i, dataSetLookup,  witnessForLookup, depthAndFullSize[0]));\r\n            // console.log(getMerkleLeave( epochIndex, p ));\r\n\r\n            if (computeCacheRoot(p, i, dataSetLookup, witnessForLookup, depth) != getMerkleLeave(epochIndex, p)) {\r\n                // PoW failed\r\n                revert(\"PoW failed\");\r\n            }\r\n\r\n            for (j = 0; j < 8; j++) {\r\n\r\n                assembly{\r\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & varFFFFFFFF );\r\n                    let dataOffset := add(mul(0x80, i), add(dataSetLookup, 0x20))\r\n                    let dataValue := and(mload(dataOffset), 0xFFFFFFFF)\r\n\r\n                    let mixOffset := add(mix, mul(0x20, j))\r\n                    let mixValue := mload(mixOffset)\r\n\r\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\r\n                    let fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\r\n                    mstore(mixOffset, fnvValue)\r\n\r\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\r\n                    dataOffset := add(dataOffset, 0x20)\r\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\r\n\r\n                    mixOffset := add(mixOffset, 0x100)\r\n                    mixValue := mload(mixOffset)\r\n\r\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\r\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\r\n                    mstore(mixOffset, fnvValue)\r\n\r\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\r\n                    dataOffset := add(dataOffset, 0x20)\r\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\r\n\r\n                    mixOffset := add(mixOffset, 0x100)\r\n                    mixValue := mload(mixOffset)\r\n\r\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\r\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\r\n                    mstore(mixOffset, fnvValue)\r\n\r\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\r\n                    dataOffset := add(dataOffset, 0x20)\r\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\r\n\r\n                    mixOffset := add(mixOffset, 0x100)\r\n                    mixValue := mload(mixOffset)\r\n\r\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\r\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\r\n                    mstore(mixOffset, fnvValue)\r\n\r\n                }\r\n\r\n\r\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & 0xFFFFFFFF );\r\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\r\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\r\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\r\n\r\n\r\n                //dataSetLookup[4*i    ] = dataSetLookup[4*i    ]/(2**32);\r\n                //dataSetLookup[4*i + 1] = dataSetLookup[4*i + 1]/(2**32);\r\n                //dataSetLookup[4*i + 2] = dataSetLookup[4*i + 2]/(2**32);\r\n                //dataSetLookup[4*i + 3] = dataSetLookup[4*i + 3]/(2**32);\r\n\r\n                assembly{\r\n                    let offset := add(add(dataSetLookup, 0x20), mul(i, 0x80))\r\n                    let value := div(mload(offset), 0x100000000)\r\n                    mstore(offset, value)\r\n\r\n                    offset := add(offset, 0x20)\r\n                    value := div(mload(offset), 0x100000000)\r\n                    mstore(offset, value)\r\n\r\n                    offset := add(offset, 0x20)\r\n                    value := div(mload(offset), 0x100000000)\r\n                    mstore(offset, value)\r\n\r\n                    offset := add(offset, 0x20)\r\n                    value := div(mload(offset), 0x100000000)\r\n                    mstore(offset, value)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        for (i = 0; i < 32; i += 4) {\r\n            cmix[i / 4] = (fnv(fnv(fnv(mix[i], mix[i + 1]), mix[i + 2]), mix[i + 3]));\r\n        }\r\n\r\n        return computeSha3(s, cmix);\r\n\r\n    }\r\n\r\n\r\n    function fnv(uint v1, uint v2) pure internal returns (uint) {\r\n        return ((v1 * 0x01000193) ^ v2) & 0xFFFFFFFF;\r\n    }\r\n\r\n    function computeCacheRoot(uint index,\r\n        uint indexInElementsArray,\r\n        uint[] memory elements,\r\n        uint[] memory witness,\r\n        uint branchSize) pure private returns (uint) {\r\n\r\n        uint leaf = computeLeaf(elements, indexInElementsArray) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n\r\n        uint left;\r\n        uint right;\r\n        uint node;\r\n        bool oddBranchSize = (branchSize % 2) > 0;\r\n\r\n        assembly {\r\n            branchSize := div(branchSize, 2)\r\n        //branchSize /= 2;\r\n        }\r\n        uint witnessIndex = indexInElementsArray * branchSize;\r\n        if (oddBranchSize) witnessIndex += indexInElementsArray;\r\n\r\n        uint depth;\r\n        for (depth = 0; depth < branchSize; depth++) {\r\n            assembly {\r\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\r\n            }\r\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            if (index & 0x1 == 0) {\r\n                left = leaf;\r\n                assembly{\r\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                }\r\n\r\n            }\r\n            else {\r\n                assembly{\r\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                }\r\n                right = leaf;\r\n            }\r\n\r\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            assembly {\r\n                index := div(index, 2)\r\n            }\r\n\r\n            //node  = witness[witnessIndex + depth] / (2**128);\r\n            if (index & 0x1 == 0) {\r\n                left = leaf;\r\n                assembly{\r\n                    right := div(node, 0x100000000000000000000000000000000)\r\n                }\r\n            }\r\n            else {\r\n                assembly {\r\n                    left := div(node, 0x100000000000000000000000000000000)\r\n                }\r\n                right = leaf;\r\n            }\r\n\r\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            assembly {\r\n                index := div(index, 2)\r\n            }\r\n        }\r\n\r\n        if (oddBranchSize) {\r\n            assembly {\r\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\r\n            }\r\n\r\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n            if (index & 0x1 == 0) {\r\n                left = leaf;\r\n                assembly{\r\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                }\r\n            }\r\n            else {\r\n                assembly{\r\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\r\n                }\r\n\r\n                right = leaf;\r\n            }\r\n\r\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        }\r\n\r\n\r\n        return leaf;\r\n    }\r\n\r\n\r\n    function computeSha3(uint[16] memory s, uint[8] memory cmix) pure internal returns (uint) {\r\n        uint s0 = s[0] + s[1] * (2 ** 32) + s[2] * (2 ** 64) + s[3] * (2 ** 96) +\r\n        (s[4] + s[5] * (2 ** 32) + s[6] * (2 ** 64) + s[7] * (2 ** 96)) * (2 ** 128);\r\n\r\n        uint s1 = s[8] + s[9] * (2 ** 32) + s[10] * (2 ** 64) + s[11] * (2 ** 96) +\r\n        (s[12] + s[13] * (2 ** 32) + s[14] * (2 ** 64) + s[15] * (2 ** 96)) * (2 ** 128);\r\n\r\n        uint c = cmix[0] + cmix[1] * (2 ** 32) + cmix[2] * (2 ** 64) + cmix[3] * (2 ** 96) +\r\n        (cmix[4] + cmix[5] * (2 ** 32) + cmix[6] * (2 ** 64) + cmix[7] * (2 ** 96)) * (2 ** 128);\r\n\r\n\r\n        /* god knows why need to convert to big endian */\r\n        return uint(keccak256(abi.encodePacked(reverseBytes(s0), reverseBytes(s1), reverseBytes(c))));\r\n    }\r\n\r\n\r\n    function computeLeaf(uint[] memory dataSetLookup, uint index) pure internal returns (uint) {\r\n        return uint(keccak256(abi.encodePacked(\r\n                dataSetLookup[4 * index],\r\n                dataSetLookup[4 * index + 1],\r\n                dataSetLookup[4 * index + 2],\r\n                dataSetLookup[4 * index + 3]\r\n            )));\r\n\r\n    }\r\n\r\n    function computeS(uint header, uint nonceLe) pure internal returns (uint[16] memory) {\r\n        uint[9] memory M;\r\n\r\n        header = reverseBytes(header);\r\n\r\n        M[0] = uint(header) & 0xFFFFFFFFFFFFFFFF;\r\n        header = header / 2 ** 64;\r\n        M[1] = uint(header) & 0xFFFFFFFFFFFFFFFF;\r\n        header = header / 2 ** 64;\r\n        M[2] = uint(header) & 0xFFFFFFFFFFFFFFFF;\r\n        header = header / 2 ** 64;\r\n        M[3] = uint(header) & 0xFFFFFFFFFFFFFFFF;\r\n\r\n        // make little endian nonce\r\n        M[4] = nonceLe;\r\n        return sponge(M);\r\n    }\r\n\r\n    function reverseBytes(uint input) pure internal returns (uint) {\r\n        uint result;\r\n        for (uint i = 0; i < 32; i++) {\r\n            result = (result << 8) + (input & 0xff);\r\n            input = input >> 8;\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    function getMerkleLeave(uint epochIndex, uint p) view internal returns (uint) {\r\n        uint rootIndex = uint(p >> epochData[epochIndex].branchDepth);\r\n        uint expectedRoot = epochData[epochIndex].merkleNodes[(rootIndex >> 1)];\r\n\r\n        if ((rootIndex % 2) == 0)\r\n            return expectedRoot & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\r\n        return expectedRoot >> 128;\r\n    }\r\n\r\n}\r\n"
    },
    "contracts/tokens/sAMB.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./IWrapper.sol\";\r\n\r\ncontract sAMB is IWrapper, ERC20 {\r\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\r\n\r\n    function deposit() public override payable {\r\n        _mint(msg.sender, msg.value);\r\n\r\n        emit Deposit(msg.sender, msg.value);\r\n    }\r\n\r\n    function withdraw(uint amount) public override payable {\r\n        _burn(msg.sender, amount);\r\n        payable(msg.sender).transfer(amount);\r\n\r\n        emit Withdrawal(msg.sender, msg.value);\r\n    }\r\n\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/tokens/BridgeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\r\n\r\ncontract BridgeERC20 is ERC20, AccessControl {\r\n    bytes32 public constant BRIDGE_ROLE = keccak256(\"BRIDGE_ROLE\");\r\n    uint8 _decimals;\r\n\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, address[] memory bridgeAddresses)\r\n    ERC20(name_, symbol_) {\r\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\r\n        _setBridgeAddressesRole(bridgeAddresses);\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function setBridgeAddressesRole(address[] memory bridgeAddresses) public onlyRole(DEFAULT_ADMIN_ROLE) {\r\n        _setBridgeAddressesRole(bridgeAddresses);\r\n    }\r\n\r\n    function _setBridgeAddressesRole(address[] memory bridgeAddresses) private {\r\n        for (uint i = 0; i < bridgeAddresses.length; i++) {\r\n            _setupRole(BRIDGE_ROLE, bridgeAddresses[i]);\r\n        }\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        if (hasRole(BRIDGE_ROLE, sender)) {\r\n            super._mint(recipient, amount);\r\n        } else if (hasRole(BRIDGE_ROLE, recipient)) {\r\n            super._burn(sender, amount);\r\n        } else {\r\n            super._transfer(sender, recipient, amount);\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/tokens/BridgeERC20Test.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"./BridgeERC20.sol\";\r\n\r\ncontract BridgeERC20Test is BridgeERC20 {\r\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, address[] memory bridgeAddresses)\r\n    BridgeERC20(name_, symbol_, decimals_, bridgeAddresses) {}\r\n\r\n    function mint(address to,  uint256 amount) public {\r\n        _mint(to, amount);\r\n    }\r\n}\r\n"
    },
    "contracts/contracts_for_tests/AmbBridgeTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.6;\r\n\r\nimport \"../eth/AmbBridge.sol\";\r\nimport \"../common/CommonStructs.sol\";\r\n\r\ncontract AmbBridgeTest is AmbBridge {\r\n    constructor(CommonStructs.ConstructorArgs memory args) AmbBridge(args) {}\r\n\r\n    function getLockedTransferTest(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\r\n        return lockedTransfers[eventId];\r\n    }\r\n\r\n    function lockTransfersTest(CommonStructs.Transfer[] memory events, uint eventId) public {\r\n        lockTransfers(events, eventId);\r\n    }\r\n\r\n    function blockHashTest(BlockPoW memory block_) public pure returns (bytes32) {\r\n        return blockHash(block_);\r\n    }\r\n\r\n    function verifyEthashTest(BlockPoW memory block_) public view {\r\n        verifyEthash(block_);\r\n    }\r\n\r\n    function calcTransferReceiptsHashTest(CommonStructs.TransferProof memory p, address eventContractAddress) public pure returns (bytes32) {\r\n        return calcTransferReceiptsHash(p, eventContractAddress);\r\n    }\r\n\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "byzantium",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}