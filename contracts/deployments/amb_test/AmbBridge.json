{
  "address": "0x8F99130F9a5E9afA45079a7128817A87Fd383C9E",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sideBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokenThisAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokenSideAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeframeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSafetyBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.ConstructorArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "queue",
          "type": "tuple[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "TransferFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "TransferSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "proof",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "el",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "proofStart",
          "type": "uint256"
        }
      ],
      "name": "CalcReceiptsHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes[]",
              "name": "receipt_proof",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "event_id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonStructs.Transfer[]",
              "name": "transfers",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CommonStructs.TransferProof",
          "name": "p",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "eventContractAddress",
          "type": "address"
        }
      ],
      "name": "CalcTransferReceiptsHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes3",
                  "name": "p0WithNonce",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes3",
                  "name": "p0WithoutNonce",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes",
                  "name": "p1",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentOrReceiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "difficulty",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "number",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p4",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p5",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "nonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p6",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256[]",
                  "name": "dataSetLookup",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "witnessForLookup",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct CheckPoW.BlockPoW[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receipt_proof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "event_id",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            }
          ],
          "internalType": "struct CheckPoW.PoWProof",
          "name": "powProof",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "sideBridgeAddress",
          "type": "address"
        }
      ],
      "name": "CheckPoW_",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockTime_",
          "type": "uint256"
        }
      ],
      "name": "changeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSafetyBlocks_",
          "type": "uint256"
        }
      ],
      "name": "changeMinSafetyBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframeSeconds_",
          "type": "uint256"
        }
      ],
      "name": "changeTimeframeSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochIndex",
          "type": "uint256"
        }
      ],
      "name": "isEpochDataSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSafetyBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestLockedEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "removeLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fullSizeIn128Resultion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "branchDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "merkleNodes",
          "type": "uint256[]"
        }
      ],
      "name": "setEpochData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sideBridgeAddress",
          "type": "address"
        }
      ],
      "name": "setSideBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes3",
                  "name": "p0WithNonce",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes3",
                  "name": "p0WithoutNonce",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes",
                  "name": "p1",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentOrReceiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "difficulty",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "number",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p4",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p5",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "nonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p6",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256[]",
                  "name": "dataSetLookup",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "witnessForLookup",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct CheckPoW.BlockPoW[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receipt_proof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "event_id",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            }
          ],
          "internalType": "struct CheckPoW.PoWProof",
          "name": "powProof",
          "type": "tuple"
        }
      ],
      "name": "submitTransferPoW",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeframeSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenSideAddress",
          "type": "address"
        }
      ],
      "name": "tokensAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenSideAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensAddBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        }
      ],
      "name": "tokensRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensRemoveBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "unlockTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes3",
              "name": "p0WithNonce",
              "type": "bytes3"
            },
            {
              "internalType": "bytes3",
              "name": "p0WithoutNonce",
              "type": "bytes3"
            },
            {
              "internalType": "bytes",
              "name": "p1",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parentOrReceiptHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "p2",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "difficulty",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "p3",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "number",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "p4",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "p5",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "nonce",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "p6",
              "type": "bytes"
            },
            {
              "internalType": "uint256[]",
              "name": "dataSetLookup",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "witnessForLookup",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct CheckPoW.BlockPoW",
          "name": "block_",
          "type": "tuple"
        }
      ],
      "name": "verifyEthash",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "wrap_withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe34ee9f36fc140ccb0166a680a8b27d83d8183d93e62015bbac22e4b55b12238",
  "receipt": {
    "to": null,
    "from": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
    "contractAddress": "0x8F99130F9a5E9afA45079a7128817A87Fd383C9E",
    "transactionIndex": 0,
    "gasUsed": "6159961",
    "logsBloom": "0x00000004020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000020000000000000000000a00000000000000000800000000000000000000000000000000000000000000004000000000000000020000000000000000000000000000000000040000000000000000000000000000005000000000000000000000400000000000000000000000000010000000000100000000400020000000000000000000000000000000000000000000000000000002000000000000",
    "blockHash": "0x904d0f923742340523087261f4142af96743c26a90beddfb833e1f1669de0b8a",
    "transactionHash": "0xe34ee9f36fc140ccb0166a680a8b27d83d8183d93e62015bbac22e4b55b12238",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 54108,
        "transactionHash": "0xe34ee9f36fc140ccb0166a680a8b27d83d8183d93e62015bbac22e4b55b12238",
        "address": "0x8F99130F9a5E9afA45079a7128817A87Fd383C9E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x904d0f923742340523087261f4142af96743c26a90beddfb833e1f1669de0b8a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 54108,
        "transactionHash": "0xe34ee9f36fc140ccb0166a680a8b27d83d8183d93e62015bbac22e4b55b12238",
        "address": "0x8F99130F9a5E9afA45079a7128817A87Fd383C9E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x904d0f923742340523087261f4142af96743c26a90beddfb833e1f1669de0b8a"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 54108,
        "transactionHash": "0xe34ee9f36fc140ccb0166a680a8b27d83d8183d93e62015bbac22e4b55b12238",
        "address": "0x8F99130F9a5E9afA45079a7128817A87Fd383C9E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x904d0f923742340523087261f4142af96743c26a90beddfb833e1f1669de0b8a"
      }
    ],
    "blockNumber": 54108,
    "cumulativeGasUsed": "6159961",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "sideBridgeAddress": "0x0000000000000000000000000000000000000000",
      "adminAddress": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
      "relayAddress": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
      "wrappingTokenAddress": "0x37A715513f6DdEb9db9235f82dd823f5923791C4",
      "tokenThisAddresses": [
        "0x37A715513f6DdEb9db9235f82dd823f5923791C4",
        "0xE0b5DfA73BF1299e131000d5279a871c0ae1c17e"
      ],
      "tokenSideAddresses": [
        "0xd390d1bFd4AAeCd1635da5dDa419d388a7CF8766",
        "0xc778417E063141139Fce010982780140Aa0cD5Ab"
      ],
      "fee": 1000,
      "feeRecipient": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
      "timeframeSeconds": 1,
      "lockTime": 1,
      "minSafetyBlocks": 10
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "b797fc1b23004859c32cb1cf0f3dfeae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"queue\",\"type\":\"tuple[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"TransferFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"TransferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proof\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"el\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"proofStart\",\"type\":\"uint256\"}],\"name\":\"CalcReceiptsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receipt_proof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"p\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"eventContractAddress\",\"type\":\"address\"}],\"name\":\"CalcTransferReceiptsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"p0WithNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"p0WithoutNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes\",\"name\":\"p1\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentOrReceiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"number\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p5\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p6\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CheckPoW.BlockPoW[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receipt_proof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"internalType\":\"struct CheckPoW.PoWProof\",\"name\":\"powProof\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"}],\"name\":\"CheckPoW_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks_\",\"type\":\"uint256\"}],\"name\":\"changeMinSafetyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds_\",\"type\":\"uint256\"}],\"name\":\"changeTimeframeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochIndex\",\"type\":\"uint256\"}],\"name\":\"isEpochDataSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSafetyBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestLockedEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"removeLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullSizeIn128Resultion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"branchDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"merkleNodes\",\"type\":\"uint256[]\"}],\"name\":\"setEpochData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideBridgeAddress\",\"type\":\"address\"}],\"name\":\"setSideBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"p0WithNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"p0WithoutNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes\",\"name\":\"p1\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentOrReceiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"number\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p5\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p6\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CheckPoW.BlockPoW[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receipt_proof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"internalType\":\"struct CheckPoW.PoWProof\",\"name\":\"powProof\",\"type\":\"tuple\"}],\"name\":\"submitTransferPoW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSideAddress\",\"type\":\"address\"}],\"name\":\"tokensAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensAddBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"}],\"name\":\"tokensRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensRemoveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"unlockTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"p0WithNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"p0WithoutNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes\",\"name\":\"p1\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentOrReceiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"number\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p5\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p6\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CheckPoW.BlockPoW\",\"name\":\"block_\",\"type\":\"tuple\"}],\"name\":\"verifyEthash\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"wrap_withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/eth/AmbBridge.sol\":\"AmbBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/checks/CheckPoW.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\nimport \\\"./CheckReceiptsProof.sol\\\";\\nimport \\\"./CheckPoW_Ethash.sol\\\";\\n\\ncontract CheckPoW is CheckReceiptsProof, Ethash  {\\n    struct BlockPoW {\\n        bytes3 p0WithNonce;\\n        bytes3 p0WithoutNonce;\\n\\n        bytes p1;\\n        bytes32 parentOrReceiptHash;\\n        bytes p2;\\n        bytes difficulty;\\n        bytes p3;\\n        bytes number;\\n        bytes p4;  // end when extra end\\n        bytes p5;  // after extra\\n        bytes nonce;\\n        bytes p6;\\n\\n        uint[] dataSetLookup;\\n        uint[] witnessForLookup;\\n    }\\n\\n    struct PoWProof {\\n        BlockPoW[] blocks;\\n        CommonStructs.TransferProof transfer;\\n    }\\n\\n    function CheckPoW_(PoWProof memory powProof, address sideBridgeAddress) public\\n    {\\n        bytes32 hash = CalcTransferReceiptsHash(powProof.transfer, sideBridgeAddress);\\n        for (uint i = 0; i < powProof.blocks.length; i++) {\\n            require(powProof.blocks[i].parentOrReceiptHash == hash, \\\"parentHash or receiptHash wrong\\\");\\n            hash = blockHash(powProof.blocks[i]);\\n\\n            verifyEthash(powProof.blocks[i]);\\n        }\\n    }\\n\\n\\n    function blockHash(BlockPoW memory block_) internal pure returns (bytes32) {\\n        // Note: too much arguments in abi.encodePacked() function cause CompilerError: Stack too deep...\\n        return keccak256(abi.encodePacked(\\n                abi.encodePacked(\\n                    block_.p0WithNonce,\\n                    block_.p1,\\n                    block_.parentOrReceiptHash,\\n                    block_.p2,\\n                    block_.difficulty,\\n                    block_.p3\\n                ),\\n                abi.encodePacked(\\n                    block_.number,\\n                    block_.p4,\\n                    block_.p5,\\n                    block_.nonce,\\n                    block_.p6\\n                )\\n            ));\\n    }\\n\\n    function verifyEthash(BlockPoW memory block_) public view {\\n        verifyPoW(\\n            bytesToUint(block_.number),\\n            blockHashWithoutNonce(block_),\\n            bytesToUint(block_.nonce),\\n            bytesToUint(block_.difficulty),\\n            block_.dataSetLookup,\\n            block_.witnessForLookup\\n        );\\n\\n    }\\n\\n    function blockHashWithoutNonce(BlockPoW memory block_) private pure returns (bytes32) {\\n        bytes memory rlpHeaderHashWithoutNonce = abi.encodePacked(\\n            block_.p0WithoutNonce,\\n            block_.p1,\\n            block_.parentOrReceiptHash,\\n            block_.p2,\\n            block_.difficulty,\\n            block_.p3,\\n            block_.number,\\n            block_.p4,\\n            block_.p6\\n        );\\n\\n        return keccak256(rlpHeaderHashWithoutNonce);\\n    }\\n\\n\\n    function bytesToUint(bytes memory b) private pure returns (uint){\\n        return uint(bytes32(b)) >> (256 - b.length * 8);\\n    }\\n}\\n\",\"keccak256\":\"0x09ca4ddb37251bb14248e1da7e79032056594c2b407df45b22a28bb8620542b1\",\"license\":\"MIT\"},\"contracts/checks/CheckPoW_Ethash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev These contracts are used to verify Proof of Work within a smart contract.\\n///      The algorithms have been extracted from the implementation of smart pool (https://github.com/smartpool)\\ncontract SHA3_512 {\\n    constructor() {}\\n\\n    function keccak_f(uint[25] memory A) pure private returns (uint[25] memory) {\\n        uint[25] memory B;\\n        uint[5]  memory C;\\n        uint[5]  memory D;\\n\\n        uint[24] memory RC = [\\n        uint(0x0000000000000001),\\n        0x0000000000008082,\\n        0x800000000000808A,\\n        0x8000000080008000,\\n        0x000000000000808B,\\n        0x0000000080000001,\\n        0x8000000080008081,\\n        0x8000000000008009,\\n        0x000000000000008A,\\n        0x0000000000000088,\\n        0x0000000080008009,\\n        0x000000008000000A,\\n        0x000000008000808B,\\n        0x800000000000008B,\\n        0x8000000000008089,\\n        0x8000000000008003,\\n        0x8000000000008002,\\n        0x8000000000000080,\\n        0x000000000000800A,\\n        0x800000008000000A,\\n        0x8000000080008081,\\n        0x8000000000008080,\\n        0x0000000080000001,\\n        0x8000000080008008];\\n\\n        for (uint i = 0; i < 24; i++) {\\n\\n            C[0] = A[0] ^ A[1] ^ A[2] ^ A[3] ^ A[4];\\n            C[1] = A[5] ^ A[6] ^ A[7] ^ A[8] ^ A[9];\\n            C[2] = A[10] ^ A[11] ^ A[12] ^ A[13] ^ A[14];\\n            C[3] = A[15] ^ A[16] ^ A[17] ^ A[18] ^ A[19];\\n            C[4] = A[20] ^ A[21] ^ A[22] ^ A[23] ^ A[24];\\n\\n            D[0] = C[4] ^ ((C[1] * 2) & 0xffffffffffffffff | (C[1] / (2 ** 63)));\\n            D[1] = C[0] ^ ((C[2] * 2) & 0xffffffffffffffff | (C[2] / (2 ** 63)));\\n            D[2] = C[1] ^ ((C[3] * 2) & 0xffffffffffffffff | (C[3] / (2 ** 63)));\\n            D[3] = C[2] ^ ((C[4] * 2) & 0xffffffffffffffff | (C[4] / (2 ** 63)));\\n            D[4] = C[3] ^ ((C[0] * 2) & 0xffffffffffffffff | (C[0] / (2 ** 63)));\\n\\n            A[0] = A[0] ^ D[0];\\n            A[1] = A[1] ^ D[0];\\n            A[2] = A[2] ^ D[0];\\n            A[3] = A[3] ^ D[0];\\n            A[4] = A[4] ^ D[0];\\n            A[5] = A[5] ^ D[1];\\n            A[6] = A[6] ^ D[1];\\n            A[7] = A[7] ^ D[1];\\n            A[8] = A[8] ^ D[1];\\n            A[9] = A[9] ^ D[1];\\n            A[10] = A[10] ^ D[2];\\n            A[11] = A[11] ^ D[2];\\n            A[12] = A[12] ^ D[2];\\n            A[13] = A[13] ^ D[2];\\n            A[14] = A[14] ^ D[2];\\n            A[15] = A[15] ^ D[3];\\n            A[16] = A[16] ^ D[3];\\n            A[17] = A[17] ^ D[3];\\n            A[18] = A[18] ^ D[3];\\n            A[19] = A[19] ^ D[3];\\n            A[20] = A[20] ^ D[4];\\n            A[21] = A[21] ^ D[4];\\n            A[22] = A[22] ^ D[4];\\n            A[23] = A[23] ^ D[4];\\n            A[24] = A[24] ^ D[4];\\n\\n            /*Rho and pi steps*/\\n            B[0] = A[0];\\n            B[8] = ((A[1] * (2 ** 36)) & 0xffffffffffffffff | (A[1] / (2 ** 28)));\\n            B[11] = ((A[2] * (2 ** 3)) & 0xffffffffffffffff | (A[2] / (2 ** 61)));\\n            B[19] = ((A[3] * (2 ** 41)) & 0xffffffffffffffff | (A[3] / (2 ** 23)));\\n            B[22] = ((A[4] * (2 ** 18)) & 0xffffffffffffffff | (A[4] / (2 ** 46)));\\n            B[2] = ((A[5] * (2 ** 1)) & 0xffffffffffffffff | (A[5] / (2 ** 63)));\\n            B[5] = ((A[6] * (2 ** 44)) & 0xffffffffffffffff | (A[6] / (2 ** 20)));\\n            B[13] = ((A[7] * (2 ** 10)) & 0xffffffffffffffff | (A[7] / (2 ** 54)));\\n            B[16] = ((A[8] * (2 ** 45)) & 0xffffffffffffffff | (A[8] / (2 ** 19)));\\n            B[24] = ((A[9] * (2 ** 2)) & 0xffffffffffffffff | (A[9] / (2 ** 62)));\\n            B[4] = ((A[10] * (2 ** 62)) & 0xffffffffffffffff | (A[10] / (2 ** 2)));\\n            B[7] = ((A[11] * (2 ** 6)) & 0xffffffffffffffff | (A[11] / (2 ** 58)));\\n            B[10] = ((A[12] * (2 ** 43)) & 0xffffffffffffffff | (A[12] / (2 ** 21)));\\n            B[18] = ((A[13] * (2 ** 15)) & 0xffffffffffffffff | (A[13] / (2 ** 49)));\\n            B[21] = ((A[14] * (2 ** 61)) & 0xffffffffffffffff | (A[14] / (2 ** 3)));\\n            B[1] = ((A[15] * (2 ** 28)) & 0xffffffffffffffff | (A[15] / (2 ** 36)));\\n            B[9] = ((A[16] * (2 ** 55)) & 0xffffffffffffffff | (A[16] / (2 ** 9)));\\n            B[12] = ((A[17] * (2 ** 25)) & 0xffffffffffffffff | (A[17] / (2 ** 39)));\\n            B[15] = ((A[18] * (2 ** 21)) & 0xffffffffffffffff | (A[18] / (2 ** 43)));\\n            B[23] = ((A[19] * (2 ** 56)) & 0xffffffffffffffff | (A[19] / (2 ** 8)));\\n            B[3] = ((A[20] * (2 ** 27)) & 0xffffffffffffffff | (A[20] / (2 ** 37)));\\n            B[6] = ((A[21] * (2 ** 20)) & 0xffffffffffffffff | (A[21] / (2 ** 44)));\\n            B[14] = ((A[22] * (2 ** 39)) & 0xffffffffffffffff | (A[22] / (2 ** 25)));\\n            B[17] = ((A[23] * (2 ** 8)) & 0xffffffffffffffff | (A[23] / (2 ** 56)));\\n            B[20] = ((A[24] * (2 ** 14)) & 0xffffffffffffffff | (A[24] / (2 ** 50)));\\n\\n            /*Xi state*/\\n            A[0] = B[0] ^ ((~B[5]) & B[10]);\\n            A[1] = B[1] ^ ((~B[6]) & B[11]);\\n            A[2] = B[2] ^ ((~B[7]) & B[12]);\\n            A[3] = B[3] ^ ((~B[8]) & B[13]);\\n            A[4] = B[4] ^ ((~B[9]) & B[14]);\\n            A[5] = B[5] ^ ((~B[10]) & B[15]);\\n            A[6] = B[6] ^ ((~B[11]) & B[16]);\\n            A[7] = B[7] ^ ((~B[12]) & B[17]);\\n            A[8] = B[8] ^ ((~B[13]) & B[18]);\\n            A[9] = B[9] ^ ((~B[14]) & B[19]);\\n            A[10] = B[10] ^ ((~B[15]) & B[20]);\\n            A[11] = B[11] ^ ((~B[16]) & B[21]);\\n            A[12] = B[12] ^ ((~B[17]) & B[22]);\\n            A[13] = B[13] ^ ((~B[18]) & B[23]);\\n            A[14] = B[14] ^ ((~B[19]) & B[24]);\\n            A[15] = B[15] ^ ((~B[20]) & B[0]);\\n            A[16] = B[16] ^ ((~B[21]) & B[1]);\\n            A[17] = B[17] ^ ((~B[22]) & B[2]);\\n            A[18] = B[18] ^ ((~B[23]) & B[3]);\\n            A[19] = B[19] ^ ((~B[24]) & B[4]);\\n            A[20] = B[20] ^ ((~B[0]) & B[5]);\\n            A[21] = B[21] ^ ((~B[1]) & B[6]);\\n            A[22] = B[22] ^ ((~B[2]) & B[7]);\\n            A[23] = B[23] ^ ((~B[3]) & B[8]);\\n            A[24] = B[24] ^ ((~B[4]) & B[9]);\\n\\n            /*Last step*/\\n            A[0] = A[0] ^ RC[i];\\n        }\\n\\n        return A;\\n    }\\n\\n\\n    function sponge(uint[9] memory M) pure internal returns (uint[16] memory) {\\n        require((M.length * 8) == 72, \\\"sponge error\\\");\\n\\n        M[5] = 0x01;\\n        M[8] = 0x8000000000000000;\\n\\n        uint r = 72;\\n        uint w = 8;\\n        uint size = M.length * 8;\\n\\n        uint[25] memory S;\\n        uint i;\\n        uint y;\\n        uint x;\\n        /*Absorbing Phase*/\\n        for (i = 0; i < size / r; i++) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w)) {\\n                        S[5 * x + y] = S[5 * x + y] ^ M[i * 9 + x + 5 * y];\\n                    }\\n                }\\n            }\\n            S = keccak_f(S);\\n        }\\n\\n        /*Squeezing phase*/\\n        uint[16] memory result;\\n        uint b = 0;\\n        while (b < 16) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w) && (b < 16)) {\\n                        result[b] = S[5 * x + y] & 0xFFFFFFFF;\\n                        result[b + 1] = S[5 * x + y] / 0x100000000;\\n                        b += 2;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n}\\n\\n////////////////////////////////////////////////////////////////////////////////\\n\\ncontract Ethash is SHA3_512 {\\n\\n    uint constant EPOCH_LENGTH = 30000;   // blocks per epoch\\n\\n    constructor() {\\n    }\\n\\n    struct EthashCacheOptData {\\n        uint[512] merkleNodes;\\n        uint fullSizeIn128Resultion;\\n        uint branchDepth;\\n    }\\n\\n    mapping(uint => EthashCacheOptData) epochData;\\n\\n\\n    function verifyPoW(uint blockNumber, bytes32 rlpHeaderHashWithoutNonce, uint nonce, uint difficulty,\\n        uint[] memory dataSetLookup, uint[] memory witnessForLookup) internal view {\\n\\n        uint epoch = blockNumber / EPOCH_LENGTH;\\n        uint ethash = hashimoto(rlpHeaderHashWithoutNonce, nonce, dataSetLookup, witnessForLookup, epoch);\\n\\n        require(ethash <= (2 ** 256 - 1) / difficulty, \\\"Ethash difficulty too low\\\");\\n    }\\n\\n    function isEpochDataSet(uint epochIndex) public view returns (bool) {\\n        return epochData[epochIndex].fullSizeIn128Resultion != 0;\\n    }\\n\\n    function setEpochData(\\n        uint epochNum,\\n        uint fullSizeIn128Resultion,\\n        uint branchDepth,\\n        uint[] memory merkleNodes\\n    ) public {\\n\\n        // we store only previous and current epochs\\n        // so, delete second from the end epoch\\n        if (epochNum >= 2)  // underflow check\\n            delete epochData[epochNum - 2];\\n\\n\\n        uint l = merkleNodes.length;\\n        uint[512] storage nodes = epochData[epochNum].merkleNodes;\\n\\n        for (uint i = 0; i < l; i++) {\\n            nodes[i] = merkleNodes[i];\\n        }\\n\\n        epochData[epochNum].fullSizeIn128Resultion = fullSizeIn128Resultion;\\n        epochData[epochNum].branchDepth = branchDepth;\\n    }\\n\\n\\n    function hashimoto(bytes32 header,\\n        uint nonceLe,\\n        uint[] memory dataSetLookup,\\n        uint[] memory witnessForLookup,\\n        uint epochIndex) private view returns (uint) {\\n\\n        uint[16] memory s = computeS(uint(header), nonceLe);\\n        uint[32] memory mix;\\n        uint[8]  memory cmix;\\n\\n\\n        uint depth = epochData[epochIndex].branchDepth;\\n        uint fullSize = epochData[epochIndex].fullSizeIn128Resultion;\\n\\n        uint i;\\n        uint j;\\n\\n        require(fullSize != 0, \\\"EpochData not set\\\");\\n\\n\\n        for (i = 0; i < 16; i++) {\\n            assembly {\\n                let offset := mul(i, 0x20)\\n\\n            //mix[i] = s[i];\\n                mstore(add(mix, offset), mload(add(s, offset)))\\n\\n            // mix[i+16] = s[i];\\n                mstore(add(mix, add(0x200, offset)), mload(add(s, offset)))\\n            }\\n        }\\n\\n        for (i = 0; i < 64; i++) {\\n            uint p = fnv(i ^ s[0], mix[i % 32]) % fullSize;\\n\\n            // console.log(computeCacheRoot( p, i, dataSetLookup,  witnessForLookup, depthAndFullSize[0]));\\n            // console.log(getMerkleLeave( epochIndex, p ));\\n\\n            if (computeCacheRoot(p, i, dataSetLookup, witnessForLookup, depth) != getMerkleLeave(epochIndex, p)) {\\n                // PoW failed\\n                revert(\\\"PoW failed\\\");\\n            }\\n\\n            for (j = 0; j < 8; j++) {\\n\\n                assembly{\\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & varFFFFFFFF );\\n                    let dataOffset := add(mul(0x80, i), add(dataSetLookup, 0x20))\\n                    let dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    let mixOffset := add(mix, mul(0x20, j))\\n                    let mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    let fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                }\\n\\n\\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & 0xFFFFFFFF );\\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\\n\\n\\n                //dataSetLookup[4*i    ] = dataSetLookup[4*i    ]/(2**32);\\n                //dataSetLookup[4*i + 1] = dataSetLookup[4*i + 1]/(2**32);\\n                //dataSetLookup[4*i + 2] = dataSetLookup[4*i + 2]/(2**32);\\n                //dataSetLookup[4*i + 3] = dataSetLookup[4*i + 3]/(2**32);\\n\\n                assembly{\\n                    let offset := add(add(dataSetLookup, 0x20), mul(i, 0x80))\\n                    let value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n                }\\n            }\\n        }\\n\\n\\n        for (i = 0; i < 32; i += 4) {\\n            cmix[i / 4] = (fnv(fnv(fnv(mix[i], mix[i + 1]), mix[i + 2]), mix[i + 3]));\\n        }\\n\\n        return computeSha3(s, cmix);\\n\\n    }\\n\\n\\n    function fnv(uint v1, uint v2) pure internal returns (uint) {\\n        return ((v1 * 0x01000193) ^ v2) & 0xFFFFFFFF;\\n    }\\n\\n    function computeCacheRoot(uint index,\\n        uint indexInElementsArray,\\n        uint[] memory elements,\\n        uint[] memory witness,\\n        uint branchSize) pure private returns (uint) {\\n\\n        uint leaf = computeLeaf(elements, indexInElementsArray) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n        uint left;\\n        uint right;\\n        uint node;\\n        bool oddBranchSize = (branchSize % 2) > 0;\\n\\n        assembly {\\n            branchSize := div(branchSize, 2)\\n        //branchSize /= 2;\\n        }\\n        uint witnessIndex = indexInElementsArray * branchSize;\\n        if (oddBranchSize) witnessIndex += indexInElementsArray;\\n\\n        uint depth;\\n        for (depth = 0; depth < branchSize; depth++) {\\n            assembly {\\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\\n            }\\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n\\n            }\\n            else {\\n                assembly{\\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            assembly {\\n                index := div(index, 2)\\n            }\\n\\n            //node  = witness[witnessIndex + depth] / (2**128);\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := div(node, 0x100000000000000000000000000000000)\\n                }\\n            }\\n            else {\\n                assembly {\\n                    left := div(node, 0x100000000000000000000000000000000)\\n                }\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            assembly {\\n                index := div(index, 2)\\n            }\\n        }\\n\\n        if (oddBranchSize) {\\n            assembly {\\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\\n            }\\n\\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n            }\\n            else {\\n                assembly{\\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n\\n\\n        return leaf;\\n    }\\n\\n\\n    function computeSha3(uint[16] memory s, uint[8] memory cmix) pure internal returns (uint) {\\n        uint s0 = s[0] + s[1] * (2 ** 32) + s[2] * (2 ** 64) + s[3] * (2 ** 96) +\\n        (s[4] + s[5] * (2 ** 32) + s[6] * (2 ** 64) + s[7] * (2 ** 96)) * (2 ** 128);\\n\\n        uint s1 = s[8] + s[9] * (2 ** 32) + s[10] * (2 ** 64) + s[11] * (2 ** 96) +\\n        (s[12] + s[13] * (2 ** 32) + s[14] * (2 ** 64) + s[15] * (2 ** 96)) * (2 ** 128);\\n\\n        uint c = cmix[0] + cmix[1] * (2 ** 32) + cmix[2] * (2 ** 64) + cmix[3] * (2 ** 96) +\\n        (cmix[4] + cmix[5] * (2 ** 32) + cmix[6] * (2 ** 64) + cmix[7] * (2 ** 96)) * (2 ** 128);\\n\\n\\n        /* god knows why need to convert to big endian */\\n        return uint(keccak256(abi.encodePacked(reverseBytes(s0), reverseBytes(s1), reverseBytes(c))));\\n    }\\n\\n\\n    function computeLeaf(uint[] memory dataSetLookup, uint index) pure internal returns (uint) {\\n        return uint(keccak256(abi.encodePacked(\\n                dataSetLookup[4 * index],\\n                dataSetLookup[4 * index + 1],\\n                dataSetLookup[4 * index + 2],\\n                dataSetLookup[4 * index + 3]\\n            )));\\n\\n    }\\n\\n    function computeS(uint header, uint nonceLe) pure internal returns (uint[16] memory) {\\n        uint[9] memory M;\\n\\n        header = reverseBytes(header);\\n\\n        M[0] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[1] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[2] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[3] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n\\n        // make little endian nonce\\n        M[4] = nonceLe;\\n        return sponge(M);\\n    }\\n\\n    function reverseBytes(uint input) pure internal returns (uint) {\\n        uint result;\\n        for (uint i = 0; i < 32; i++) {\\n            result = (result << 8) + (input & 0xff);\\n            input = input >> 8;\\n        }\\n        return result;\\n    }\\n\\n\\n    function getMerkleLeave(uint epochIndex, uint p) view internal returns (uint) {\\n        uint rootIndex = uint(p >> epochData[epochIndex].branchDepth);\\n        uint expectedRoot = epochData[epochIndex].merkleNodes[(rootIndex >> 1)];\\n\\n        if ((rootIndex % 2) == 0)\\n            return expectedRoot & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        return expectedRoot >> 128;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb0dc1a73f64f772b1cc9b0feada94faabc85c2c46a066be6c9a2cedb767ccc48\",\"license\":\"MIT\"},\"contracts/checks/CheckReceiptsProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\n\\n\\ncontract CheckReceiptsProof {\\n    // check readme for focs\\n    function CalcReceiptsHash(bytes[] memory proof, bytes32 el, uint proofStart) public pure returns (bytes32) {\\n        bytes memory s;\\n\\n        for (uint i = proofStart; i < proof.length; i += 2) {\\n            s = abi.encodePacked(proof[i], el, proof[i + 1]);\\n            el = (s.length > 32) ? keccak256(s) : bytes32(s);\\n        }\\n\\n        return el;\\n    }\\n\\n\\n    function CalcTransferReceiptsHash(CommonStructs.TransferProof memory p, address eventContractAddress) public pure returns (bytes32) {\\n        bytes32 el = keccak256(abi.encodePacked(\\n                p.receipt_proof[0],\\n                eventContractAddress,\\n                p.receipt_proof[1],\\n                toBinary(p.event_id),\\n                p.receipt_proof[2],\\n                abi.encode(p.transfers),\\n                p.receipt_proof[3]\\n            ));\\n        return CalcReceiptsHash(p.receipt_proof, el, 4);\\n        // start from proof[4]\\n    }\\n\\n\\n    function toBinary(uint _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), _x)\\n        }\\n        uint i;\\n        for (i = 0; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0xc38527fc5cdc908a1359ca83e01aef72981d9d6700e93ffc5eecd5223baac9a1\",\"license\":\"MIT\"},\"contracts/common/CommonBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./CommonStructs.sol\\\";\\nimport \\\"../tokens/IWrapper.sol\\\";\\n\\n\\n\\ncontract CommonBridge is AccessControl, Pausable {\\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n\\n\\n    // queue to be pushed in another network\\n    CommonStructs.Transfer[] queue;\\n\\n    // locked transfers from another network\\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\\n    uint public oldestLockedEventId;  // head index of lockedTransfers 'queue' mapping\\n\\n\\n    // this network to side network token addresses mapping\\n    mapping(address => address) public tokenAddresses;\\n    address public wrapperAddress;\\n\\n    uint public fee;\\n    address payable feeRecipient;\\n\\n    address public sideBridgeAddress;\\n    uint public minSafetyBlocks;\\n    uint public timeframeSeconds;\\n    uint public lockTime;\\n\\n    uint public inputEventId; // last processed event from side network\\n    uint outputEventId = 1;  // last created event in this network. start from 1 coz 0 consider already processed\\n\\n    uint lastTimeframe;\\n\\n    event Withdraw(address indexed from, uint event_id, uint feeAmount);\\n    event Transfer(uint indexed event_id, CommonStructs.Transfer[] queue);\\n    event TransferSubmit(uint indexed event_id);\\n    event TransferFinish(uint indexed event_id);\\n\\n\\n    constructor(CommonStructs.ConstructorArgs memory args)\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(RELAY_ROLE, args.relayAddress);\\n        _setupRole(ADMIN_ROLE, args.adminAddress);\\n\\n        // initialise tokenAddresses with start values\\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\\n        wrapperAddress = args.wrappingTokenAddress;\\n\\n        sideBridgeAddress = args.sideBridgeAddress;\\n        fee = args.fee;\\n        feeRecipient = args.feeRecipient;\\n        minSafetyBlocks = args.minSafetyBlocks;\\n        timeframeSeconds = args.timeframeSeconds;\\n        lockTime = args.lockTime;\\n    }\\n\\n\\n    function wrap_withdraw(address toAddress) public payable {\\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\\n        require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value > fee, \\\"msg.value can't be lesser than fee\\\");\\n        feeRecipient.transfer(fee);\\n\\n        uint restOfValue = msg.value - fee;\\n        IWrapper(wrapperAddress).deposit{value: restOfValue}();\\n\\n        //\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, restOfValue));\\n        emit Withdraw(msg.sender, outputEventId, fee);\\n\\n        withdraw_finish();\\n    }\\n\\n    function withdraw(address tokenThisAddress, address toAddress, uint amount) payable public {\\n        address tokenSideAddress = tokenAddresses[tokenThisAddress];\\n        require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value == fee, \\\"Sent value != fee\\\");\\n        feeRecipient.transfer(msg.value);\\n\\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \\\"Fail transfer coins\\\");\\n\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, fee);\\n\\n        withdraw_finish();\\n    }\\n\\n    function withdraw_finish() internal {\\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\\n        if (nowTimeframe != lastTimeframe) {\\n            emit Transfer(outputEventId++, queue);\\n            delete queue;\\n\\n            lastTimeframe = nowTimeframe;\\n        }\\n    }\\n\\n\\n    // locked transfers from another network\\n\\n    // submitted transfers save here for `lockTime` period\\n    function lockTransfers(CommonStructs.Transfer[] memory events, uint event_id) internal {\\n        lockedTransfers[event_id].endTimestamp = block.timestamp + lockTime;\\n        for (uint i = 0; i < events.length; i++)\\n            lockedTransfers[event_id].transfers.push(events[i]);\\n    }\\n\\n    // after `lockTime` period, transfers can  be unlocked\\n    function unlockTransfers(uint event_id) public whenNotPaused {\\n        require(event_id == oldestLockedEventId, \\\"can unlock only oldest event\\\");\\n\\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[event_id];\\n        require(transfersLocked.endTimestamp > 0, \\\"no locked transfers with this id\\\");\\n        require(transfersLocked.endTimestamp < block.timestamp, \\\"lockTime has not yet passed\\\");\\n\\n        CommonStructs.Transfer[] memory transfers = transfersLocked.transfers;\\n        for (uint i = 0; i < transfers.length; i++)\\n            require(IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount), \\\"Fail transfer coins\\\");\\n\\n        delete lockedTransfers[event_id];\\n        emit TransferFinish(event_id);\\n\\n        oldestLockedEventId = event_id+1;\\n    }\\n\\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\\n    function unlockTransfersBatch() public whenNotPaused {\\n        uint event_id = oldestLockedEventId;\\n        for (;; event_id++) {\\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[event_id];\\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\\n\\n            CommonStructs.Transfer[] memory transfers = transfersLocked.transfers;\\n            for (uint i = 0; i < transfers.length; i++)\\n                require(IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount), \\\"Fail transfer coins\\\");\\n\\n            delete lockedTransfers[event_id];\\n            emit TransferFinish(event_id);\\n        }\\n        oldestLockedEventId = event_id;\\n    }\\n\\n    // delete transfers with passed event_id and all after it\\n    function removeLockedTransfers(uint event_id) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(event_id >= oldestLockedEventId, \\\"event_id must be >= oldestLockedEventId\\\");\\n        for ( ;lockedTransfers[event_id].endTimestamp != 0; event_id++)\\n            delete lockedTransfers[event_id];\\n    }\\n\\n\\n    // admin setters\\n\\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\\n        minSafetyBlocks = minSafetyBlocks_;\\n    }\\n\\n    function changeFee(uint fee_) public onlyRole(ADMIN_ROLE) {\\n        fee = fee_;\\n    }\\n\\n    function changeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        feeRecipient = feeRecipient_;\\n    }\\n\\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\\n        timeframeSeconds = timeframeSeconds_;\\n    }\\n\\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\\n        lockTime = lockTime_;\\n    }\\n\\n\\n    // token addressed mapping\\n\\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\\n    }\\n\\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\\n        delete tokenAddresses[tokenThisAddress];\\n    }\\n\\n    function tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\\n    }\\n\\n    function _tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) private {\\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \\\"sizes of tokenThisAddresses and tokenSideAddresses must be same\\\");\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\\n    }\\n\\n    function tokensRemoveBatch(address[] memory tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            delete tokenAddresses[tokenThisAddresses[i]];\\n    }\\n\\n    // pause\\n\\n    function pause() public onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // internal\\n\\n    function checkEventId(uint event_id) internal {\\n        require(event_id == ++inputEventId, \\\"EventId out of order\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xc848a190d5fcd62aed6bdd645293606ef85d4ab1487489f6433e01e2a6336882\",\"license\":\"MIT\"},\"contracts/common/CommonStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary CommonStructs {\\n    struct Transfer {\\n        address tokenAddress;\\n        address toAddress;\\n        uint amount;\\n    }\\n\\n    struct TransferProof {\\n        bytes[] receipt_proof;\\n        uint event_id;\\n        Transfer[] transfers;\\n    }\\n\\n    struct LockedTransfers {\\n        Transfer[] transfers;\\n        uint endTimestamp;\\n    }\\n\\n    struct ConstructorArgs {\\n        address sideBridgeAddress; address adminAddress;\\n        address relayAddress; address wrappingTokenAddress;\\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\\n        uint fee; address payable feeRecipient;\\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0xf7699e9e5bae55dee7ad5185cf663152b9d7df039b72bbde377fe1d60868b46d\",\"license\":\"MIT\"},\"contracts/eth/AmbBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonBridge.sol\\\";\\nimport \\\"../common/CommonStructs.sol\\\";\\nimport \\\"../checks/CheckPoW.sol\\\";\\n\\n\\ncontract AmbBridge is CommonBridge, CheckPoW {\\n    constructor(CommonStructs.ConstructorArgs memory args) CommonBridge(args) {}\\n\\n    function submitTransferPoW(PoWProof memory powProof) public onlyRole(RELAY_ROLE) whenNotPaused {\\n        emit TransferSubmit(powProof.transfer.event_id);\\n\\n        checkEventId(powProof.transfer.event_id);\\n\\n        CheckPoW_(powProof, sideBridgeAddress);\\n\\n        lockTransfers(powProof.transfer.transfers, powProof.transfer.event_id);\\n    }\\n\\n    function setSideBridge(address _sideBridgeAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(sideBridgeAddress == address(0), \\\"sideBridgeAddress already set\\\");\\n        sideBridgeAddress = _sideBridgeAddress;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xeffc544b2dab2a4bd332487428f971b36cdbd98d6e2c5bc5db465eef93c49669\",\"license\":\"MIT\"},\"contracts/tokens/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWrapper {\\n    event Deposit(address indexed dst, uint amount);\\n    event Withdrawal(address indexed src, uint amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external payable;\\n}\\n\",\"keccak256\":\"0x800c261f75f979f219a046bc3b5667e1371734606f47356c59a463dece282177\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001600e553480156200001657600080fd5b5060405162005b2e38038062005b2e833981016040819052620000399162000456565b6001805460ff19169055806200005a6000336401000000006200016c810204565b620000997f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d782604001516200016c640100000000026401000000009004565b620000d87fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177582602001516200016c640100000000026401000000009004565b620000fb81608001518260a0015162000185640100000000026401000000009004565b606081015160068054600160a060020a03928316600160a060020a03199182161790915582516009805491841691831691909117905560c083015160075560e083015160088054919093169116179055610140810151600a55610100810151600b556101200151600c555062000664565b620001818282640100000000620002c7810204565b5050565b80518251146200021b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d6500606482015260840160405180910390fd5b815160005b81811015620002c1578281815181106200023e576200023e620005ed565b6020026020010151600560008684815181106200025f576200025f620005ed565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080620002b890620005aa565b91505062000220565b50505050565b620002dc828264010000000062000363810204565b6200018157600082815260208181526040808320600160a060020a03851684529091529020805460ff191660011790556200031f6401000000006200038c810204565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600091825260208281526040808420600160a060020a0393909316845291905290205460ff1690565b3390565b80516200039d816200064b565b919050565b600082601f830112620003b457600080fd5b815160206001604060020a0380831115620003d357620003d36200061c565b818302604051601f19603f83011681018181108482111715620003fa57620003fa6200061c565b604052848152838101925086840182880185018910156200041a57600080fd5b600092505b858310156200044a57805162000435816200064b565b8452928401926001929092019184016200041f565b50979650505050505050565b6000602082840312156200046957600080fd5b81516001604060020a03808211156200048157600080fd5b9083019061016082860312156200049757600080fd5b620004a16200057e565b620004ac8362000390565b8152620004bc6020840162000390565b6020820152620004cf6040840162000390565b6040820152620004e26060840162000390565b6060820152608083015182811115620004fa57600080fd5b6200050887828601620003a2565b60808301525060a0830151828111156200052157600080fd5b6200052f87828601620003a2565b60a08301525060c083015160c08201526200054d60e0840162000390565b60e0820152610100838101519082015261012080840151908201526101409283015192810192909252509392505050565b60405161016081016001604060020a0381118282101715620005a457620005a46200061c565b60405290565b6000600019821415620005e6577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600160a060020a03811681146200066157600080fd5b50565b6154ba80620006746000396000f3fe60806040526004361061026b5760003560e060020a900480638ac1f86f11610148578063c7b81f4f116100ba578063e78995361161007e578063e789953614610742578063e88b662614610762578063f33fe10f14610782578063f825dfcc146107a2578063f862b7eb146107c2578063fd5d2ef3146107e257600080fd5b8063c7b81f4f146106a6578063d547741f146106d9578063d9caed12146106f9578063ddca3f431461070c578063e1d862be1461072257600080fd5b806396cf52271161010c57806396cf5227146105f957806399b5bb6414610619578063a217fddf1461062f578063b6d3385e14610644578063ba8bbbe01461067a578063baeebe751461069057600080fd5b80638ac1f86f1461056e5780638e5df9c71461058357806390d0308f146105a357806391d14854146105c3578063924cf6e0146105e357600080fd5b80633f4ba83a116101e15780636a1db1bf116101a55780636a1db1bf1461049f57806375b238fc146104bf5780637df8b802146104e15780638456cb5914610519578063853890ae1461052e5780638888c18a1461054e57600080fd5b80633f4ba83a1461040257806342180fb8146104175780634a1856de146104375780635249a705146104675780635c975abb1461048757600080fd5b806323291c201161023357806323291c201461033f5780632360407114610352578063248a9ca3146103725780632f2ff15d146103a2578063331a891a146103c257806336568abe146103e257600080fd5b806301ffc9a71461027057806304421823146102a557806309fce356146102e75780630d6680871461030957806321d3d5361461031f575b600080fd5b34801561027c57600080fd5b5061029061028b366004614bdf565b610802565b60405190151581526020015b60405180910390f35b3480156102b157600080fd5b506102d97f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b60405190815260200161029c565b3480156102f357600080fd5b50610307610302366004614acd565b610895565b005b34801561031557600080fd5b506102d9600c5481565b34801561032b57600080fd5b5061030761033a366004614a01565b6108bd565b61030761034d366004614a01565b61094d565b34801561035e57600080fd5b5061030761036d366004614a01565b610c11565b34801561037e57600080fd5b506102d961038d366004614ba1565b60009081526020819052604090206001015490565b3480156103ae57600080fd5b506103076103bd366004614bba565b610c4d565b3480156103ce57600080fd5b506103076103dd366004614ba1565b610c73565b3480156103ee57600080fd5b506103076103fd366004614bba565b610dac565b34801561040e57600080fd5b50610307610e37565b34801561042357600080fd5b50610307610432366004614ba1565b610e5b565b34801561044357600080fd5b506102d9610452366004614ba1565b60036020526000908152604090206001015481565b34801561047357600080fd5b50610307610482366004614a98565b610e7a565b34801561049357600080fd5b5060015460ff16610290565b3480156104ab57600080fd5b506103076104ba366004614ba1565b610eff565b3480156104cb57600080fd5b506102d960008051602061546583398151915281565b3480156104ed57600080fd5b5060065461050190600160a060020a031681565b604051600160a060020a03909116815260200161029c565b34801561052557600080fd5b50610307610f1e565b34801561053a57600080fd5b50610307610549366004614a1e565b610f3f565b34801561055a57600080fd5b50610307610569366004614c1e565b610f87565b34801561057a57600080fd5b50610307610fcc565b34801561058f57600080fd5b5061030761059e366004614a01565b611249565b3480156105af57600080fd5b506102d96105be366004614ccf565b61128a565b3480156105cf57600080fd5b506102906105de366004614bba565b61137f565b3480156105ef57600080fd5b506102d9600a5481565b34801561060557600080fd5b50610307610614366004614ba1565b6113a8565b34801561062557600080fd5b506102d9600d5481565b34801561063b57600080fd5b506102d9600081565b34801561065057600080fd5b5061050161065f366004614a01565b600560205260009081526040902054600160a060020a031681565b34801561068657600080fd5b506102d960045481565b34801561069c57600080fd5b506102d9600b5481565b3480156106b257600080fd5b506102906106c1366004614ba1565b60009081526010602052604090206102000154151590565b3480156106e557600080fd5b506103076106f4366004614bba565b6113c7565b610307610707366004614a57565b6113ed565b34801561071857600080fd5b506102d960075481565b34801561072e57600080fd5b5061030761073d366004614c53565b6116c5565b34801561074e57600080fd5b506102d961075d366004614b31565b611789565b34801561076e57600080fd5b5061030761077d366004614d05565b611839565b34801561078e57600080fd5b5060095461050190600160a060020a031681565b3480156107ae57600080fd5b506103076107bd366004614c88565b611900565b3480156107ce57600080fd5b506103076107dd366004614ba1565b6119f2565b3480156107ee57600080fd5b506103076107fd366004614ba1565b611d49565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b00000000000000000000000000000000000000000000000000000000148061088f57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b6000805160206154658339815191526108ae8133611d68565b6108b88383611dcf565b505050565b60006108c98133611d68565b600954600160a060020a03161561092a5760405160e560020a62461bcd02815260206004820152601d60248201527f736964654272696467654164647265737320616c72656164792073657400000060448201526064015b60405180910390fd5b5060098054600160a060020a031916600160a060020a0392909216919091179055565b600654600160a060020a0390811660009081526005602052604090205416806109bb5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e206164647265737300000000000000000000006044820152606401610921565b6007543411610a355760405160e560020a62461bcd02815260206004820152602260248201527f6d73672e76616c75652063616e2774206265206c6573736572207468616e206660448201527f65650000000000000000000000000000000000000000000000000000000000006064820152608401610921565b600854600754604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015610a71573d6000803e3d6000fd5b50600060075434610a829190615339565b9050600660009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b158015610ad757600080fd5b505af1158015610aeb573d6000803e3d6000fd5b505060408051606081018252600160a060020a0380881682528881166020830190815282840188815260028054600181018255600091909152935160039094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81018054958516600160a060020a031996871617905591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830180549190941694169390931790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600e5460075491513395507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689450610c019350909190918252602082015260400190565b60405180910390a26108b8611ee5565b600080516020615465833981519152610c2a8133611d68565b5060088054600160a060020a031916600160a060020a0392909216919091179055565b600082815260208190526040902060010154610c698133611d68565b6108b88383611f5d565b600080516020615465833981519152610c8c8133611d68565b60015460ff16610ce15760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610921565b600454821015610d5c5760405160e560020a62461bcd02815260206004820152602760248201527f6576656e745f6964206d757374206265203e3d206f6c646573744c6f636b656460448201527f4576656e744964000000000000000000000000000000000000000000000000006064820152608401610921565b60008281526003602052604090206001015415610da857600082815260036020526040812090610d8c82826142dd565b5060006001919091015581610da0816153bc565b925050610d5c565b5050565b600160a060020a0381163314610e2d5760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610921565b610da88282611fe1565b600080516020615465833981519152610e508133611d68565b610e58612046565b50565b600080516020615465833981519152610e748133611d68565b50600b55565b600080516020615465833981519152610e938133611d68565b815160005b81811015610ef95760056000858381518110610eb657610eb661541d565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610ef1816153bc565b915050610e98565b50505050565b600080516020615465833981519152610f188133611d68565b50600755565b600080516020615465833981519152610f378133611d68565b610e586120e5565b600080516020615465833981519152610f588133611d68565b50600160a060020a0391821660009081526005602052604090208054600160a060020a03191691909216179055565b610e58610f978260e0015161213e565b610fa083612171565b610fae84610140015161213e565b610fbb8560a0015161213e565b856101800151866101a001516121da565b60015460ff1615610ff25760405160e560020a62461bcd028152600401610921906151bb565b6004545b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561108457600084815260209081902060408051606081018252600386029092018054600160a060020a0390811684526001808301549091168486015260029091015491830191909152908352909201910161102a565b50505050815260200160018201548152505090508060200151600014806110ae5750428160200151115b156110b95750600455565b805160005b81518110156111e6578181815181106110d9576110d961541d565b602002602001015160000151600160a060020a031663a9059cbb8383815181106111055761110561541d565b6020026020010151602001518484815181106111235761112361541d565b6020026020010151604001516040518363ffffffff1660e060020a028152600401611163929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b59190614b7f565b6111d45760405160e560020a62461bcd028152600401610921906151f2565b806111de816153bc565b9150506110be565b5060008381526003602052604081209061120082826142dd565b50600060019190910181905560405184917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a250508080611241906153bc565b915050610ff6565b6000805160206154658339815191526112628133611d68565b50600160a060020a031660009081526005602052604090208054600160a060020a0319169055565b60008083600001516000815181106112a4576112a461541d565b60200260200101518385600001516001815181106112c4576112c461541d565b60200260200101516112d98760200151612263565b8751805160029081106112ee576112ee61541d565b6020026020010151886040015160405160200161130b91906150c0565b60405160208183030381529060405289600001516003815181106113315761133161541d565b602002602001015160405160200161134f9796959493929190614ec3565b6040516020818303038152906040528051906020012090506113778460000151826004611789565b949350505050565b600091825260208281526040808420600160a060020a0393909316845291905290205460ff1690565b6000805160206154658339815191526113c18133611d68565b50600c55565b6000828152602081905260409020600101546113e38133611d68565b6108b88383611fe1565b600160a060020a0380841660009081526005602052604090205416806114585760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e206164647265737300000000000000000000006044820152606401610921565b60075434146114ac5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d206665650000000000000000000000000000006044820152606401610921565b600854604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156114e5573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052600160a060020a038516906323b872dd90606401602060405180830381600087803b15801561154d57600080fd5b505af1158015611561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115859190614b7f565b6115a45760405160e560020a62461bcd028152600401610921906151f2565b60408051606081018252600160a060020a0380841682528581166020830190815282840186815260028054600181018255600091909152935160039094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81018054958516600160a060020a031996871617905591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830180549190941694169390931790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600e54600754915133927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568926116b592909190918252602082015260400190565b60405180910390a2610ef9611ee5565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d76116f08133611d68565b60015460ff16156117165760405160e560020a62461bcd028152600401610921906151bb565b60208083015101516040517f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b90600090a26117588260200151602001516123cb565b60095461176f908390600160a060020a0316611900565b610da8826020015160400151836020015160200151612430565b60006060825b855181101561182f578581815181106117aa576117aa61541d565b602002602001015185878360016117c191906152ee565b815181106117d1576117d161541d565b60200260200101516040516020016117eb93929190614f6e565b604051602081830303815290604052915060208251116118135761180e82615350565b61181b565b815160208301205b94506118286002826152ee565b905061178f565b5092949350505050565b600284106118825760106000611850600287615339565b81526020019081526020016000206000808201600061186f91906142fe565b5060006102008201819055610201909101555b80516000858152601060205260408120905b828110156118dd578381815181106118ae576118ae61541d565b6020026020010151828261020081106118c9576118c961541d565b0155806118d5816153bc565b915050611894565b505050600093845250601060205260409092206102008101919091556102010155565b600061191083602001518361128a565b905060005b835151811015610ef95781846000015182815181106119365761193661541d565b602002602001015160600151146119925760405160e560020a62461bcd02815260206004820152601f60248201527f706172656e7448617368206f722072656365697074486173682077726f6e67006044820152606401610921565b6119b8846000015182815181106119ab576119ab61541d565b60200260200101516124f3565b91506119e0846000015182815181106119d3576119d361541d565b6020026020010151610f87565b806119ea816153bc565b915050611915565b60015460ff1615611a185760405160e560020a62461bcd028152600401610921906151bb565b6004548114611a6c5760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e74000000006044820152606401610921565b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015611afa57600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101611aa0565b50505050815260200160018201548152505090506000816020015111611b655760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e7366657273207769746820746869732069646044820152606401610921565b42816020015110611bbb5760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f74207965742070617373656400000000006044820152606401610921565b805160005b8151811015611ce857818181518110611bdb57611bdb61541d565b602002602001015160000151600160a060020a031663a9059cbb838381518110611c0757611c0761541d565b602002602001015160200151848481518110611c2557611c2561541d565b6020026020010151604001516040518363ffffffff1660e060020a028152600401611c65929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb79190614b7f565b611cd65760405160e560020a62461bcd028152600401610921906151f2565b80611ce0816153bc565b915050611bc0565b50600083815260036020526040812090611d0282826142dd565b50600060019190910181905560405184917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2611d418360016152ee565b600455505050565b600080516020615465833981519152611d628133611d68565b50600a55565b611d72828261137f565b610da857611d8a81600160a060020a031660146125a0565b611d958360206125a0565b604051602001611da692919061503f565b60408051601f198184030181529082905260e560020a62461bcd02825261092191600401615188565b8051825114611e495760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d65006064820152608401610921565b815160005b81811015610ef957828181518110611e6857611e6861541d565b602002602001015160056000868481518110611e8657611e8661541d565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611edd906153bc565b915050611e4e565b6000600b5442611ef59190615306565b9050600f548114610e5857600e8054906000611f10836153bc565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae26002604051611f449190615125565b60405180910390a2611f58600260006142dd565b600f55565b611f67828261137f565b610da857600082815260208181526040808320600160a060020a03851684529091529020805460ff19166001179055611f9d3390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611feb828261137f565b15610da857600082815260208181526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff1661209b5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610921565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60015460ff161561210b5760405160e560020a62461bcd028152600401610921906151bb565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336120c8565b60008151600861214e919061531a565b61215a90610100615339565b61216383615350565b60029190910a900492915050565b60008082602001518360400151846060015185608001518660a001518760c001518860e001518961010001518a61016001516040516020016121bb99989796959493929190614df1565b60408051601f1981840301815291905280516020909101209392505050565b60006121e861753088615306565b905060006121f9878786868661278d565b905061220785600019615306565b8111156122595760405160e560020a62461bcd02815260206004820152601960248201527f45746861736820646966666963756c747920746f6f206c6f77000000000000006044820152606401610921565b5050505050505050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b60208110156122fa578181815181106122ac576122ac61541d565b60209101015160f860020a90819004027fff0000000000000000000000000000000000000000000000000000000000000016156122e8576122fa565b806122f2816153bc565b915050612291565b6000612307826020615339565b67ffffffffffffffff81111561231f5761231f615436565b6040519080825280601f01601f191660200182016040528015612349576020820181803683370190505b50905060005b81518110156123c2578383612363816153bc565b9450815181106123755761237561541d565b602001015160f860020a900460f860020a028282815181106123995761239961541d565b6020010190600160f860020a031916908160001a905350806123ba816153bc565b91505061234f565b50949350505050565b600d600081546123da906153bc565b91829055508114610e585760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f726465720000000000000000000000006044820152606401610921565b600c5461243d90426152ee565b6000828152600360205260408120600101919091555b82518110156108b8576000828152600360205260409020835184908390811061247e5761247e61541d565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a03938416178255938301519481018054909416949091169390931790915560400151600290910155806124eb816153bc565b915050612453565b600081600001518260400151836060015184608001518560a001518660c0015160405160200161252896959493929190614d5f565b60408051601f198184030181529082905260e084015161010085015161012086015161014087015161016088015194956125659590602001614fd4565b60408051601f19818403018152908290526125839291602001614fa5565b604051602081830303815290604052805190602001209050919050565b606060006125af83600261531a565b6125ba9060026152ee565b67ffffffffffffffff8111156125d2576125d2615436565b6040519080825280601f01601f1916602001820160405280156125fc576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106126335761263361541d565b6020010190600160f860020a031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061267e5761267e61541d565b6020010190600160f860020a031916908160001a90535060006126a284600261531a565b6126ad9060016152ee565b90505b6001811115612734577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106126ee576126ee61541d565b1a60f860020a028282815181106127075761270761541d565b6020010190600160f860020a031916908160001a90535060109094049361272d816153a5565b90506126b0565b5083156127865760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610921565b9392505050565b60008061279a8787612a7a565b90506127a461430e565b6127ac61432d565b6000858152601060205260408120610201810154610200909101549091808261281a5760405160e560020a62461bcd02815260206004820152601160248201527f45706f636844617461206e6f74207365740000000000000000000000000000006044820152606401610921565b600091505b601082101561285157602082028781018051918801918252516102009091015281612849816153bc565b92505061281f565b600091505b60408210156129da5786516000908490612892908518896128786020886153d7565b602081106128885761288861541d565b6020020151612b21565b61289c91906153d7565b90506128a88a82612b41565b6128b582858f8f8a612ba6565b146129055760405160e560020a62461bcd02815260206004820152600a60248201527f506f57206661696c6564000000000000000000000000000000000000000000006044820152606401610921565b600091505b60088210156129c757602060808481028e0182810180519386028b01805163ffffffff9586166301000193918202188616825260408401805161010084018051918916918402919091188816905260608501805161020085018051918a169185029190911889169052949095018051610300909301805193881693909202929092189095169094528051640100000000908190049091528251819004909252805182900490528151049052816129bf816153bc565b92505061290a565b50816129d2816153bc565b925050612856565b600091505b6020821015612a5f57612a2c612a20612a14888560208110612a0357612a0361541d565b6020020151896128788760016152ee565b886128788660026152ee565b876128788560036152ee565b85612a38600485615306565b60088110612a4857612a4861541d565b6020020152612a586004836152ee565b91506129df565b612a698786612d81565b9d9c50505050505050505050505050565b612a8261434c565b612a8a61436b565b612a93846130b9565b67ffffffffffffffff811682529350612ab56801000000000000000085615306565b67ffffffffffffffff811660208301529350612ada6801000000000000000085615306565b67ffffffffffffffff811660408301529350612aff6801000000000000000085615306565b67ffffffffffffffff81166060830152608082018490529350611377816130fb565b600081612b3284630100019361531a565b1863ffffffff16905092915050565b6000828152601060205260408120610201810154600290810a840491839183046102008110612b7257612b7261541d565b01549050612b816002836153d7565b612b97576001608060020a0316915061088f9050565b608060020a9004949350505050565b600080612bb38587613410565b6001608060020a03169050600080808080612bcf6002896153d7565b6002909804971190506000612be4888c61531a565b90508115612bf957612bf68b826152ee565b90505b60005b88811015612cf45760208282010260208b01015193508c60011660001415612c32578695506001608060020a0384169450612c42565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965060018d16612c9857869550608060020a84049450612ca5565b608060020a840495508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965080612cec816153bc565b915050612bfc565b8215612d705760208282010260208b01015193508c60011660001415612d28578695506001608060020a0384169450612d38565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206001608060020a031696505b50949b9a5050505050505050505050565b6000808360076020020151612da3906c0100000000000000000000000061531a565b60c0850151612dbb906801000000000000000061531a565b60a0860151612dcf9064010000000061531a565b6080870151612dde91906152ee565b612de891906152ee565b612df291906152ee565b612e0090608060020a61531a565b6060850151612e1c906c0100000000000000000000000061531a565b6040860151612e34906801000000000000000061531a565b6020870151612e489064010000000061531a565b8751612e5491906152ee565b612e5e91906152ee565b612e6891906152ee565b612e7291906152ee565b9050600084600f6020020151612e95906c0100000000000000000000000061531a565b6101c0860151612eae906801000000000000000061531a565b6101a0870151612ec39064010000000061531a565b610180880151612ed391906152ee565b612edd91906152ee565b612ee791906152ee565b612ef590608060020a61531a565b610160860151612f12906c0100000000000000000000000061531a565b610140870151612f2b906801000000000000000061531a565b610120880151612f409064010000000061531a565b610100890151612f5091906152ee565b612f5a91906152ee565b612f6491906152ee565b612f6e91906152ee565b905060008460076020020151612f91906c0100000000000000000000000061531a565b60c0860151612fa9906801000000000000000061531a565b60a0870151612fbd9064010000000061531a565b6080880151612fcc91906152ee565b612fd691906152ee565b612fe091906152ee565b612fee90608060020a61531a565b606086015161300a906c0100000000000000000000000061531a565b6040870151613022906801000000000000000061531a565b60208801516130369064010000000061531a565b885161304291906152ee565b61304c91906152ee565b61305691906152ee565b61306091906152ee565b905061306b836130b9565b613074836130b9565b61307d836130b9565b604080516020810194909452830191909152606082015260800160408051808303601f1901815291905280516020909101209695505050505050565b60008060005b60208110156130f4576130d960ff851661010084026152ee565b610100909404939150806130ec816153bc565b9150506130bf565b5092915050565b61310361434c565b61310f6009600861531a565b6048146131615760405160e560020a62461bcd02815260206004820152600c60248201527f73706f6e6765206572726f7200000000000000000000000000000000000000006044820152606401610921565b600160a083015267800000000000000061010083015260486008600061318860098361531a565b905061319261438a565b600080805b6131a18786615306565b8310156132c457600091505b60058210156132a7575060005b6005811015613295576131cd8688615306565b6131d883600561531a565b6131e290836152ee565b101561328357886131f483600561531a565b8261320086600961531a565b61320a91906152ee565b61321491906152ee565b600981106132245761322461541d565b6020020151848361323684600561531a565b61324091906152ee565b601981106132505761325061541d565b602002015118848361326384600561531a565b61326d91906152ee565b6019811061327d5761327d61541d565b60200201525b8061328d816153bc565b9150506131ba565b8161329f816153bc565b9250506131ad565b6132b084613511565b9350826132bc816153bc565b935050613197565b6132cc61434c565b60005b601081101561340257600093505b60058410156133fd57600092505b60058310156133eb576132fe888a615306565b61330985600561531a565b61331390856152ee565b1080156133205750601081105b156133d957858461333285600561531a565b61333c91906152ee565b6019811061334c5761334c61541d565b602002015163ffffffff168282601081106133695761336961541d565b6020020152640100000000868561338186600561531a565b61338b91906152ee565b6019811061339b5761339b61541d565b60200201516133aa9190615306565b826133b68360016152ee565b601081106133c6576133c661541d565b60200201526133d66002826152ee565b90505b826133e3816153bc565b9350506132eb565b836133f5816153bc565b9450506132dd565b6132cf565b509998505050505050505050565b60008261341e83600461531a565b8151811061342e5761342e61541d565b602002602001015183836004613444919061531a565b61344f9060016152ee565b8151811061345f5761345f61541d565b602002602001015184846004613475919061531a565b6134809060026152ee565b815181106134905761349061541d565b6020026020010151858560046134a6919061531a565b6134b19060036152ee565b815181106134c1576134c161541d565b60200260200101516040516020016134f2949392919093845260208401929092526040830152606082015260800190565b60408051808303601f1901815291905280516020909101209392505050565b61351961438a565b61352161438a565b6135296143a9565b6135316143a9565b600060405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b60188110156142d2576080808801516060808a01516040808c01516020808e01518e511890911890921890931888526101208b01516101008c015160e08d015160c08e015160a08f0151181818189088018190526101c08b01516101a08c01516101808d01516101608e01516101408f015118181818928801929092526102608a01516102408b01516102208c01516102008d01516101e08e015118181818908701526103008901516102e08a01516102c08b01516102a08c01516102808d015118181818918601919091526137369067800000000000000090615306565b602085015161374690600261531a565b608086015167ffffffffffffffff919091169190911718835260408401516137779067800000000000000090615306565b604085015161378790600261531a565b855167ffffffffffffffff919091169190911718602084015260608401516137b89067800000000000000090615306565b60608501516137c890600261531a565b67ffffffffffffffff1617846001602002015118836002602002015267800000000000000084600460200201516137ff9190615306565b608085015161380f90600261531a565b604086015167ffffffffffffffff919091169190911718606084015283516138409067800000000000000090615306565b845161384d90600261531a565b60608087015167ffffffffffffffff929092169290921718608080860191825285518a5118808b52865160208c81018051909218825288516040808f01805190921890915289518e8801805190911890528951948e0180519095189094528801805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291870180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292860180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a0180519091189052908652516139d890631000000090615306565b60208801516139ec9064100000000061531a565b67ffffffffffffffff16176101008601526040870151613a159067200000000000000090615306565b6040880151613a2590600861531a565b67ffffffffffffffff16176101608601526060870151613a49906280000090615306565b6060880151613a5e906502000000000061531a565b67ffffffffffffffff16176102608601526080870151613a85906540000000000090615306565b6080880151613a97906204000061531a565b67ffffffffffffffff16176102c086015260a0870151613ac09067800000000000000090615306565b60a0880151613ad090600261531a565b67ffffffffffffffff1617604086015260c0870151613af3906210000090615306565b60c0880151613b08906510000000000061531a565b67ffffffffffffffff161760a086015260e0870151613b2f90664000000000000090615306565b60e0880151613b409061040061531a565b67ffffffffffffffff16176101a0860152610100870151613b65906208000090615306565b610100880151613b7b906520000000000061531a565b67ffffffffffffffff1617610200860152610120870151613ba59067400000000000000090615306565b610120880151613bb690600461531a565b67ffffffffffffffff1617610300860152610140870151613bd990600490615306565b610140880151613bf19067400000000000000061531a565b67ffffffffffffffff16176080860152610160870151613c1a9067040000000000000090615306565b610160880151613c2b90604061531a565b67ffffffffffffffff161760e0860152610180870151613c4f906220000090615306565b610180880151613c65906508000000000061531a565b67ffffffffffffffff16176101408601526101a0870151613c8e90660200000000000090615306565b6101a0880151613ca09061800061531a565b67ffffffffffffffff16176102408601526101c0870151613cc390600890615306565b6101c0880151613cdb9067200000000000000061531a565b67ffffffffffffffff16176102a08601526101e0870151613d029064100000000090615306565b6101e0880151613d1690631000000061531a565b67ffffffffffffffff1617602086015261020087810151613d379190615306565b610200880151613d4e90668000000000000061531a565b67ffffffffffffffff1617610120860152610220870151613d759064800000000090615306565b610220880151613d8990630200000061531a565b67ffffffffffffffff1617610180860152610240870151613db1906508000000000090615306565b610240880151613dc4906220000061531a565b67ffffffffffffffff16176101e0860152610260870151613de89061010090615306565b610260880151613e009067010000000000000061531a565b67ffffffffffffffff16176102e0860152610280870151613e279064200000000090615306565b610280880151613e3b90630800000061531a565b67ffffffffffffffff161760608601526102a0870151613e62906510000000000090615306565b6102a0880151613e75906210000061531a565b67ffffffffffffffff161760c08601526102c0870151613e9a90630200000090615306565b6102c0880151613eaf9064800000000061531a565b67ffffffffffffffff16176101c08601526102e0870151613ed99067010000000000000090615306565b6102e0880151613eeb9061010061531a565b67ffffffffffffffff1617610220860152610300870151613f1490660400000000000090615306565b610300880151613f269061400061531a565b67ffffffffffffffff1617856014602002015284600a602002015185600560200201511916856000602002015118876000602002015284600b602002015185600660200201511916856001602002015118876001602002015284600c602002015185600760200201511916856002602002015118876002602002015284600d602002015185600860200201511916856003602002015118876003602002015284600e602002015185600960200201511916856004602002015118876004602002015284600f602002015185600a602002015119168560056020020151188760056020020152846010602002015185600b602002015119168560066020020151188760066020020152846011602002015185600c602002015119168560076020020151188760076020020152846012602002015185600d602002015119168560086020020151188760086020020152846013602002015185600e602002015119168560096020020151188760096020020152846014602002015185600f6020020151191685600a60200201511887600a602002015284601560200201518560106020020151191685600b60200201511887600b602002015284601660200201518560116020020151191685600c60200201511887600c602002015284601760200201518560126020020151191685600d60200201511887600d602002015284601860200201518560136020020151191685600e60200201511887600e602002015284600060200201518560146020020151191685600f60200201511887600fb6576142b661541d565b60200201518751188752806142ca816153bc565b915050613657565b509495945050505050565b5080546000825560030290600052602060002090810190610e5891906143c7565b50610e58906102008101906143fe565b6040518061040001604052806020906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b6040518061020001604052806010906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b5b808211156143fa578054600160a060020a031990811682556001820180549091169055600060028201556003016143c8565b5090565b5b808211156143fa57600081556001016143ff565b600082601f83011261442457600080fd5b81356020614439614434836152ca565b615299565b828152818101908583018385028701840188101561445657600080fd5b60005b8581101561447e57813561446c8161544f565b84529284019290840190600101614459565b5090979650505050505050565b600082601f83011261449c57600080fd5b813560206144ac614434836152ca565b82815281810190858301838502870184018810156144c957600080fd5b6000805b8681101561450c57823567ffffffffffffffff8111156144eb578283fd5b6144f98b88838d01016145aa565b86525093850193918501916001016144cd565b509198975050505050505050565b600082601f83011261452b57600080fd5b8135602061453b614434836152ca565b828152818101908583018385028701840188101561455857600080fd5b60005b8581101561447e5781358452928401929084019060010161455b565b80357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811681146145a557600080fd5b919050565b600082601f8301126145bb57600080fd5b813567ffffffffffffffff8111156145d5576145d5615436565b6145e8601f8201601f1916602001615299565b8181528460208386010111156145fd57600080fd5b816020850160208301376000918101602001919091529392505050565b60006101c0828403121561462d57600080fd5b614635615229565b905061464082614577565b815261464e60208301614577565b6020820152604082013567ffffffffffffffff8082111561466e57600080fd5b61467a858386016145aa565b604084015260608401356060840152608084013591508082111561469d57600080fd5b6146a9858386016145aa565b608084015260a08401359150808211156146c257600080fd5b6146ce858386016145aa565b60a084015260c08401359150808211156146e757600080fd5b6146f3858386016145aa565b60c084015260e084013591508082111561470c57600080fd5b614718858386016145aa565b60e08401526101009150818401358181111561473357600080fd5b61473f868287016145aa565b83850152506101209150818401358181111561475a57600080fd5b614766868287016145aa565b83850152506101409150818401358181111561478157600080fd5b61478d868287016145aa565b8385015250610160915081840135818111156147a857600080fd5b6147b4868287016145aa565b8385015250610180915081840135818111156147cf57600080fd5b6147db8682870161451a565b83850152506101a0915081840135818111156147f657600080fd5b6148028682870161451a565b8385015250505092915050565b60006040828403121561482157600080fd5b614829615253565b9050813567ffffffffffffffff8082111561484357600080fd5b818401915084601f83011261485757600080fd5b81356020614867614434836152ca565b82815281810190858301838502870184018a101561488457600080fd5b60005b858110156148bf5781358781111561489e57600080fd5b6148ac8c87838c010161461a565b8552509284019290840190600101614887565b5050865250858101359350828411156148d757600080fd5b6148e3878588016148f1565b818601525050505092915050565b6000606080838503121561490457600080fd5b61490c615276565b9150823567ffffffffffffffff8082111561492657600080fd5b6149328683870161448b565b84526020915081850135828501526040808601358281111561495357600080fd5b86019150601f8201871361496657600080fd5b8135614974614434826152ca565b81815284810190848601878402860187018b101561499157600080fd5b60009550855b848110156149ed5788828d0312156149ad578687fd5b6149b5615276565b82356149c08161544f565b8152828901356149cf8161544f565b818a0152828701358782015284529287019290880190600101614997565b505080848901525050505050505092915050565b600060208284031215614a1357600080fd5b81356127868161544f565b60008060408385031215614a3157600080fd5b8235614a3c8161544f565b91506020830135614a4c8161544f565b809150509250929050565b600080600060608486031215614a6c57600080fd5b8335614a778161544f565b92506020840135614a878161544f565b929592945050506040919091013590565b600060208284031215614aaa57600080fd5b813567ffffffffffffffff811115614ac157600080fd5b61137784828501614413565b60008060408385031215614ae057600080fd5b823567ffffffffffffffff80821115614af857600080fd5b614b0486838701614413565b93506020850135915080821115614b1a57600080fd5b50614b2785828601614413565b9150509250929050565b600080600060608486031215614b4657600080fd5b833567ffffffffffffffff811115614b5d57600080fd5b614b698682870161448b565b9660208601359650604090950135949350505050565b600060208284031215614b9157600080fd5b8151801515811461278657600080fd5b600060208284031215614bb357600080fd5b5035919050565b60008060408385031215614bcd57600080fd5b823591506020830135614a4c8161544f565b600060208284031215614bf157600080fd5b81357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198116811461278657600080fd5b600060208284031215614c3057600080fd5b813567ffffffffffffffff811115614c4757600080fd5b6113778482850161461a565b600060208284031215614c6557600080fd5b813567ffffffffffffffff811115614c7c57600080fd5b6113778482850161480f565b60008060408385031215614c9b57600080fd5b823567ffffffffffffffff811115614cb257600080fd5b614cbe8582860161480f565b9250506020830135614a4c8161544f565b60008060408385031215614ce257600080fd5b823567ffffffffffffffff811115614cf957600080fd5b614cbe858286016148f1565b60008060008060808587031215614d1b57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115614d4757600080fd5b614d538782880161451a565b91505092959194509250565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198716815260008651614d97816003850160208b01615379565b80830190508660038201528551614db5816023840160208a01615379565b8551910190614dcb816023840160208901615379565b8451910190614de1816023840160208801615379565b0160230198975050505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198a168152600089516020614e2a8260038601838f01615379565b81840191508a600383015260238a51614e4881838601858f01615379565b8a51930192614e5c81838601858e01615379565b8951930192614e7081838601858d01615379565b8851930192614e8481838601858c01615379565b8751930192614e9881838601858b01615379565b8651930192614eac81838601858a01615379565b929092019091019c9b505050505050505050505050565b600088516020614ed68285838e01615379565b81840191506c01000000000000000000000000600160a060020a038b1602825260148951614f0981838601858e01615379565b8951930192614f1d81838601858d01615379565b8851930192614f3181838601858c01615379565b8751930192614f4581838601858b01615379565b8651930192614f5981838601858a01615379565b929092019091019a9950505050505050505050565b60008451614f80818460208901615379565b82018481528351614f98816020808501908801615379565b0160200195945050505050565b60008351614fb7818460208801615379565b835190830190614fcb818360208801615379565b01949350505050565b60008651614fe6818460208b01615379565b865190830190614ffa818360208b01615379565b865191019061500d818360208a01615379565b8551910190615020818360208901615379565b8451910190615033818360208801615379565b01979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615077816017850160208801615379565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516150b4816028840160208801615379565b01602801949350505050565b602080825282518282018190526000919060409081850190868401855b828110156151185781518051600160a060020a03908116865287820151168786015285015185850152606090930192908501906001016150dd565b5091979650505050505050565b60006020808301818452808554808352604092508286019150866000528360002060005b82811015615118578154600160a060020a0390811685526001808401549091168786015260028301548686015260609094019360039092019101615149565b60208152600082518060208401526151a7816040850160208701615379565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526013908201527f4661696c207472616e7366657220636f696e7300000000000000000000000000604082015260600190565b6040516101c0810167ffffffffffffffff8111828210171561524d5761524d615436565b60405290565b6040805190810167ffffffffffffffff8111828210171561524d5761524d615436565b6040516060810167ffffffffffffffff8111828210171561524d5761524d615436565b604051601f8201601f1916810167ffffffffffffffff811182821017156152c2576152c2615436565b604052919050565b600067ffffffffffffffff8211156152e4576152e4615436565b5060209081020190565b60008219821115615301576153016153eb565b500190565b60008261531557615315615404565b500490565b6000816000190483118215151615615334576153346153eb565b500290565b60008282101561534b5761534b6153eb565b500390565b80516020808301519190811015615373578060200360080260020a600003821691505b50919050565b60005b8381101561539457818101518382015260200161537c565b83811115610ef95750506000910152565b6000816153b4576153b46153eb565b506000190190565b60006000198214156153d0576153d06153eb565b5060010190565b6000826153e6576153e6615404565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610e5857600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220eab9d48570014a7e88e793b69ea19d799b6897523f639fe9dba0330f60db20d964736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061026b5760003560e060020a900480638ac1f86f11610148578063c7b81f4f116100ba578063e78995361161007e578063e789953614610742578063e88b662614610762578063f33fe10f14610782578063f825dfcc146107a2578063f862b7eb146107c2578063fd5d2ef3146107e257600080fd5b8063c7b81f4f146106a6578063d547741f146106d9578063d9caed12146106f9578063ddca3f431461070c578063e1d862be1461072257600080fd5b806396cf52271161010c57806396cf5227146105f957806399b5bb6414610619578063a217fddf1461062f578063b6d3385e14610644578063ba8bbbe01461067a578063baeebe751461069057600080fd5b80638ac1f86f1461056e5780638e5df9c71461058357806390d0308f146105a357806391d14854146105c3578063924cf6e0146105e357600080fd5b80633f4ba83a116101e15780636a1db1bf116101a55780636a1db1bf1461049f57806375b238fc146104bf5780637df8b802146104e15780638456cb5914610519578063853890ae1461052e5780638888c18a1461054e57600080fd5b80633f4ba83a1461040257806342180fb8146104175780634a1856de146104375780635249a705146104675780635c975abb1461048757600080fd5b806323291c201161023357806323291c201461033f5780632360407114610352578063248a9ca3146103725780632f2ff15d146103a2578063331a891a146103c257806336568abe146103e257600080fd5b806301ffc9a71461027057806304421823146102a557806309fce356146102e75780630d6680871461030957806321d3d5361461031f575b600080fd5b34801561027c57600080fd5b5061029061028b366004614bdf565b610802565b60405190151581526020015b60405180910390f35b3480156102b157600080fd5b506102d97f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b60405190815260200161029c565b3480156102f357600080fd5b50610307610302366004614acd565b610895565b005b34801561031557600080fd5b506102d9600c5481565b34801561032b57600080fd5b5061030761033a366004614a01565b6108bd565b61030761034d366004614a01565b61094d565b34801561035e57600080fd5b5061030761036d366004614a01565b610c11565b34801561037e57600080fd5b506102d961038d366004614ba1565b60009081526020819052604090206001015490565b3480156103ae57600080fd5b506103076103bd366004614bba565b610c4d565b3480156103ce57600080fd5b506103076103dd366004614ba1565b610c73565b3480156103ee57600080fd5b506103076103fd366004614bba565b610dac565b34801561040e57600080fd5b50610307610e37565b34801561042357600080fd5b50610307610432366004614ba1565b610e5b565b34801561044357600080fd5b506102d9610452366004614ba1565b60036020526000908152604090206001015481565b34801561047357600080fd5b50610307610482366004614a98565b610e7a565b34801561049357600080fd5b5060015460ff16610290565b3480156104ab57600080fd5b506103076104ba366004614ba1565b610eff565b3480156104cb57600080fd5b506102d960008051602061546583398151915281565b3480156104ed57600080fd5b5060065461050190600160a060020a031681565b604051600160a060020a03909116815260200161029c565b34801561052557600080fd5b50610307610f1e565b34801561053a57600080fd5b50610307610549366004614a1e565b610f3f565b34801561055a57600080fd5b50610307610569366004614c1e565b610f87565b34801561057a57600080fd5b50610307610fcc565b34801561058f57600080fd5b5061030761059e366004614a01565b611249565b3480156105af57600080fd5b506102d96105be366004614ccf565b61128a565b3480156105cf57600080fd5b506102906105de366004614bba565b61137f565b3480156105ef57600080fd5b506102d9600a5481565b34801561060557600080fd5b50610307610614366004614ba1565b6113a8565b34801561062557600080fd5b506102d9600d5481565b34801561063b57600080fd5b506102d9600081565b34801561065057600080fd5b5061050161065f366004614a01565b600560205260009081526040902054600160a060020a031681565b34801561068657600080fd5b506102d960045481565b34801561069c57600080fd5b506102d9600b5481565b3480156106b257600080fd5b506102906106c1366004614ba1565b60009081526010602052604090206102000154151590565b3480156106e557600080fd5b506103076106f4366004614bba565b6113c7565b610307610707366004614a57565b6113ed565b34801561071857600080fd5b506102d960075481565b34801561072e57600080fd5b5061030761073d366004614c53565b6116c5565b34801561074e57600080fd5b506102d961075d366004614b31565b611789565b34801561076e57600080fd5b5061030761077d366004614d05565b611839565b34801561078e57600080fd5b5060095461050190600160a060020a031681565b3480156107ae57600080fd5b506103076107bd366004614c88565b611900565b3480156107ce57600080fd5b506103076107dd366004614ba1565b6119f2565b3480156107ee57600080fd5b506103076107fd366004614ba1565b611d49565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b00000000000000000000000000000000000000000000000000000000148061088f57507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b6000805160206154658339815191526108ae8133611d68565b6108b88383611dcf565b505050565b60006108c98133611d68565b600954600160a060020a03161561092a5760405160e560020a62461bcd02815260206004820152601d60248201527f736964654272696467654164647265737320616c72656164792073657400000060448201526064015b60405180910390fd5b5060098054600160a060020a031916600160a060020a0392909216919091179055565b600654600160a060020a0390811660009081526005602052604090205416806109bb5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e206164647265737300000000000000000000006044820152606401610921565b6007543411610a355760405160e560020a62461bcd02815260206004820152602260248201527f6d73672e76616c75652063616e2774206265206c6573736572207468616e206660448201527f65650000000000000000000000000000000000000000000000000000000000006064820152608401610921565b600854600754604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015610a71573d6000803e3d6000fd5b50600060075434610a829190615339565b9050600660009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b158015610ad757600080fd5b505af1158015610aeb573d6000803e3d6000fd5b505060408051606081018252600160a060020a0380881682528881166020830190815282840188815260028054600181018255600091909152935160039094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81018054958516600160a060020a031996871617905591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830180549190941694169390931790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600e5460075491513395507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689450610c019350909190918252602082015260400190565b60405180910390a26108b8611ee5565b600080516020615465833981519152610c2a8133611d68565b5060088054600160a060020a031916600160a060020a0392909216919091179055565b600082815260208190526040902060010154610c698133611d68565b6108b88383611f5d565b600080516020615465833981519152610c8c8133611d68565b60015460ff16610ce15760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610921565b600454821015610d5c5760405160e560020a62461bcd02815260206004820152602760248201527f6576656e745f6964206d757374206265203e3d206f6c646573744c6f636b656460448201527f4576656e744964000000000000000000000000000000000000000000000000006064820152608401610921565b60008281526003602052604090206001015415610da857600082815260036020526040812090610d8c82826142dd565b5060006001919091015581610da0816153bc565b925050610d5c565b5050565b600160a060020a0381163314610e2d5760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610921565b610da88282611fe1565b600080516020615465833981519152610e508133611d68565b610e58612046565b50565b600080516020615465833981519152610e748133611d68565b50600b55565b600080516020615465833981519152610e938133611d68565b815160005b81811015610ef95760056000858381518110610eb657610eb661541d565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610ef1816153bc565b915050610e98565b50505050565b600080516020615465833981519152610f188133611d68565b50600755565b600080516020615465833981519152610f378133611d68565b610e586120e5565b600080516020615465833981519152610f588133611d68565b50600160a060020a0391821660009081526005602052604090208054600160a060020a03191691909216179055565b610e58610f978260e0015161213e565b610fa083612171565b610fae84610140015161213e565b610fbb8560a0015161213e565b856101800151866101a001516121da565b60015460ff1615610ff25760405160e560020a62461bcd028152600401610921906151bb565b6004545b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561108457600084815260209081902060408051606081018252600386029092018054600160a060020a0390811684526001808301549091168486015260029091015491830191909152908352909201910161102a565b50505050815260200160018201548152505090508060200151600014806110ae5750428160200151115b156110b95750600455565b805160005b81518110156111e6578181815181106110d9576110d961541d565b602002602001015160000151600160a060020a031663a9059cbb8383815181106111055761110561541d565b6020026020010151602001518484815181106111235761112361541d565b6020026020010151604001516040518363ffffffff1660e060020a028152600401611163929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b59190614b7f565b6111d45760405160e560020a62461bcd028152600401610921906151f2565b806111de816153bc565b9150506110be565b5060008381526003602052604081209061120082826142dd565b50600060019190910181905560405184917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a250508080611241906153bc565b915050610ff6565b6000805160206154658339815191526112628133611d68565b50600160a060020a031660009081526005602052604090208054600160a060020a0319169055565b60008083600001516000815181106112a4576112a461541d565b60200260200101518385600001516001815181106112c4576112c461541d565b60200260200101516112d98760200151612263565b8751805160029081106112ee576112ee61541d565b6020026020010151886040015160405160200161130b91906150c0565b60405160208183030381529060405289600001516003815181106113315761133161541d565b602002602001015160405160200161134f9796959493929190614ec3565b6040516020818303038152906040528051906020012090506113778460000151826004611789565b949350505050565b600091825260208281526040808420600160a060020a0393909316845291905290205460ff1690565b6000805160206154658339815191526113c18133611d68565b50600c55565b6000828152602081905260409020600101546113e38133611d68565b6108b88383611fe1565b600160a060020a0380841660009081526005602052604090205416806114585760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e206164647265737300000000000000000000006044820152606401610921565b60075434146114ac5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d206665650000000000000000000000000000006044820152606401610921565b600854604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156114e5573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101839052600160a060020a038516906323b872dd90606401602060405180830381600087803b15801561154d57600080fd5b505af1158015611561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115859190614b7f565b6115a45760405160e560020a62461bcd028152600401610921906151f2565b60408051606081018252600160a060020a0380841682528581166020830190815282840186815260028054600181018255600091909152935160039094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81018054958516600160a060020a031996871617905591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830180549190941694169390931790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600e54600754915133927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568926116b592909190918252602082015260400190565b60405180910390a2610ef9611ee5565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d76116f08133611d68565b60015460ff16156117165760405160e560020a62461bcd028152600401610921906151bb565b60208083015101516040517f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b90600090a26117588260200151602001516123cb565b60095461176f908390600160a060020a0316611900565b610da8826020015160400151836020015160200151612430565b60006060825b855181101561182f578581815181106117aa576117aa61541d565b602002602001015185878360016117c191906152ee565b815181106117d1576117d161541d565b60200260200101516040516020016117eb93929190614f6e565b604051602081830303815290604052915060208251116118135761180e82615350565b61181b565b815160208301205b94506118286002826152ee565b905061178f565b5092949350505050565b600284106118825760106000611850600287615339565b81526020019081526020016000206000808201600061186f91906142fe565b5060006102008201819055610201909101555b80516000858152601060205260408120905b828110156118dd578381815181106118ae576118ae61541d565b6020026020010151828261020081106118c9576118c961541d565b0155806118d5816153bc565b915050611894565b505050600093845250601060205260409092206102008101919091556102010155565b600061191083602001518361128a565b905060005b835151811015610ef95781846000015182815181106119365761193661541d565b602002602001015160600151146119925760405160e560020a62461bcd02815260206004820152601f60248201527f706172656e7448617368206f722072656365697074486173682077726f6e67006044820152606401610921565b6119b8846000015182815181106119ab576119ab61541d565b60200260200101516124f3565b91506119e0846000015182815181106119d3576119d361541d565b6020026020010151610f87565b806119ea816153bc565b915050611915565b60015460ff1615611a185760405160e560020a62461bcd028152600401610921906151bb565b6004548114611a6c5760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e74000000006044820152606401610921565b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015611afa57600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101611aa0565b50505050815260200160018201548152505090506000816020015111611b655760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e7366657273207769746820746869732069646044820152606401610921565b42816020015110611bbb5760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f74207965742070617373656400000000006044820152606401610921565b805160005b8151811015611ce857818181518110611bdb57611bdb61541d565b602002602001015160000151600160a060020a031663a9059cbb838381518110611c0757611c0761541d565b602002602001015160200151848481518110611c2557611c2561541d565b6020026020010151604001516040518363ffffffff1660e060020a028152600401611c65929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b158015611c7f57600080fd5b505af1158015611c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb79190614b7f565b611cd65760405160e560020a62461bcd028152600401610921906151f2565b80611ce0816153bc565b915050611bc0565b50600083815260036020526040812090611d0282826142dd565b50600060019190910181905560405184917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2611d418360016152ee565b600455505050565b600080516020615465833981519152611d628133611d68565b50600a55565b611d72828261137f565b610da857611d8a81600160a060020a031660146125a0565b611d958360206125a0565b604051602001611da692919061503f565b60408051601f198184030181529082905260e560020a62461bcd02825261092191600401615188565b8051825114611e495760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d65006064820152608401610921565b815160005b81811015610ef957828181518110611e6857611e6861541d565b602002602001015160056000868481518110611e8657611e8661541d565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611edd906153bc565b915050611e4e565b6000600b5442611ef59190615306565b9050600f548114610e5857600e8054906000611f10836153bc565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae26002604051611f449190615125565b60405180910390a2611f58600260006142dd565b600f55565b611f67828261137f565b610da857600082815260208181526040808320600160a060020a03851684529091529020805460ff19166001179055611f9d3390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611feb828261137f565b15610da857600082815260208181526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff1661209b5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610921565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60015460ff161561210b5760405160e560020a62461bcd028152600401610921906151bb565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336120c8565b60008151600861214e919061531a565b61215a90610100615339565b61216383615350565b60029190910a900492915050565b60008082602001518360400151846060015185608001518660a001518760c001518860e001518961010001518a61016001516040516020016121bb99989796959493929190614df1565b60408051601f1981840301815291905280516020909101209392505050565b60006121e861753088615306565b905060006121f9878786868661278d565b905061220785600019615306565b8111156122595760405160e560020a62461bcd02815260206004820152601960248201527f45746861736820646966666963756c747920746f6f206c6f77000000000000006044820152606401610921565b5050505050505050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b60208110156122fa578181815181106122ac576122ac61541d565b60209101015160f860020a90819004027fff0000000000000000000000000000000000000000000000000000000000000016156122e8576122fa565b806122f2816153bc565b915050612291565b6000612307826020615339565b67ffffffffffffffff81111561231f5761231f615436565b6040519080825280601f01601f191660200182016040528015612349576020820181803683370190505b50905060005b81518110156123c2578383612363816153bc565b9450815181106123755761237561541d565b602001015160f860020a900460f860020a028282815181106123995761239961541d565b6020010190600160f860020a031916908160001a905350806123ba816153bc565b91505061234f565b50949350505050565b600d600081546123da906153bc565b91829055508114610e585760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f726465720000000000000000000000006044820152606401610921565b600c5461243d90426152ee565b6000828152600360205260408120600101919091555b82518110156108b8576000828152600360205260409020835184908390811061247e5761247e61541d565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a03938416178255938301519481018054909416949091169390931790915560400151600290910155806124eb816153bc565b915050612453565b600081600001518260400151836060015184608001518560a001518660c0015160405160200161252896959493929190614d5f565b60408051601f198184030181529082905260e084015161010085015161012086015161014087015161016088015194956125659590602001614fd4565b60408051601f19818403018152908290526125839291602001614fa5565b604051602081830303815290604052805190602001209050919050565b606060006125af83600261531a565b6125ba9060026152ee565b67ffffffffffffffff8111156125d2576125d2615436565b6040519080825280601f01601f1916602001820160405280156125fc576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106126335761263361541d565b6020010190600160f860020a031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061267e5761267e61541d565b6020010190600160f860020a031916908160001a90535060006126a284600261531a565b6126ad9060016152ee565b90505b6001811115612734577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106126ee576126ee61541d565b1a60f860020a028282815181106127075761270761541d565b6020010190600160f860020a031916908160001a90535060109094049361272d816153a5565b90506126b0565b5083156127865760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610921565b9392505050565b60008061279a8787612a7a565b90506127a461430e565b6127ac61432d565b6000858152601060205260408120610201810154610200909101549091808261281a5760405160e560020a62461bcd02815260206004820152601160248201527f45706f636844617461206e6f74207365740000000000000000000000000000006044820152606401610921565b600091505b601082101561285157602082028781018051918801918252516102009091015281612849816153bc565b92505061281f565b600091505b60408210156129da5786516000908490612892908518896128786020886153d7565b602081106128885761288861541d565b6020020151612b21565b61289c91906153d7565b90506128a88a82612b41565b6128b582858f8f8a612ba6565b146129055760405160e560020a62461bcd02815260206004820152600a60248201527f506f57206661696c6564000000000000000000000000000000000000000000006044820152606401610921565b600091505b60088210156129c757602060808481028e0182810180519386028b01805163ffffffff9586166301000193918202188616825260408401805161010084018051918916918402919091188816905260608501805161020085018051918a169185029190911889169052949095018051610300909301805193881693909202929092189095169094528051640100000000908190049091528251819004909252805182900490528151049052816129bf816153bc565b92505061290a565b50816129d2816153bc565b925050612856565b600091505b6020821015612a5f57612a2c612a20612a14888560208110612a0357612a0361541d565b6020020151896128788760016152ee565b886128788660026152ee565b876128788560036152ee565b85612a38600485615306565b60088110612a4857612a4861541d565b6020020152612a586004836152ee565b91506129df565b612a698786612d81565b9d9c50505050505050505050505050565b612a8261434c565b612a8a61436b565b612a93846130b9565b67ffffffffffffffff811682529350612ab56801000000000000000085615306565b67ffffffffffffffff811660208301529350612ada6801000000000000000085615306565b67ffffffffffffffff811660408301529350612aff6801000000000000000085615306565b67ffffffffffffffff81166060830152608082018490529350611377816130fb565b600081612b3284630100019361531a565b1863ffffffff16905092915050565b6000828152601060205260408120610201810154600290810a840491839183046102008110612b7257612b7261541d565b01549050612b816002836153d7565b612b97576001608060020a0316915061088f9050565b608060020a9004949350505050565b600080612bb38587613410565b6001608060020a03169050600080808080612bcf6002896153d7565b6002909804971190506000612be4888c61531a565b90508115612bf957612bf68b826152ee565b90505b60005b88811015612cf45760208282010260208b01015193508c60011660001415612c32578695506001608060020a0384169450612c42565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965060018d16612c9857869550608060020a84049450612ca5565b608060020a840495508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965080612cec816153bc565b915050612bfc565b8215612d705760208282010260208b01015193508c60011660001415612d28578695506001608060020a0384169450612d38565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206001608060020a031696505b50949b9a5050505050505050505050565b6000808360076020020151612da3906c0100000000000000000000000061531a565b60c0850151612dbb906801000000000000000061531a565b60a0860151612dcf9064010000000061531a565b6080870151612dde91906152ee565b612de891906152ee565b612df291906152ee565b612e0090608060020a61531a565b6060850151612e1c906c0100000000000000000000000061531a565b6040860151612e34906801000000000000000061531a565b6020870151612e489064010000000061531a565b8751612e5491906152ee565b612e5e91906152ee565b612e6891906152ee565b612e7291906152ee565b9050600084600f6020020151612e95906c0100000000000000000000000061531a565b6101c0860151612eae906801000000000000000061531a565b6101a0870151612ec39064010000000061531a565b610180880151612ed391906152ee565b612edd91906152ee565b612ee791906152ee565b612ef590608060020a61531a565b610160860151612f12906c0100000000000000000000000061531a565b610140870151612f2b906801000000000000000061531a565b610120880151612f409064010000000061531a565b610100890151612f5091906152ee565b612f5a91906152ee565b612f6491906152ee565b612f6e91906152ee565b905060008460076020020151612f91906c0100000000000000000000000061531a565b60c0860151612fa9906801000000000000000061531a565b60a0870151612fbd9064010000000061531a565b6080880151612fcc91906152ee565b612fd691906152ee565b612fe091906152ee565b612fee90608060020a61531a565b606086015161300a906c0100000000000000000000000061531a565b6040870151613022906801000000000000000061531a565b60208801516130369064010000000061531a565b885161304291906152ee565b61304c91906152ee565b61305691906152ee565b61306091906152ee565b905061306b836130b9565b613074836130b9565b61307d836130b9565b604080516020810194909452830191909152606082015260800160408051808303601f1901815291905280516020909101209695505050505050565b60008060005b60208110156130f4576130d960ff851661010084026152ee565b610100909404939150806130ec816153bc565b9150506130bf565b5092915050565b61310361434c565b61310f6009600861531a565b6048146131615760405160e560020a62461bcd02815260206004820152600c60248201527f73706f6e6765206572726f7200000000000000000000000000000000000000006044820152606401610921565b600160a083015267800000000000000061010083015260486008600061318860098361531a565b905061319261438a565b600080805b6131a18786615306565b8310156132c457600091505b60058210156132a7575060005b6005811015613295576131cd8688615306565b6131d883600561531a565b6131e290836152ee565b101561328357886131f483600561531a565b8261320086600961531a565b61320a91906152ee565b61321491906152ee565b600981106132245761322461541d565b6020020151848361323684600561531a565b61324091906152ee565b601981106132505761325061541d565b602002015118848361326384600561531a565b61326d91906152ee565b6019811061327d5761327d61541d565b60200201525b8061328d816153bc565b9150506131ba565b8161329f816153bc565b9250506131ad565b6132b084613511565b9350826132bc816153bc565b935050613197565b6132cc61434c565b60005b601081101561340257600093505b60058410156133fd57600092505b60058310156133eb576132fe888a615306565b61330985600561531a565b61331390856152ee565b1080156133205750601081105b156133d957858461333285600561531a565b61333c91906152ee565b6019811061334c5761334c61541d565b602002015163ffffffff168282601081106133695761336961541d565b6020020152640100000000868561338186600561531a565b61338b91906152ee565b6019811061339b5761339b61541d565b60200201516133aa9190615306565b826133b68360016152ee565b601081106133c6576133c661541d565b60200201526133d66002826152ee565b90505b826133e3816153bc565b9350506132eb565b836133f5816153bc565b9450506132dd565b6132cf565b509998505050505050505050565b60008261341e83600461531a565b8151811061342e5761342e61541d565b602002602001015183836004613444919061531a565b61344f9060016152ee565b8151811061345f5761345f61541d565b602002602001015184846004613475919061531a565b6134809060026152ee565b815181106134905761349061541d565b6020026020010151858560046134a6919061531a565b6134b19060036152ee565b815181106134c1576134c161541d565b60200260200101516040516020016134f2949392919093845260208401929092526040830152606082015260800190565b60408051808303601f1901815291905280516020909101209392505050565b61351961438a565b61352161438a565b6135296143a9565b6135316143a9565b600060405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b60188110156142d2576080808801516060808a01516040808c01516020808e01518e511890911890921890931888526101208b01516101008c015160e08d015160c08e015160a08f0151181818189088018190526101c08b01516101a08c01516101808d01516101608e01516101408f015118181818928801929092526102608a01516102408b01516102208c01516102008d01516101e08e015118181818908701526103008901516102e08a01516102c08b01516102a08c01516102808d015118181818918601919091526137369067800000000000000090615306565b602085015161374690600261531a565b608086015167ffffffffffffffff919091169190911718835260408401516137779067800000000000000090615306565b604085015161378790600261531a565b855167ffffffffffffffff919091169190911718602084015260608401516137b89067800000000000000090615306565b60608501516137c890600261531a565b67ffffffffffffffff1617846001602002015118836002602002015267800000000000000084600460200201516137ff9190615306565b608085015161380f90600261531a565b604086015167ffffffffffffffff919091169190911718606084015283516138409067800000000000000090615306565b845161384d90600261531a565b60608087015167ffffffffffffffff929092169290921718608080860191825285518a5118808b52865160208c81018051909218825288516040808f01805190921890915289518e8801805190911890528951948e0180519095189094528801805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291870180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292860180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a0180519091189052908652516139d890631000000090615306565b60208801516139ec9064100000000061531a565b67ffffffffffffffff16176101008601526040870151613a159067200000000000000090615306565b6040880151613a2590600861531a565b67ffffffffffffffff16176101608601526060870151613a49906280000090615306565b6060880151613a5e906502000000000061531a565b67ffffffffffffffff16176102608601526080870151613a85906540000000000090615306565b6080880151613a97906204000061531a565b67ffffffffffffffff16176102c086015260a0870151613ac09067800000000000000090615306565b60a0880151613ad090600261531a565b67ffffffffffffffff1617604086015260c0870151613af3906210000090615306565b60c0880151613b08906510000000000061531a565b67ffffffffffffffff161760a086015260e0870151613b2f90664000000000000090615306565b60e0880151613b409061040061531a565b67ffffffffffffffff16176101a0860152610100870151613b65906208000090615306565b610100880151613b7b906520000000000061531a565b67ffffffffffffffff1617610200860152610120870151613ba59067400000000000000090615306565b610120880151613bb690600461531a565b67ffffffffffffffff1617610300860152610140870151613bd990600490615306565b610140880151613bf19067400000000000000061531a565b67ffffffffffffffff16176080860152610160870151613c1a9067040000000000000090615306565b610160880151613c2b90604061531a565b67ffffffffffffffff161760e0860152610180870151613c4f906220000090615306565b610180880151613c65906508000000000061531a565b67ffffffffffffffff16176101408601526101a0870151613c8e90660200000000000090615306565b6101a0880151613ca09061800061531a565b67ffffffffffffffff16176102408601526101c0870151613cc390600890615306565b6101c0880151613cdb9067200000000000000061531a565b67ffffffffffffffff16176102a08601526101e0870151613d029064100000000090615306565b6101e0880151613d1690631000000061531a565b67ffffffffffffffff1617602086015261020087810151613d379190615306565b610200880151613d4e90668000000000000061531a565b67ffffffffffffffff1617610120860152610220870151613d759064800000000090615306565b610220880151613d8990630200000061531a565b67ffffffffffffffff1617610180860152610240870151613db1906508000000000090615306565b610240880151613dc4906220000061531a565b67ffffffffffffffff16176101e0860152610260870151613de89061010090615306565b610260880151613e009067010000000000000061531a565b67ffffffffffffffff16176102e0860152610280870151613e279064200000000090615306565b610280880151613e3b90630800000061531a565b67ffffffffffffffff161760608601526102a0870151613e62906510000000000090615306565b6102a0880151613e75906210000061531a565b67ffffffffffffffff161760c08601526102c0870151613e9a90630200000090615306565b6102c0880151613eaf9064800000000061531a565b67ffffffffffffffff16176101c08601526102e0870151613ed99067010000000000000090615306565b6102e0880151613eeb9061010061531a565b67ffffffffffffffff1617610220860152610300870151613f1490660400000000000090615306565b610300880151613f269061400061531a565b67ffffffffffffffff1617856014602002015284600a602002015185600560200201511916856000602002015118876000602002015284600b602002015185600660200201511916856001602002015118876001602002015284600c602002015185600760200201511916856002602002015118876002602002015284600d602002015185600860200201511916856003602002015118876003602002015284600e602002015185600960200201511916856004602002015118876004602002015284600f602002015185600a602002015119168560056020020151188760056020020152846010602002015185600b602002015119168560066020020151188760066020020152846011602002015185600c602002015119168560076020020151188760076020020152846012602002015185600d602002015119168560086020020151188760086020020152846013602002015185600e602002015119168560096020020151188760096020020152846014602002015185600f6020020151191685600a60200201511887600a602002015284601560200201518560106020020151191685600b60200201511887600b602002015284601660200201518560116020020151191685600c60200201511887600c602002015284601760200201518560126020020151191685600d60200201511887600d602002015284601860200201518560136020020151191685600e60200201511887600e602002015284600060200201518560146020020151191685600f60200201511887600fb6576142b661541d565b60200201518751188752806142ca816153bc565b915050613657565b509495945050505050565b5080546000825560030290600052602060002090810190610e5891906143c7565b50610e58906102008101906143fe565b6040518061040001604052806020906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b6040518061020001604052806010906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b5b808211156143fa578054600160a060020a031990811682556001820180549091169055600060028201556003016143c8565b5090565b5b808211156143fa57600081556001016143ff565b600082601f83011261442457600080fd5b81356020614439614434836152ca565b615299565b828152818101908583018385028701840188101561445657600080fd5b60005b8581101561447e57813561446c8161544f565b84529284019290840190600101614459565b5090979650505050505050565b600082601f83011261449c57600080fd5b813560206144ac614434836152ca565b82815281810190858301838502870184018810156144c957600080fd5b6000805b8681101561450c57823567ffffffffffffffff8111156144eb578283fd5b6144f98b88838d01016145aa565b86525093850193918501916001016144cd565b509198975050505050505050565b600082601f83011261452b57600080fd5b8135602061453b614434836152ca565b828152818101908583018385028701840188101561455857600080fd5b60005b8581101561447e5781358452928401929084019060010161455b565b80357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811681146145a557600080fd5b919050565b600082601f8301126145bb57600080fd5b813567ffffffffffffffff8111156145d5576145d5615436565b6145e8601f8201601f1916602001615299565b8181528460208386010111156145fd57600080fd5b816020850160208301376000918101602001919091529392505050565b60006101c0828403121561462d57600080fd5b614635615229565b905061464082614577565b815261464e60208301614577565b6020820152604082013567ffffffffffffffff8082111561466e57600080fd5b61467a858386016145aa565b604084015260608401356060840152608084013591508082111561469d57600080fd5b6146a9858386016145aa565b608084015260a08401359150808211156146c257600080fd5b6146ce858386016145aa565b60a084015260c08401359150808211156146e757600080fd5b6146f3858386016145aa565b60c084015260e084013591508082111561470c57600080fd5b614718858386016145aa565b60e08401526101009150818401358181111561473357600080fd5b61473f868287016145aa565b83850152506101209150818401358181111561475a57600080fd5b614766868287016145aa565b83850152506101409150818401358181111561478157600080fd5b61478d868287016145aa565b8385015250610160915081840135818111156147a857600080fd5b6147b4868287016145aa565b8385015250610180915081840135818111156147cf57600080fd5b6147db8682870161451a565b83850152506101a0915081840135818111156147f657600080fd5b6148028682870161451a565b8385015250505092915050565b60006040828403121561482157600080fd5b614829615253565b9050813567ffffffffffffffff8082111561484357600080fd5b818401915084601f83011261485757600080fd5b81356020614867614434836152ca565b82815281810190858301838502870184018a101561488457600080fd5b60005b858110156148bf5781358781111561489e57600080fd5b6148ac8c87838c010161461a565b8552509284019290840190600101614887565b5050865250858101359350828411156148d757600080fd5b6148e3878588016148f1565b818601525050505092915050565b6000606080838503121561490457600080fd5b61490c615276565b9150823567ffffffffffffffff8082111561492657600080fd5b6149328683870161448b565b84526020915081850135828501526040808601358281111561495357600080fd5b86019150601f8201871361496657600080fd5b8135614974614434826152ca565b81815284810190848601878402860187018b101561499157600080fd5b60009550855b848110156149ed5788828d0312156149ad578687fd5b6149b5615276565b82356149c08161544f565b8152828901356149cf8161544f565b818a0152828701358782015284529287019290880190600101614997565b505080848901525050505050505092915050565b600060208284031215614a1357600080fd5b81356127868161544f565b60008060408385031215614a3157600080fd5b8235614a3c8161544f565b91506020830135614a4c8161544f565b809150509250929050565b600080600060608486031215614a6c57600080fd5b8335614a778161544f565b92506020840135614a878161544f565b929592945050506040919091013590565b600060208284031215614aaa57600080fd5b813567ffffffffffffffff811115614ac157600080fd5b61137784828501614413565b60008060408385031215614ae057600080fd5b823567ffffffffffffffff80821115614af857600080fd5b614b0486838701614413565b93506020850135915080821115614b1a57600080fd5b50614b2785828601614413565b9150509250929050565b600080600060608486031215614b4657600080fd5b833567ffffffffffffffff811115614b5d57600080fd5b614b698682870161448b565b9660208601359650604090950135949350505050565b600060208284031215614b9157600080fd5b8151801515811461278657600080fd5b600060208284031215614bb357600080fd5b5035919050565b60008060408385031215614bcd57600080fd5b823591506020830135614a4c8161544f565b600060208284031215614bf157600080fd5b81357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198116811461278657600080fd5b600060208284031215614c3057600080fd5b813567ffffffffffffffff811115614c4757600080fd5b6113778482850161461a565b600060208284031215614c6557600080fd5b813567ffffffffffffffff811115614c7c57600080fd5b6113778482850161480f565b60008060408385031215614c9b57600080fd5b823567ffffffffffffffff811115614cb257600080fd5b614cbe8582860161480f565b9250506020830135614a4c8161544f565b60008060408385031215614ce257600080fd5b823567ffffffffffffffff811115614cf957600080fd5b614cbe858286016148f1565b60008060008060808587031215614d1b57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115614d4757600080fd5b614d538782880161451a565b91505092959194509250565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198716815260008651614d97816003850160208b01615379565b80830190508660038201528551614db5816023840160208a01615379565b8551910190614dcb816023840160208901615379565b8451910190614de1816023840160208801615379565b0160230198975050505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198a168152600089516020614e2a8260038601838f01615379565b81840191508a600383015260238a51614e4881838601858f01615379565b8a51930192614e5c81838601858e01615379565b8951930192614e7081838601858d01615379565b8851930192614e8481838601858c01615379565b8751930192614e9881838601858b01615379565b8651930192614eac81838601858a01615379565b929092019091019c9b505050505050505050505050565b600088516020614ed68285838e01615379565b81840191506c01000000000000000000000000600160a060020a038b1602825260148951614f0981838601858e01615379565b8951930192614f1d81838601858d01615379565b8851930192614f3181838601858c01615379565b8751930192614f4581838601858b01615379565b8651930192614f5981838601858a01615379565b929092019091019a9950505050505050505050565b60008451614f80818460208901615379565b82018481528351614f98816020808501908801615379565b0160200195945050505050565b60008351614fb7818460208801615379565b835190830190614fcb818360208801615379565b01949350505050565b60008651614fe6818460208b01615379565b865190830190614ffa818360208b01615379565b865191019061500d818360208a01615379565b8551910190615020818360208901615379565b8451910190615033818360208801615379565b01979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615077816017850160208801615379565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516150b4816028840160208801615379565b01602801949350505050565b602080825282518282018190526000919060409081850190868401855b828110156151185781518051600160a060020a03908116865287820151168786015285015185850152606090930192908501906001016150dd565b5091979650505050505050565b60006020808301818452808554808352604092508286019150866000528360002060005b82811015615118578154600160a060020a0390811685526001808401549091168786015260028301548686015260609094019360039092019101615149565b60208152600082518060208401526151a7816040850160208701615379565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208082526013908201527f4661696c207472616e7366657220636f696e7300000000000000000000000000604082015260600190565b6040516101c0810167ffffffffffffffff8111828210171561524d5761524d615436565b60405290565b6040805190810167ffffffffffffffff8111828210171561524d5761524d615436565b6040516060810167ffffffffffffffff8111828210171561524d5761524d615436565b604051601f8201601f1916810167ffffffffffffffff811182821017156152c2576152c2615436565b604052919050565b600067ffffffffffffffff8211156152e4576152e4615436565b5060209081020190565b60008219821115615301576153016153eb565b500190565b60008261531557615315615404565b500490565b6000816000190483118215151615615334576153346153eb565b500290565b60008282101561534b5761534b6153eb565b500390565b80516020808301519190811015615373578060200360080260020a600003821691505b50919050565b60005b8381101561539457818101518382015260200161537c565b83811115610ef95750506000910152565b6000816153b4576153b46153eb565b506000190190565b60006000198214156153d0576153d06153eb565b5060010190565b6000826153e6576153e6615404565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610e5857600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220eab9d48570014a7e88e793b69ea19d799b6897523f639fe9dba0330f60db20d964736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 397,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5466,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "queue",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Transfer)6266_storage)dyn_storage"
      },
      {
        "astId": 5471,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "lockedTransfers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LockedTransfers)6283_storage)"
      },
      {
        "astId": 5473,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "oldestLockedEventId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5477,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5479,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5481,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "fee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5483,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "8",
        "type": "t_address_payable"
      },
      {
        "astId": 5485,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "sideBridgeAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5487,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "minSafetyBlocks",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5489,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "timeframeSeconds",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5491,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "lockTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5493,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "inputEventId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5496,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "outputEventId",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5498,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "lastTimeframe",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4231,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "epochData",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(EthashCacheOptData)4226_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Transfer)6266_storage)dyn_storage": {
        "base": "t_struct(Transfer)6266_storage",
        "encoding": "dynamic_array",
        "label": "struct CommonStructs.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)512_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[512]",
        "numberOfBytes": "16384"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(EthashCacheOptData)4226_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ethash.EthashCacheOptData)",
        "numberOfBytes": "32",
        "value": "t_struct(EthashCacheOptData)4226_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedTransfers)6283_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonStructs.LockedTransfers)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedTransfers)6283_storage"
      },
      "t_struct(EthashCacheOptData)4226_storage": {
        "encoding": "inplace",
        "label": "struct Ethash.EthashCacheOptData",
        "members": [
          {
            "astId": 4221,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "merkleNodes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)512_storage"
          },
          {
            "astId": 4223,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "fullSizeIn128Resultion",
            "offset": 0,
            "slot": "512",
            "type": "t_uint256"
          },
          {
            "astId": 4225,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "branchDepth",
            "offset": 0,
            "slot": "513",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "16448"
      },
      "t_struct(LockedTransfers)6283_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.LockedTransfers",
        "members": [
          {
            "astId": 6280,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "transfers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transfer)6266_storage)dyn_storage"
          },
          {
            "astId": 6282,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transfer)6266_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.Transfer",
        "members": [
          {
            "astId": 6261,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6263,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6265,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}