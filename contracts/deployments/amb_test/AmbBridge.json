{
  "address": "0x52Ad187140b725dfFb49FF3f1f62A9650ab8aCB1",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sideBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokenThisAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokenSideAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeframeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSafetyBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.ConstructorArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "ambWrapper_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "queue",
          "type": "tuple[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "TransferFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "TransferSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "proof",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes32",
          "name": "el",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "proofStart",
          "type": "uint256"
        }
      ],
      "name": "CalcReceiptsHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes[]",
              "name": "receipt_proof",
              "type": "bytes[]"
            },
            {
              "internalType": "uint256",
              "name": "event_id",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonStructs.Transfer[]",
              "name": "transfers",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct CommonStructs.TransferProof",
          "name": "p",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "eventContractAddress",
          "type": "address"
        }
      ],
      "name": "CalcTransferReceiptsHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "p0WithNonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p0WithoutNonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p1",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentOrReceiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "difficulty",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "number",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p4",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p5",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "nonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p6",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256[]",
                  "name": "dataSetLookup",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "witnessForLookup",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct CheckPoW.BlockPoW[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receipt_proof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "event_id",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            }
          ],
          "internalType": "struct CheckPoW.PoWProof",
          "name": "powProof",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "sideBridgeAddress",
          "type": "address"
        }
      ],
      "name": "CheckPoW_",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockTime_",
          "type": "uint256"
        }
      ],
      "name": "changeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSafetyBlocks_",
          "type": "uint256"
        }
      ],
      "name": "changeMinSafetyBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframeSeconds_",
          "type": "uint256"
        }
      ],
      "name": "changeTimeframeSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochIndex",
          "type": "uint256"
        }
      ],
      "name": "isEpochDataSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSafetyBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestLockedEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "removeLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wrapper",
          "type": "address"
        }
      ],
      "name": "setAmbWrapper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fullSizeIn128Resultion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "branchDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "merkleNodes",
          "type": "uint256[]"
        }
      ],
      "name": "setEpochData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sideBridgeAddress",
          "type": "address"
        }
      ],
      "name": "setSideBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes",
                  "name": "p0WithNonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p0WithoutNonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p1",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentOrReceiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "difficulty",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "number",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p4",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p5",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "nonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p6",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256[]",
                  "name": "dataSetLookup",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "witnessForLookup",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct CheckPoW.BlockPoW[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receipt_proof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "event_id",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            }
          ],
          "internalType": "struct CheckPoW.PoWProof",
          "name": "powProof",
          "type": "tuple"
        }
      ],
      "name": "submitTransferPoW",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeframeSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenSideAddress",
          "type": "address"
        }
      ],
      "name": "tokensAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenSideAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensAddBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        }
      ],
      "name": "tokensRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensRemoveBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "event_id",
          "type": "uint256"
        }
      ],
      "name": "unlockTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "p0WithNonce",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "p0WithoutNonce",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "p1",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "parentOrReceiptHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "p2",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "difficulty",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "p3",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "number",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "p4",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "p5",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "nonce",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "p6",
              "type": "bytes"
            },
            {
              "internalType": "uint256[]",
              "name": "dataSetLookup",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "witnessForLookup",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct CheckPoW.BlockPoW",
          "name": "block_",
          "type": "tuple"
        }
      ],
      "name": "verifyEthash",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAmbAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "wrap_withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe413f1f201f17265b72893b813aca459bb1ea85fbe88d045244163d5eef6288e",
  "receipt": {
    "to": null,
    "from": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
    "contractAddress": "0x52Ad187140b725dfFb49FF3f1f62A9650ab8aCB1",
    "transactionIndex": 0,
    "gasUsed": "6628514",
    "logsBloom": "0x00000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000a00000000000000000000000000000000000000000000000000004000000000000000000000000000020008000000000000000000000000000000040000000000000000000000000000005000000000000000000000400000000000000000000000000010000000000100000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x49a106667458da6486285950284d9027078e07e7bc48a80eeab5c56712122c2c",
    "transactionHash": "0xe413f1f201f17265b72893b813aca459bb1ea85fbe88d045244163d5eef6288e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 40538,
        "transactionHash": "0xe413f1f201f17265b72893b813aca459bb1ea85fbe88d045244163d5eef6288e",
        "address": "0x52Ad187140b725dfFb49FF3f1f62A9650ab8aCB1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x49a106667458da6486285950284d9027078e07e7bc48a80eeab5c56712122c2c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 40538,
        "transactionHash": "0xe413f1f201f17265b72893b813aca459bb1ea85fbe88d045244163d5eef6288e",
        "address": "0x52Ad187140b725dfFb49FF3f1f62A9650ab8aCB1",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x49a106667458da6486285950284d9027078e07e7bc48a80eeab5c56712122c2c"
      }
    ],
    "blockNumber": 40538,
    "cumulativeGasUsed": "6628514",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "sideBridgeAddress": "0x0000000000000000000000000000000000000000",
      "relayAddress": "0x295c2707319ad4beca6b5bb4086617fd6f240cfe",
      "tokenThisAddresses": [
        "0x500268485CB411696bd48629f78E8846C1929a43",
        "0x944867B67cB2C28302C26df12B8aA01cb32F53Dc"
      ],
      "tokenSideAddresses": [
        "0xd390d1bFd4AAeCd1635da5dDa419d388a7CF8766",
        "0xc778417E063141139Fce010982780140Aa0cD5Ab"
      ],
      "fee": 1000,
      "feeRecipient": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
      "timeframeSeconds": 1,
      "lockTime": 1,
      "minSafetyBlocks": 10
    },
    "0x500268485CB411696bd48629f78E8846C1929a43"
  ],
  "numDeployments": 1,
  "solcInputHash": "81ad869c766dc20398071ed1c8de1f69",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"ambWrapper_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"queue\",\"type\":\"tuple[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"TransferFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"TransferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"proof\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32\",\"name\":\"el\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"proofStart\",\"type\":\"uint256\"}],\"name\":\"CalcReceiptsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receipt_proof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"p\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"eventContractAddress\",\"type\":\"address\"}],\"name\":\"CalcTransferReceiptsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"p0WithNonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p0WithoutNonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p1\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentOrReceiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"number\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p5\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p6\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CheckPoW.BlockPoW[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receipt_proof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"internalType\":\"struct CheckPoW.PoWProof\",\"name\":\"powProof\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"}],\"name\":\"CheckPoW_\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks_\",\"type\":\"uint256\"}],\"name\":\"changeMinSafetyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds_\",\"type\":\"uint256\"}],\"name\":\"changeTimeframeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochIndex\",\"type\":\"uint256\"}],\"name\":\"isEpochDataSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSafetyBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestLockedEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"removeLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"}],\"name\":\"setAmbWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullSizeIn128Resultion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"branchDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"merkleNodes\",\"type\":\"uint256[]\"}],\"name\":\"setEpochData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideBridgeAddress\",\"type\":\"address\"}],\"name\":\"setSideBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"p0WithNonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p0WithoutNonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p1\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentOrReceiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"number\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p5\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p6\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CheckPoW.BlockPoW[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receipt_proof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"internalType\":\"struct CheckPoW.PoWProof\",\"name\":\"powProof\",\"type\":\"tuple\"}],\"name\":\"submitTransferPoW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSideAddress\",\"type\":\"address\"}],\"name\":\"tokensAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensAddBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"}],\"name\":\"tokensRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensRemoveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"event_id\",\"type\":\"uint256\"}],\"name\":\"unlockTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"p0WithNonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p0WithoutNonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p1\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentOrReceiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"number\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p5\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p6\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CheckPoW.BlockPoW\",\"name\":\"block_\",\"type\":\"tuple\"}],\"name\":\"verifyEthash\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAmbAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"wrap_withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/eth/AmbBridge.sol\":\"AmbBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/checks/CheckPoW.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\nimport \\\"./CheckReceiptsProof.sol\\\";\\nimport \\\"./CheckPoW_Ethash.sol\\\";\\n\\ncontract CheckPoW is CheckReceiptsProof, Ethash  {\\n    struct BlockPoW {\\n        bytes p0WithNonce;\\n        bytes p0WithoutNonce;\\n\\n        bytes p1;\\n        bytes32 parentOrReceiptHash;\\n        bytes p2;\\n        bytes difficulty;\\n        bytes p3;\\n        bytes number;\\n        bytes p4;  // end when extra end\\n        bytes p5;  // after extra\\n        bytes nonce;\\n        bytes p6;\\n\\n        uint[] dataSetLookup;\\n        uint[] witnessForLookup;\\n    }\\n\\n    struct PoWProof {\\n        BlockPoW[] blocks;\\n        CommonStructs.TransferProof transfer;\\n    }\\n\\n    function CheckPoW_(PoWProof memory powProof, address sideBridgeAddress) public\\n    {\\n        bytes32 hash = CalcTransferReceiptsHash(powProof.transfer, sideBridgeAddress);\\n        for (uint i = 0; i < powProof.blocks.length; i++) {\\n            require(powProof.blocks[i].parentOrReceiptHash == hash, \\\"parentHash or receiptHash wrong\\\");\\n            hash = blockHash(powProof.blocks[i]);\\n\\n            verifyEthash(powProof.blocks[i]);\\n        }\\n    }\\n\\n\\n    function blockHash(BlockPoW memory block_) internal pure returns (bytes32) {\\n        // Note: too much arguments in abi.encodePacked() function cause CompilerError: Stack too deep...\\n        return keccak256(abi.encodePacked(\\n                abi.encodePacked(\\n                    block_.p0WithNonce,\\n                    block_.p1,\\n                    block_.parentOrReceiptHash,\\n                    block_.p2,\\n                    block_.difficulty,\\n                    block_.p3\\n                ),\\n                abi.encodePacked(\\n                    block_.number,\\n                    block_.p4,\\n                    block_.p5,\\n                    block_.nonce,\\n                    block_.p6\\n                )\\n            ));\\n    }\\n\\n    function verifyEthash(BlockPoW memory block_) public view {\\n        verifyPoW(\\n            bytesToUint(block_.number),\\n            blockHashWithoutNonce(block_),\\n            bytesToUint(block_.nonce),\\n            bytesToUint(block_.difficulty),\\n            block_.dataSetLookup,\\n            block_.witnessForLookup\\n        );\\n\\n    }\\n\\n    function blockHashWithoutNonce(BlockPoW memory block_) private pure returns (bytes32) {\\n        bytes memory rlpHeaderHashWithoutNonce = abi.encodePacked(\\n            block_.p0WithoutNonce,\\n            block_.p1,\\n            block_.parentOrReceiptHash,\\n            block_.p2,\\n            block_.difficulty,\\n            block_.p3,\\n            block_.number,\\n            block_.p4,\\n            block_.p6\\n        );\\n\\n        return keccak256(rlpHeaderHashWithoutNonce);\\n    }\\n\\n\\n    function bytesToUint(bytes memory b) private pure returns (uint){\\n        return uint(bytes32(b)) >> (256 - b.length * 8);\\n    }\\n}\\n\",\"keccak256\":\"0x045776697607e5fcd20c06e2c0ac4674780381bf9cb6405fe8c604b343c178b1\",\"license\":\"MIT\"},\"contracts/checks/CheckPoW_Ethash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev These contracts are used to verify Proof of Work within a smart contract.\\n///      The algorithms have been extracted from the implementation of smart pool (https://github.com/smartpool)\\ncontract SHA3_512 {\\n    constructor() {}\\n\\n    function keccak_f(uint[25] memory A) pure private returns (uint[25] memory) {\\n        uint[25] memory B;\\n        uint[5]  memory C;\\n        uint[5]  memory D;\\n\\n        uint[24] memory RC = [\\n        uint(0x0000000000000001),\\n        0x0000000000008082,\\n        0x800000000000808A,\\n        0x8000000080008000,\\n        0x000000000000808B,\\n        0x0000000080000001,\\n        0x8000000080008081,\\n        0x8000000000008009,\\n        0x000000000000008A,\\n        0x0000000000000088,\\n        0x0000000080008009,\\n        0x000000008000000A,\\n        0x000000008000808B,\\n        0x800000000000008B,\\n        0x8000000000008089,\\n        0x8000000000008003,\\n        0x8000000000008002,\\n        0x8000000000000080,\\n        0x000000000000800A,\\n        0x800000008000000A,\\n        0x8000000080008081,\\n        0x8000000000008080,\\n        0x0000000080000001,\\n        0x8000000080008008];\\n\\n        for (uint i = 0; i < 24; i++) {\\n\\n            C[0] = A[0] ^ A[1] ^ A[2] ^ A[3] ^ A[4];\\n            C[1] = A[5] ^ A[6] ^ A[7] ^ A[8] ^ A[9];\\n            C[2] = A[10] ^ A[11] ^ A[12] ^ A[13] ^ A[14];\\n            C[3] = A[15] ^ A[16] ^ A[17] ^ A[18] ^ A[19];\\n            C[4] = A[20] ^ A[21] ^ A[22] ^ A[23] ^ A[24];\\n\\n            D[0] = C[4] ^ ((C[1] * 2) & 0xffffffffffffffff | (C[1] / (2 ** 63)));\\n            D[1] = C[0] ^ ((C[2] * 2) & 0xffffffffffffffff | (C[2] / (2 ** 63)));\\n            D[2] = C[1] ^ ((C[3] * 2) & 0xffffffffffffffff | (C[3] / (2 ** 63)));\\n            D[3] = C[2] ^ ((C[4] * 2) & 0xffffffffffffffff | (C[4] / (2 ** 63)));\\n            D[4] = C[3] ^ ((C[0] * 2) & 0xffffffffffffffff | (C[0] / (2 ** 63)));\\n\\n            A[0] = A[0] ^ D[0];\\n            A[1] = A[1] ^ D[0];\\n            A[2] = A[2] ^ D[0];\\n            A[3] = A[3] ^ D[0];\\n            A[4] = A[4] ^ D[0];\\n            A[5] = A[5] ^ D[1];\\n            A[6] = A[6] ^ D[1];\\n            A[7] = A[7] ^ D[1];\\n            A[8] = A[8] ^ D[1];\\n            A[9] = A[9] ^ D[1];\\n            A[10] = A[10] ^ D[2];\\n            A[11] = A[11] ^ D[2];\\n            A[12] = A[12] ^ D[2];\\n            A[13] = A[13] ^ D[2];\\n            A[14] = A[14] ^ D[2];\\n            A[15] = A[15] ^ D[3];\\n            A[16] = A[16] ^ D[3];\\n            A[17] = A[17] ^ D[3];\\n            A[18] = A[18] ^ D[3];\\n            A[19] = A[19] ^ D[3];\\n            A[20] = A[20] ^ D[4];\\n            A[21] = A[21] ^ D[4];\\n            A[22] = A[22] ^ D[4];\\n            A[23] = A[23] ^ D[4];\\n            A[24] = A[24] ^ D[4];\\n\\n            /*Rho and pi steps*/\\n            B[0] = A[0];\\n            B[8] = ((A[1] * (2 ** 36)) & 0xffffffffffffffff | (A[1] / (2 ** 28)));\\n            B[11] = ((A[2] * (2 ** 3)) & 0xffffffffffffffff | (A[2] / (2 ** 61)));\\n            B[19] = ((A[3] * (2 ** 41)) & 0xffffffffffffffff | (A[3] / (2 ** 23)));\\n            B[22] = ((A[4] * (2 ** 18)) & 0xffffffffffffffff | (A[4] / (2 ** 46)));\\n            B[2] = ((A[5] * (2 ** 1)) & 0xffffffffffffffff | (A[5] / (2 ** 63)));\\n            B[5] = ((A[6] * (2 ** 44)) & 0xffffffffffffffff | (A[6] / (2 ** 20)));\\n            B[13] = ((A[7] * (2 ** 10)) & 0xffffffffffffffff | (A[7] / (2 ** 54)));\\n            B[16] = ((A[8] * (2 ** 45)) & 0xffffffffffffffff | (A[8] / (2 ** 19)));\\n            B[24] = ((A[9] * (2 ** 2)) & 0xffffffffffffffff | (A[9] / (2 ** 62)));\\n            B[4] = ((A[10] * (2 ** 62)) & 0xffffffffffffffff | (A[10] / (2 ** 2)));\\n            B[7] = ((A[11] * (2 ** 6)) & 0xffffffffffffffff | (A[11] / (2 ** 58)));\\n            B[10] = ((A[12] * (2 ** 43)) & 0xffffffffffffffff | (A[12] / (2 ** 21)));\\n            B[18] = ((A[13] * (2 ** 15)) & 0xffffffffffffffff | (A[13] / (2 ** 49)));\\n            B[21] = ((A[14] * (2 ** 61)) & 0xffffffffffffffff | (A[14] / (2 ** 3)));\\n            B[1] = ((A[15] * (2 ** 28)) & 0xffffffffffffffff | (A[15] / (2 ** 36)));\\n            B[9] = ((A[16] * (2 ** 55)) & 0xffffffffffffffff | (A[16] / (2 ** 9)));\\n            B[12] = ((A[17] * (2 ** 25)) & 0xffffffffffffffff | (A[17] / (2 ** 39)));\\n            B[15] = ((A[18] * (2 ** 21)) & 0xffffffffffffffff | (A[18] / (2 ** 43)));\\n            B[23] = ((A[19] * (2 ** 56)) & 0xffffffffffffffff | (A[19] / (2 ** 8)));\\n            B[3] = ((A[20] * (2 ** 27)) & 0xffffffffffffffff | (A[20] / (2 ** 37)));\\n            B[6] = ((A[21] * (2 ** 20)) & 0xffffffffffffffff | (A[21] / (2 ** 44)));\\n            B[14] = ((A[22] * (2 ** 39)) & 0xffffffffffffffff | (A[22] / (2 ** 25)));\\n            B[17] = ((A[23] * (2 ** 8)) & 0xffffffffffffffff | (A[23] / (2 ** 56)));\\n            B[20] = ((A[24] * (2 ** 14)) & 0xffffffffffffffff | (A[24] / (2 ** 50)));\\n\\n            /*Xi state*/\\n            A[0] = B[0] ^ ((~B[5]) & B[10]);\\n            A[1] = B[1] ^ ((~B[6]) & B[11]);\\n            A[2] = B[2] ^ ((~B[7]) & B[12]);\\n            A[3] = B[3] ^ ((~B[8]) & B[13]);\\n            A[4] = B[4] ^ ((~B[9]) & B[14]);\\n            A[5] = B[5] ^ ((~B[10]) & B[15]);\\n            A[6] = B[6] ^ ((~B[11]) & B[16]);\\n            A[7] = B[7] ^ ((~B[12]) & B[17]);\\n            A[8] = B[8] ^ ((~B[13]) & B[18]);\\n            A[9] = B[9] ^ ((~B[14]) & B[19]);\\n            A[10] = B[10] ^ ((~B[15]) & B[20]);\\n            A[11] = B[11] ^ ((~B[16]) & B[21]);\\n            A[12] = B[12] ^ ((~B[17]) & B[22]);\\n            A[13] = B[13] ^ ((~B[18]) & B[23]);\\n            A[14] = B[14] ^ ((~B[19]) & B[24]);\\n            A[15] = B[15] ^ ((~B[20]) & B[0]);\\n            A[16] = B[16] ^ ((~B[21]) & B[1]);\\n            A[17] = B[17] ^ ((~B[22]) & B[2]);\\n            A[18] = B[18] ^ ((~B[23]) & B[3]);\\n            A[19] = B[19] ^ ((~B[24]) & B[4]);\\n            A[20] = B[20] ^ ((~B[0]) & B[5]);\\n            A[21] = B[21] ^ ((~B[1]) & B[6]);\\n            A[22] = B[22] ^ ((~B[2]) & B[7]);\\n            A[23] = B[23] ^ ((~B[3]) & B[8]);\\n            A[24] = B[24] ^ ((~B[4]) & B[9]);\\n\\n            /*Last step*/\\n            A[0] = A[0] ^ RC[i];\\n        }\\n\\n        return A;\\n    }\\n\\n\\n    function sponge(uint[9] memory M) pure internal returns (uint[16] memory) {\\n        require((M.length * 8) == 72, \\\"sponge error\\\");\\n\\n        M[5] = 0x01;\\n        M[8] = 0x8000000000000000;\\n\\n        uint r = 72;\\n        uint w = 8;\\n        uint size = M.length * 8;\\n\\n        uint[25] memory S;\\n        uint i;\\n        uint y;\\n        uint x;\\n        /*Absorbing Phase*/\\n        for (i = 0; i < size / r; i++) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w)) {\\n                        S[5 * x + y] = S[5 * x + y] ^ M[i * 9 + x + 5 * y];\\n                    }\\n                }\\n            }\\n            S = keccak_f(S);\\n        }\\n\\n        /*Squeezing phase*/\\n        uint[16] memory result;\\n        uint b = 0;\\n        while (b < 16) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w) && (b < 16)) {\\n                        result[b] = S[5 * x + y] & 0xFFFFFFFF;\\n                        result[b + 1] = S[5 * x + y] / 0x100000000;\\n                        b += 2;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n}\\n\\n////////////////////////////////////////////////////////////////////////////////\\n\\ncontract Ethash is SHA3_512 {\\n\\n    uint constant EPOCH_LENGTH = 30000;   // blocks per epoch\\n\\n    constructor() {\\n    }\\n\\n    struct EthashCacheOptData {\\n        uint[512] merkleNodes;\\n        uint fullSizeIn128Resultion;\\n        uint branchDepth;\\n    }\\n\\n    mapping(uint => EthashCacheOptData) epochData;\\n\\n\\n    function verifyPoW(uint blockNumber, bytes32 rlpHeaderHashWithoutNonce, uint nonce, uint difficulty,\\n        uint[] memory dataSetLookup, uint[] memory witnessForLookup) internal view {\\n\\n        uint epoch = blockNumber / EPOCH_LENGTH;\\n        uint ethash = hashimoto(rlpHeaderHashWithoutNonce, nonce, dataSetLookup, witnessForLookup, epoch);\\n\\n        require(ethash <= (2 ** 256 - 1) / difficulty, \\\"Ethash difficulty too low\\\");\\n    }\\n\\n    function isEpochDataSet(uint epochIndex) public view returns (bool) {\\n        return epochData[epochIndex].fullSizeIn128Resultion != 0;\\n    }\\n\\n    function setEpochData(\\n        uint epochNum,\\n        uint fullSizeIn128Resultion,\\n        uint branchDepth,\\n        uint[] memory merkleNodes\\n    ) public {\\n\\n        // we store only previous and current epochs\\n        // so, delete second from the end epoch\\n        if (epochNum >= 2)  // underflow check\\n            delete epochData[epochNum - 2];\\n\\n\\n        uint l = merkleNodes.length;\\n        uint[512] storage nodes = epochData[epochNum].merkleNodes;\\n\\n        for (uint i = 0; i < l; i++) {\\n            nodes[i] = merkleNodes[i];\\n        }\\n\\n        epochData[epochNum].fullSizeIn128Resultion = fullSizeIn128Resultion;\\n        epochData[epochNum].branchDepth = branchDepth;\\n    }\\n\\n\\n    function hashimoto(bytes32 header,\\n        uint nonceLe,\\n        uint[] memory dataSetLookup,\\n        uint[] memory witnessForLookup,\\n        uint epochIndex) private view returns (uint) {\\n\\n        uint[16] memory s = computeS(uint(header), nonceLe);\\n        uint[32] memory mix;\\n        uint[8]  memory cmix;\\n\\n\\n        uint depth = epochData[epochIndex].branchDepth;\\n        uint fullSize = epochData[epochIndex].fullSizeIn128Resultion;\\n\\n        uint i;\\n        uint j;\\n\\n        require(fullSize != 0, \\\"EpochData not set\\\");\\n\\n\\n        for (i = 0; i < 16; i++) {\\n            assembly {\\n                let offset := mul(i, 0x20)\\n\\n            //mix[i] = s[i];\\n                mstore(add(mix, offset), mload(add(s, offset)))\\n\\n            // mix[i+16] = s[i];\\n                mstore(add(mix, add(0x200, offset)), mload(add(s, offset)))\\n            }\\n        }\\n\\n        for (i = 0; i < 64; i++) {\\n            uint p = fnv(i ^ s[0], mix[i % 32]) % fullSize;\\n\\n            // console.log(computeCacheRoot( p, i, dataSetLookup,  witnessForLookup, depthAndFullSize[0]));\\n            // console.log(getMerkleLeave( epochIndex, p ));\\n\\n            if (computeCacheRoot(p, i, dataSetLookup, witnessForLookup, depth) != getMerkleLeave(epochIndex, p)) {\\n                // PoW failed\\n                revert(\\\"PoW failed\\\");\\n            }\\n\\n            for (j = 0; j < 8; j++) {\\n\\n                assembly{\\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & varFFFFFFFF );\\n                    let dataOffset := add(mul(0x80, i), add(dataSetLookup, 0x20))\\n                    let dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    let mixOffset := add(mix, mul(0x20, j))\\n                    let mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    let fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                }\\n\\n\\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & 0xFFFFFFFF );\\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\\n\\n\\n                //dataSetLookup[4*i    ] = dataSetLookup[4*i    ]/(2**32);\\n                //dataSetLookup[4*i + 1] = dataSetLookup[4*i + 1]/(2**32);\\n                //dataSetLookup[4*i + 2] = dataSetLookup[4*i + 2]/(2**32);\\n                //dataSetLookup[4*i + 3] = dataSetLookup[4*i + 3]/(2**32);\\n\\n                assembly{\\n                    let offset := add(add(dataSetLookup, 0x20), mul(i, 0x80))\\n                    let value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n                }\\n            }\\n        }\\n\\n\\n        for (i = 0; i < 32; i += 4) {\\n            cmix[i / 4] = (fnv(fnv(fnv(mix[i], mix[i + 1]), mix[i + 2]), mix[i + 3]));\\n        }\\n\\n        return computeSha3(s, cmix);\\n\\n    }\\n\\n\\n    function fnv(uint v1, uint v2) pure internal returns (uint) {\\n        return ((v1 * 0x01000193) ^ v2) & 0xFFFFFFFF;\\n    }\\n\\n    function computeCacheRoot(uint index,\\n        uint indexInElementsArray,\\n        uint[] memory elements,\\n        uint[] memory witness,\\n        uint branchSize) pure private returns (uint) {\\n\\n        uint leaf = computeLeaf(elements, indexInElementsArray) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n        uint left;\\n        uint right;\\n        uint node;\\n        bool oddBranchSize = (branchSize % 2) > 0;\\n\\n        assembly {\\n            branchSize := div(branchSize, 2)\\n        //branchSize /= 2;\\n        }\\n        uint witnessIndex = indexInElementsArray * branchSize;\\n        if (oddBranchSize) witnessIndex += indexInElementsArray;\\n\\n        uint depth;\\n        for (depth = 0; depth < branchSize; depth++) {\\n            assembly {\\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\\n            }\\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n\\n            }\\n            else {\\n                assembly{\\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            assembly {\\n                index := div(index, 2)\\n            }\\n\\n            //node  = witness[witnessIndex + depth] / (2**128);\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := div(node, 0x100000000000000000000000000000000)\\n                }\\n            }\\n            else {\\n                assembly {\\n                    left := div(node, 0x100000000000000000000000000000000)\\n                }\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            assembly {\\n                index := div(index, 2)\\n            }\\n        }\\n\\n        if (oddBranchSize) {\\n            assembly {\\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\\n            }\\n\\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n            }\\n            else {\\n                assembly{\\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n\\n\\n        return leaf;\\n    }\\n\\n\\n    function computeSha3(uint[16] memory s, uint[8] memory cmix) pure internal returns (uint) {\\n        uint s0 = s[0] + s[1] * (2 ** 32) + s[2] * (2 ** 64) + s[3] * (2 ** 96) +\\n        (s[4] + s[5] * (2 ** 32) + s[6] * (2 ** 64) + s[7] * (2 ** 96)) * (2 ** 128);\\n\\n        uint s1 = s[8] + s[9] * (2 ** 32) + s[10] * (2 ** 64) + s[11] * (2 ** 96) +\\n        (s[12] + s[13] * (2 ** 32) + s[14] * (2 ** 64) + s[15] * (2 ** 96)) * (2 ** 128);\\n\\n        uint c = cmix[0] + cmix[1] * (2 ** 32) + cmix[2] * (2 ** 64) + cmix[3] * (2 ** 96) +\\n        (cmix[4] + cmix[5] * (2 ** 32) + cmix[6] * (2 ** 64) + cmix[7] * (2 ** 96)) * (2 ** 128);\\n\\n\\n        /* god knows why need to convert to big endian */\\n        return uint(keccak256(abi.encodePacked(reverseBytes(s0), reverseBytes(s1), reverseBytes(c))));\\n    }\\n\\n\\n    function computeLeaf(uint[] memory dataSetLookup, uint index) pure internal returns (uint) {\\n        return uint(keccak256(abi.encodePacked(\\n                dataSetLookup[4 * index],\\n                dataSetLookup[4 * index + 1],\\n                dataSetLookup[4 * index + 2],\\n                dataSetLookup[4 * index + 3]\\n            )));\\n\\n    }\\n\\n    function computeS(uint header, uint nonceLe) pure internal returns (uint[16] memory) {\\n        uint[9] memory M;\\n\\n        header = reverseBytes(header);\\n\\n        M[0] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[1] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[2] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[3] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n\\n        // make little endian nonce\\n        M[4] = nonceLe;\\n        return sponge(M);\\n    }\\n\\n    function reverseBytes(uint input) pure internal returns (uint) {\\n        uint result;\\n        for (uint i = 0; i < 32; i++) {\\n            result = (result << 8) + (input & 0xff);\\n            input = input >> 8;\\n        }\\n        return result;\\n    }\\n\\n\\n    function getMerkleLeave(uint epochIndex, uint p) view internal returns (uint) {\\n        uint rootIndex = uint(p >> epochData[epochIndex].branchDepth);\\n        uint expectedRoot = epochData[epochIndex].merkleNodes[(rootIndex >> 1)];\\n\\n        if ((rootIndex % 2) == 0)\\n            return expectedRoot & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        return expectedRoot >> 128;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb0dc1a73f64f772b1cc9b0feada94faabc85c2c46a066be6c9a2cedb767ccc48\",\"license\":\"MIT\"},\"contracts/checks/CheckReceiptsProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\n\\n\\ncontract CheckReceiptsProof {\\n    // check readme for focs\\n    function CalcReceiptsHash(bytes[] memory proof, bytes32 el, uint proofStart) public pure returns (bytes32) {\\n        bytes memory s;\\n\\n        for (uint i = proofStart; i < proof.length; i += 2) {\\n            s = abi.encodePacked(proof[i], el, proof[i + 1]);\\n            el = (s.length > 32) ? keccak256(s) : bytes32(s);\\n        }\\n\\n        return el;\\n    }\\n\\n\\n    function CalcTransferReceiptsHash(CommonStructs.TransferProof memory p, address eventContractAddress) public pure returns (bytes32) {\\n        bytes32 el = keccak256(abi.encodePacked(\\n                p.receipt_proof[0],\\n                eventContractAddress,\\n                p.receipt_proof[1],\\n                toBinary(p.event_id),\\n                p.receipt_proof[2],\\n                abi.encode(p.transfers),\\n                p.receipt_proof[3]\\n            ));\\n        return CalcReceiptsHash(p.receipt_proof, el, 4);\\n        // start from proof[4]\\n    }\\n\\n\\n    function toBinary(uint _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), _x)\\n        }\\n        uint i;\\n        for (i = 0; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0xc38527fc5cdc908a1359ca83e01aef72981d9d6700e93ffc5eecd5223baac9a1\",\"license\":\"MIT\"},\"contracts/common/CommonBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./CommonStructs.sol\\\";\\n\\n\\ncontract CommonBridge is AccessControl, Pausable {\\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n\\n\\n    // queue to be pushed in another network\\n    CommonStructs.Transfer[] queue;\\n    // locked transfers from another network\\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\\n\\n\\n    // this network to side network token addresses mapping\\n    mapping(address => address) public tokenAddresses;\\n\\n    uint public fee;\\n    address payable feeRecipient;\\n\\n    address public sideBridgeAddress;\\n    uint public minSafetyBlocks;\\n    uint public timeframeSeconds;\\n    uint public lockTime;\\n\\n    uint public inputEventId;\\n    uint outputEventId;\\n    uint public oldestLockedEventId;\\n\\n    uint lastTimeframe;\\n\\n    event Withdraw(address indexed from, uint event_id, uint feeAmount);\\n    event Transfer(uint indexed event_id, CommonStructs.Transfer[] queue);\\n    event TransferFinish(uint indexed event_id);\\n    event TransferSubmit(uint indexed event_id);\\n\\n\\n    constructor(CommonStructs.ConstructorArgs memory args)\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(RELAY_ROLE, args.relayAddress);\\n\\n        // initialise tokenAddresses with start values\\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\\n\\n        sideBridgeAddress = args.sideBridgeAddress;\\n        fee = args.fee;\\n        feeRecipient = args.feeRecipient;\\n        minSafetyBlocks = args.minSafetyBlocks;\\n        timeframeSeconds = args.timeframeSeconds;\\n        lockTime = args.lockTime;\\n    }\\n\\n    function withdraw(address tokenAmbAddress, address toAddress, uint amount) payable public {\\n        address tokenExternalAddress = tokenAddresses[tokenAmbAddress];\\n        require(tokenExternalAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value == fee, \\\"Sent value != fee\\\");\\n        feeRecipient.transfer(msg.value);\\n\\n        require(IERC20(tokenAmbAddress).transferFrom(msg.sender, address(this), amount), \\\"Fail transfer coins\\\");\\n\\n        queue.push(CommonStructs.Transfer(tokenAmbAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, fee);\\n\\n        withdraw_finish();\\n    }\\n\\n    function withdraw_finish() internal {\\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\\n        if (nowTimeframe != lastTimeframe) {\\n            emit Transfer(outputEventId++, queue);\\n            delete queue;\\n\\n            lastTimeframe = nowTimeframe;\\n        }\\n    }\\n\\n\\n    // locked transfers from another network\\n\\n    // submitted transfers save here for `lockTime` period\\n    function lockTransfers(CommonStructs.Transfer[] memory events, uint event_id) internal {\\n        lockedTransfers[event_id].endTimestamp = block.timestamp + lockTime;\\n        for (uint i = 0; i < events.length; i++)\\n            lockedTransfers[event_id].transfers.push(events[i]);\\n    }\\n\\n    // after `lockTime` period, transfers can  be unlocked\\n    function unlockTransfers(uint event_id) public whenNotPaused {\\n        require(event_id == oldestLockedEventId, \\\"can unlock only oldest event\\\");\\n\\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[event_id];\\n        require(transfersLocked.endTimestamp > 0, \\\"no locked transfers with this id\\\");\\n        require(transfersLocked.endTimestamp < block.timestamp, \\\"lockTime has not yet passed\\\");\\n\\n        CommonStructs.Transfer[] memory transfers = transfersLocked.transfers;\\n        for (uint i = 0; i < transfers.length; i++)\\n            require(IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount), \\\"Fail transfer coins\\\");\\n\\n        delete lockedTransfers[event_id];\\n        emit TransferFinish(event_id);\\n\\n        oldestLockedEventId = event_id+1;\\n    }\\n\\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\\n    function unlockTransfersBatch() public whenNotPaused {\\n        uint event_id = oldestLockedEventId;\\n        for (;; event_id++) {\\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[event_id];\\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\\n\\n            CommonStructs.Transfer[] memory transfers = transfersLocked.transfers;\\n            for (uint i = 0; i < transfers.length; i++)\\n                require(IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount), \\\"Fail transfer coins\\\");\\n\\n            delete lockedTransfers[event_id];\\n            emit TransferFinish(event_id);\\n        }\\n        oldestLockedEventId = event_id;\\n    }\\n\\n    // delete transfers with passed event_id and all after it\\n    function removeLockedTransfers(uint event_id) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(event_id >= oldestLockedEventId, \\\"event_id must be >= oldestLockedEventId\\\");\\n        for ( ;lockedTransfers[event_id].endTimestamp != 0; event_id++)\\n            delete lockedTransfers[event_id];\\n    }\\n\\n\\n    // admin setters\\n\\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\\n        minSafetyBlocks = minSafetyBlocks_;\\n    }\\n\\n    function changeFee(uint fee_) public onlyRole(ADMIN_ROLE) {\\n        fee = fee_;\\n    }\\n\\n    function changeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        feeRecipient = feeRecipient_;\\n    }\\n\\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\\n        timeframeSeconds = timeframeSeconds_;\\n    }\\n\\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\\n        lockTime = lockTime_;\\n    }\\n\\n\\n    // token addressed mapping\\n\\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\\n    }\\n\\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\\n        delete tokenAddresses[tokenThisAddress];\\n    }\\n\\n    function tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\\n    }\\n\\n    function _tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) private {\\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \\\"sizes of tokenThisAddresses and tokenSideAddresses must be same\\\");\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\\n    }\\n\\n    function tokensRemoveBatch(address[] memory tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            delete tokenAddresses[tokenThisAddresses[i]];\\n    }\\n\\n    // pause\\n\\n    function pause() public onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // internal\\n\\n    function checkEventId(uint event_id) internal {\\n        require(event_id == ++inputEventId, \\\"EventId out of order\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x9fb9a301b9b6bd3bf0939f9740965980ea4afaecb40578ad732c93975655bce4\",\"license\":\"MIT\"},\"contracts/common/CommonStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary CommonStructs {\\n    struct Transfer {\\n        address tokenAddress;\\n        address toAddress;\\n        uint amount;\\n    }\\n\\n    struct TransferProof {\\n        bytes[] receipt_proof;\\n        uint event_id;\\n        Transfer[] transfers;\\n    }\\n\\n    struct LockedTransfers {\\n        Transfer[] transfers;\\n        uint endTimestamp;\\n    }\\n\\n    struct ConstructorArgs {\\n        address sideBridgeAddress; address relayAddress;\\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\\n        uint fee; address payable feeRecipient;\\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0x6545ac394156cb7fff707bce9395775971ee31a5f1638ddd9f0a1eed246631b0\",\"license\":\"MIT\"},\"contracts/eth/AmbBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonBridge.sol\\\";\\nimport \\\"../common/CommonStructs.sol\\\";\\nimport \\\"../checks/CheckPoW.sol\\\";\\nimport \\\"../tokens/IWrapper.sol\\\";\\n\\n\\ncontract AmbBridge is CommonBridge, CheckPoW {\\n    address ambWrapperAddress;\\n\\n    constructor(\\n        CommonStructs.ConstructorArgs memory args,\\n        address ambWrapper_\\n    )\\n    CommonBridge(args)\\n    {\\n        ambWrapperAddress = ambWrapper_;\\n    }\\n\\n    function wrap_withdraw(address toAddress) public payable {\\n        address tokenExternalAddress = tokenAddresses[ambWrapperAddress];\\n        require(tokenExternalAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value > fee, \\\"msg.value can't be lesser than fee\\\");\\n        feeRecipient.transfer(fee);\\n\\n        uint restOfValue = msg.value - fee;\\n        IWrapper(ambWrapperAddress).deposit{value: restOfValue}();\\n\\n        //\\n        queue.push(CommonStructs.Transfer(tokenExternalAddress, toAddress, restOfValue));\\n        emit Withdraw(msg.sender, outputEventId, fee);\\n\\n        withdraw_finish();\\n    }\\n\\n    function submitTransferPoW(PoWProof memory powProof) public onlyRole(RELAY_ROLE) whenNotPaused {\\n        emit TransferSubmit(powProof.transfer.event_id);\\n\\n        checkEventId(powProof.transfer.event_id);\\n\\n        CheckPoW_(powProof, sideBridgeAddress);\\n\\n        lockTransfers(powProof.transfer.transfers, powProof.transfer.event_id);\\n    }\\n\\n    function setSideBridge(address _sideBridgeAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(sideBridgeAddress == address(0), \\\"sideBridgeAddress already set\\\");\\n        sideBridgeAddress = _sideBridgeAddress;\\n    }\\n\\n    function setAmbWrapper(address wrapper) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        ambWrapperAddress = wrapper;\\n    }\\n}\\n\",\"keccak256\":\"0xb3fb6670e623cb4cdc6f80a64270cd0ef2432c006f5e087fb9ff5806fbab83f0\",\"license\":\"MIT\"},\"contracts/tokens/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWrapper {\\n    event Deposit(address indexed dst, uint amount);\\n    event Withdrawal(address indexed src, uint amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external payable;\\n}\\n\",\"keccak256\":\"0x800c261f75f979f219a046bc3b5667e1371734606f47356c59a463dece282177\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620062fd380380620062fd83398101604081905262000034916200040e565b6001805460ff19169055816200005560003364010000000062000124810204565b620000947f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7826020015162000124640100000000026401000000009004565b620000b7816040015182606001516200013d640100000000026401000000009004565b805160078054600160a060020a0319908116600160a060020a0393841617909155608083015160055560a083015160068054831691841691909117905561010083015160085560c083015160095560e090920151600a556010805490921692169190911790555062000609565b6200013982826401000000006200027f810204565b5050565b8051825114620001d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d6500606482015260840160405180910390fd5b815160005b818110156200027957828181518110620001f657620001f662000592565b60200260200101516004600086848151811062000217576200021762000592565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a03160217905550808062000270906200054f565b915050620001d8565b50505050565b6200029482826401000000006200031b810204565b6200013957600082815260208181526040808320600160a060020a03851684529091529020805460ff19166001179055620002d764010000000062000344810204565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600091825260208281526040808420600160a060020a0393909316845291905290205460ff1690565b3390565b80516200035581620005f0565b919050565b600082601f8301126200036c57600080fd5b815160206001604060020a03808311156200038b576200038b620005c1565b818302604051601f19603f83011681018181108482111715620003b257620003b2620005c1565b60405284815283810192508684018288018501891015620003d257600080fd5b600092505b8583101562000402578051620003ed81620005f0565b845292840192600192909201918401620003d7565b50979650505050505050565b600080604083850312156200042257600080fd5b82516001604060020a03808211156200043a57600080fd5b9084019061012082870312156200045057600080fd5b6200045a62000523565b620004658362000348565b8152620004756020840162000348565b60208201526040830151828111156200048d57600080fd5b6200049b888286016200035a565b604083015250606083015182811115620004b457600080fd5b620004c2888286016200035a565b60608301525060808301516080820152620004e060a0840162000348565b60a082015260c083015160c082015260e083015160e0820152610100915081830151828201528094505050506200051a6020840162000348565b90509250929050565b60405161012081016001604060020a0381118282101715620005495762000549620005c1565b60405290565b60006000198214156200058b577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600160a060020a03811681146200060657600080fd5b50565b615ce480620006196000396000f3fe608060405260043610610304576000357c0100000000000000000000000000000000000000000000000000000000900480638ac1f86f116101a1578063baeebe75116100f3578063e1c6da90116100a7578063f33fe10f11610081578063f33fe10f14610898578063f862b7eb146108c5578063fd5d2ef3146108e557600080fd5b8063e1c6da9014610838578063e789953614610858578063e88b66261461087857600080fd5b8063d547741f116100d8578063d547741f146107ef578063d9caed121461080f578063ddca3f431461082257600080fd5b8063baeebe75146107a6578063c7b81f4f146107bc57600080fd5b806396cf522711610155578063a217fddf1161012f578063a217fddf14610713578063b6d3385e14610728578063ba8bbbe01461079057600080fd5b806396cf5227146106bd578063973365e0146106dd57806399b5bb64146106fd57600080fd5b806390d0308f1161018657806390d0308f1461063657806391d1485414610656578063924cf6e0146106a757600080fd5b80638ac1f86f146106015780638e5df9c71461061657600080fd5b8063331a891a1161025a5780635249a7051161020e57806375b238fc116101e857806375b238fc146105985780638456cb59146105cc578063853890ae146105e157600080fd5b80635249a705146105405780635c975abb146105605780636a1db1bf1461057857600080fd5b80633f4ba83a1161023f5780633f4ba83a146104db57806342180fb8146104f05780634a1856de1461051057600080fd5b8063331a891a1461049b57806336568abe146104bb57600080fd5b80631ef0bd25116102bc5780632360407111610296578063236040711461042b578063248a9ca31461044b5780632f2ff15d1461047b57600080fd5b80631ef0bd25146103d857806321d3d536146103f857806323291c201461041857600080fd5b806309fce356116102ed57806309fce356146103805780630c31a003146103a25780630d668087146103c257600080fd5b806301ffc9a714610309578063044218231461033e575b600080fd5b34801561031557600080fd5b5061032961032436600461540f565b610905565b60405190151581526020015b60405180910390f35b34801561034a57600080fd5b506103727f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b604051908152602001610335565b34801561038c57600080fd5b506103a061039b3660046152fd565b61099e565b005b3480156103ae57600080fd5b506103a06103bd366004615451565b6109d8565b3480156103ce57600080fd5b50610372600a5481565b3480156103e457600080fd5b506103a06103f3366004615486565b610a20565b34801561040457600080fd5b506103a0610413366004615231565b610b2f565b6103a0610426366004615231565b610be6565b34801561043757600080fd5b506103a0610446366004615231565b610f1b565b34801561045757600080fd5b506103726104663660046153d1565b60009081526020819052604090206001015490565b34801561048757600080fd5b506103a06104963660046153ea565b610f83565b3480156104a757600080fd5b506103a06104b63660046153d1565b610fa9565b3480156104c757600080fd5b506103a06104d63660046153ea565b6110fa565b3480156104e757600080fd5b506103a0611197565b3480156104fc57600080fd5b506103a061050b3660046153d1565b6111ca565b34801561051c57600080fd5b5061037261052b3660046153d1565b60036020526000908152604090206001015481565b34801561054c57600080fd5b506103a061055b3660046152c8565b6111fb565b34801561056c57600080fd5b5060015460ff16610329565b34801561058457600080fd5b506103a06105933660046153d1565b6112ac565b3480156105a457600080fd5b506103727fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b3480156105d857600080fd5b506103a06112dd565b3480156105ed57600080fd5b506103a06105fc36600461524e565b611310565b34801561060d57600080fd5b506103a0611384565b34801561062257600080fd5b506103a0610631366004615231565b6116ab565b34801561064257600080fd5b50610372610651366004615502565b611718565b34801561066257600080fd5b506103296106713660046153ea565b60009182526020828152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b3480156106b357600080fd5b5061037260085481565b3480156106c957600080fd5b506103a06106d83660046153d1565b61180d565b3480156106e957600080fd5b506103a06106f83660046154bb565b61183e565b34801561070957600080fd5b50610372600b5481565b34801561071f57600080fd5b50610372600081565b34801561073457600080fd5b5061076b610743366004615231565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610335565b34801561079c57600080fd5b50610372600d5481565b3480156107b257600080fd5b5061037260095481565b3480156107c857600080fd5b506103296107d73660046153d1565b6000908152600f602052604090206102000154151590565b3480156107fb57600080fd5b506103a061080a3660046153ea565b611935565b6103a061081d366004615287565b61195b565b34801561082e57600080fd5b5061037260055481565b34801561084457600080fd5b506103a0610853366004615231565b611cb3565b34801561086457600080fd5b50610372610873366004615361565b611cfc565b34801561088457600080fd5b506103a0610893366004615538565b611dac565b3480156108a457600080fd5b5060075461076b9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156108d157600080fd5b506103a06108e03660046153d1565b611e73565b3480156108f157600080fd5b506103a06109003660046153d1565b612283565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061099857507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756109c981336122b4565b6109d38383612354565b505050565b610a1d6109e88260e001516124a3565b6109f1836124d6565b6109ff8461014001516124a3565b610a0c8560a001516124a3565b856101800151866101a0015161253f565b50565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7610a4b81336122b4565b60015460ff1615610aab57604051600080516020615c8f833981519152815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064015b60405180910390fd5b60208083015101516040517f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b90600090a2610aed8260200151602001516125cd565b600754610b1190839073ffffffffffffffffffffffffffffffffffffffff1661183e565b610b2b826020015160400151836020015160200151612637565b5050565b6000610b3b81336122b4565b60075473ffffffffffffffffffffffffffffffffffffffff1615610ba957604051600080516020615c8f833981519152815260206004820152601d60248201527f736964654272696467654164647265737320616c7265616479207365740000006044820152606401610aa2565b506007805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60105473ffffffffffffffffffffffffffffffffffffffff9081166000908152600460205260409020541680610c6657604051600080516020615c8f833981519152815260206004820152601560248201527f556e6b6e6f776e20746f6b656e206164647265737300000000000000000000006044820152606401610aa2565b6005543411610ce557604051600080516020615c8f833981519152815260206004820152602260248201527f6d73672e76616c75652063616e2774206265206c6573736572207468616e206660448201527f65650000000000000000000000000000000000000000000000000000000000006064820152608401610aa2565b60065460055460405173ffffffffffffffffffffffffffffffffffffffff9092169181156108fc0291906000818181858888f19350505050158015610d2e573d6000803e3d6000fd5b50600060055434610d3f9190615afe565b9050601060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016000604051808303818588803b158015610dc757600080fd5b505af1158015610ddb573d6000803e3d6000fd5b50506040805160608101825273ffffffffffffffffffffffffffffffffffffffff80881682528881166020830190815282840188815260028054600181018255600091909152935160039094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace8101805495851673ffffffffffffffffffffffffffffffffffffffff1996871617905591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830180549190941694169390931790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600c5460055491513395507ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689450610f0b9350909190918252602082015260400190565b60405180910390a26109d3612714565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610f4681336122b4565b506006805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082815260208190526040902060010154610f9f81336122b4565b6109d3838361278c565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775610fd481336122b4565b60015460ff1661102e57604051600080516020615c8f833981519152815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610aa2565b600d548210156110ae57604051600080516020615c8f833981519152815260206004820152602760248201527f6576656e745f6964206d757374206265203e3d206f6c646573744c6f636b656460448201527f4576656e744964000000000000000000000000000000000000000000000000006064820152608401610aa2565b60008281526003602052604090206001015415610b2b576000828152600360205260408120906110de8282614b0b565b50600060019190910155816110f281615b81565b9250506110ae565b73ffffffffffffffffffffffffffffffffffffffff8116331461118d57604051600080516020615c8f833981519152815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610aa2565b610b2b828261285e565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756111c281336122b4565b610a1d6128f7565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756111f581336122b4565b50600955565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561122681336122b4565b815160005b818110156112a6576004600085838151811061124957611249615c0e565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff168252810191909152604001600020805473ffffffffffffffffffffffffffffffffffffffff191690558061129e81615b81565b91505061122b565b50505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756112d781336122b4565b50600555565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561130881336122b4565b610a1d6129a8565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561133b81336122b4565b5073ffffffffffffffffffffffffffffffffffffffff9182166000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff191691909216179055565b60015460ff16156113df57604051600080516020615c8f833981519152815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610aa2565b600d545b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561147e5760008481526020908190206040805160608101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff908116845260018083015490911684860152600290910154918301919091529083529092019101611417565b50505050815260200160018201548152505090508060200151600014806114a85750428160200151115b156114b35750600d55565b805160005b8151811015611648578181815181106114d3576114d3615c0e565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83838151811061150c5761150c615c0e565b60200260200101516020015184848151811061152a5761152a615c0e565b6020026020010151604001516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161159092919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381600087803b1580156115aa57600080fd5b505af11580156115be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e291906153af565b61163657604051600080516020615c8f833981519152815260206004820152601360248201527f4661696c207472616e7366657220636f696e73000000000000000000000000006044820152606401610aa2565b8061164081615b81565b9150506114b8565b506000838152600360205260408120906116628282614b0b565b50600060019190910181905560405184917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2505080806116a390615b81565b9150506113e3565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756116d681336122b4565b5073ffffffffffffffffffffffffffffffffffffffff166000908152600460205260409020805473ffffffffffffffffffffffffffffffffffffffff19169055565b600080836000015160008151811061173257611732615c0e565b602002602001015183856000015160018151811061175257611752615c0e565b60200260200101516117678760200151612a36565b87518051600290811061177c5761177c615c0e565b6020026020010151886040015160405160200161179991906158d9565b60405160208183030381529060405289600001516003815181106117bf576117bf615c0e565b60200260200101516040516020016117dd9796959493929190615592565b6040516020818303038152906040528051906020012090506118058460000151826004611cfc565b949350505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177561183881336122b4565b50600a55565b600061184e836020015183611718565b905060005b8351518110156112a657818460000151828151811061187457611874615c0e565b602002602001015160600151146118d557604051600080516020615c8f833981519152815260206004820152601f60248201527f706172656e7448617368206f722072656365697074486173682077726f6e67006044820152606401610aa2565b6118fb846000015182815181106118ee576118ee615c0e565b6020026020010151612c0a565b91506119238460000151828151811061191657611916615c0e565b60200260200101516109d8565b8061192d81615b81565b915050611853565b60008281526020819052604090206001015461195181336122b4565b6109d3838361285e565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526004602052604090205416806119d857604051600080516020615c8f833981519152815260206004820152601560248201527f556e6b6e6f776e20746f6b656e206164647265737300000000000000000000006044820152606401610aa2565b6005543414611a3157604051600080516020615c8f833981519152815260206004820152601160248201527f53656e742076616c756520213d206665650000000000000000000000000000006044820152606401610aa2565b60065460405173ffffffffffffffffffffffffffffffffffffffff909116903480156108fc02916000818181858888f19350505050158015611a77573d6000803e3d6000fd5b506040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff8516906323b872dd90606401602060405180830381600087803b158015611aec57600080fd5b505af1158015611b00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2491906153af565b611b7857604051600080516020615c8f833981519152815260206004820152601360248201527f4661696c207472616e7366657220636f696e73000000000000000000000000006044820152606401610aa2565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff80871682528581166020830190815282840186815260028054600181018255600091909152935160039094027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace8101805495851673ffffffffffffffffffffffffffffffffffffffff1996871617905591517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf830180549190941694169390931790915590517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600c54600554915133927ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b56892611ca392909190918252602082015260400190565b60405180910390a26112a6612714565b6000611cbf81336122b4565b506010805473ffffffffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006060825b8551811015611da257858181518110611d1d57611d1d615c0e565b60200260200101518587836001611d349190615ab3565b81518110611d4457611d44615c0e565b6020026020010151604051602001611d5e9392919061564a565b60405160208183030381529060405291506020825111611d8657611d8182615b15565b611d8e565b815160208301205b9450611d9b600282615ab3565b9050611d02565b5092949350505050565b60028410611df557600f6000611dc3600287615afe565b815260200190815260200160002060008082016000611de29190614b2c565b5060006102008201819055610201909101555b80516000858152600f60205260408120905b82811015611e5057838181518110611e2157611e21615c0e565b602002602001015182826102008110611e3c57611e3c615c0e565b015580611e4881615b81565b915050611e07565b505050600093845250600f60205260409092206102008101919091556102010155565b60015460ff1615611ece57604051600080516020615c8f833981519152815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610aa2565b600d548114611f2757604051600080516020615c8f833981519152815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e74000000006044820152606401610aa2565b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015611fc25760008481526020908190206040805160608101825260038602909201805473ffffffffffffffffffffffffffffffffffffffff908116845260018083015490911684860152600290910154918301919091529083529092019101611f5b565b5050505081526020016001820154815250509050600081602001511161203257604051600080516020615c8f833981519152815260206004820181905260248201527f6e6f206c6f636b6564207472616e7366657273207769746820746869732069646044820152606401610aa2565b4281602001511061208d57604051600080516020615c8f833981519152815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f74207965742070617373656400000000006044820152606401610aa2565b805160005b8151811015612222578181815181106120ad576120ad615c0e565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8383815181106120e6576120e6615c0e565b60200260200101516020015184848151811061210457612104615c0e565b6020026020010151604001516040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161216a92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381600087803b15801561218457600080fd5b505af1158015612198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121bc91906153af565b61221057604051600080516020615c8f833981519152815260206004820152601360248201527f4661696c207472616e7366657220636f696e73000000000000000000000000006044820152606401610aa2565b8061221a81615b81565b915050612092565b5060008381526003602052604081209061223c8282614b0b565b50600060019190910181905560405184917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a261227b836001615ab3565b600d55505050565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217756122ae81336122b4565b50600855565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610b2b5761230a8173ffffffffffffffffffffffffffffffffffffffff166014612cb7565b612315836020612cb7565b604051602001612326929190615858565b60408051601f1981840301815290829052600080516020615c8f8339815191528252610aa2916004016159bb565b80518251146123d357604051600080516020615c8f833981519152815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d65006064820152608401610aa2565b815160005b818110156112a6578281815181106123f2576123f2615c0e565b60200260200101516004600086848151811061241057612410615c0e565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061249b90615b81565b9150506123d8565b6000815160086124b39190615adf565b6124bf90610100615afe565b6124c883615b15565b60029190910a900492915050565b60008082602001518360400151846060015185608001518660a001518760c001518860e001518961010001518a610160015160405160200161252099989796959493929190615729565b60408051601f1981840301815291905280516020909101209392505050565b600061254d61753088615acb565b9050600061255e8787868686612f0d565b905061256c85600019615acb565b8111156125c357604051600080516020615c8f833981519152815260206004820152601960248201527f45746861736820646966666963756c747920746f6f206c6f77000000000000006044820152606401610aa2565b5050505050505050565b600b600081546125dc90615b81565b91829055508114610a1d57604051600080516020615c8f833981519152815260206004820152601460248201527f4576656e744964206f7574206f66206f726465720000000000000000000000006044820152606401610aa2565b600a546126449042615ab3565b6000828152600360205260408120600101919091555b82518110156109d3576000828152600360205260409020835184908390811061268557612685615c0e565b6020908102919091018101518254600180820185556000948552938390208251600390920201805473ffffffffffffffffffffffffffffffffffffffff1990811673ffffffffffffffffffffffffffffffffffffffff9384161782559383015194810180549094169490911693909317909155604001516002909101558061270c81615b81565b91505061265a565b6000600954426127249190615acb565b9050600e548114610a1d57600c805490600061273f83615b81565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae26002604051612773919061594b565b60405180910390a261278760026000614b0b565b600e55565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610b2b5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff851684529091529020805460ff191660011790556128003390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1615610b2b5760008281526020818152604080832073ffffffffffffffffffffffffffffffffffffffff85168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff1661295157604051600080516020615c8f833981519152815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610aa2565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60015460ff1615612a0357604051600080516020615c8f833981519152815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610aa2565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2583361297e565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b6020811015612ae957818181518110612a7f57612a7f615c0e565b6020910101517f010000000000000000000000000000000000000000000000000000000000000090819004027fff000000000000000000000000000000000000000000000000000000000000001615612ad757612ae9565b80612ae181615b81565b915050612a64565b6000612af6826020615afe565b67ffffffffffffffff811115612b0e57612b0e615c3d565b6040519080825280601f01601f191660200182016040528015612b38576020820181803683370190505b50905060005b8151811015612c01578383612b5281615b81565b945081518110612b6457612b64615c0e565b60200101517f010000000000000000000000000000000000000000000000000000000000000090047f010000000000000000000000000000000000000000000000000000000000000002828281518110612bc057612bc0615c0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080612bf981615b81565b915050612b3e565b50949350505050565b600081600001518260400151836060015184608001518560a001518660c00151604051602001612c3f969594939291906156b0565b60408051601f198184030181529082905260e08401516101008501516101208601516101408701516101608801519495612c7c95906020016157ed565b60408051601f1981840301815290829052612c9a9291602001615681565b604051602081830303815290604052805190602001209050919050565b60606000612cc6836002615adf565b612cd1906002615ab3565b67ffffffffffffffff811115612ce957612ce9615c3d565b6040519080825280601f01601f191660200182016040528015612d13576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612d4a57612d4a615c0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612dad57612dad615c0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612de9846002615adf565b612df4906001615ab3565b90505b6001811115612eaf577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612e3557612e35615c0e565b1a7f010000000000000000000000000000000000000000000000000000000000000002828281518110612e6a57612e6a615c0e565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601090940493612ea881615b6a565b9050612df7565b508315612f0657604051600080516020615c8f833981519152815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610aa2565b9392505050565b600080612f1a8787613204565b9050612f24614b3c565b612f2c614b5b565b6000858152600f602052604081206102018101546102009091015490918082612f9f57604051600080516020615c8f833981519152815260206004820152601160248201527f45706f636844617461206e6f74207365740000000000000000000000000000006044820152606401610aa2565b600091505b6010821015612fd657602082028781018051918801918252516102009091015281612fce81615b81565b925050612fa4565b600091505b6040821015613164578651600090849061301790851889612ffd602088615b9c565b6020811061300d5761300d615c0e565b60200201516132ab565b6130219190615b9c565b905061302d8a826132cb565b61303a82858f8f8a613346565b1461308f57604051600080516020615c8f833981519152815260206004820152600a60248201527f506f57206661696c6564000000000000000000000000000000000000000000006044820152606401610aa2565b600091505b600882101561315157602060808481028e0182810180519386028b01805163ffffffff9586166301000193918202188616825260408401805161010084018051918916918402919091188816905260608501805161020085018051918a1691850291909118891690529490950180516103009093018051938816939092029290921890951690945280516401000000009081900490915282518190049092528051829004905281510490528161314981615b81565b925050613094565b508161315c81615b81565b925050612fdb565b600091505b60208210156131e9576131b66131aa61319e88856020811061318d5761318d615c0e565b602002015189612ffd876001615ab3565b88612ffd866002615ab3565b87612ffd856003615ab3565b856131c2600485615acb565b600881106131d2576131d2615c0e565b60200201526131e2600483615ab3565b9150613169565b6131f38786613583565b9d9c50505050505050505050505050565b61320c614b7a565b613214614b99565b61321d846138e2565b67ffffffffffffffff81168252935061323f6801000000000000000085615acb565b67ffffffffffffffff8116602083015293506132646801000000000000000085615acb565b67ffffffffffffffff8116604083015293506132896801000000000000000085615acb565b67ffffffffffffffff8116606083015260808201849052935061180581613924565b6000816132bc846301000193615adf565b1863ffffffff16905092915050565b6000828152600f60205260408120610201810154600290810a8404918391830461020081106132fc576132fc615c0e565b0154905061330b600283615b9c565b61332a576fffffffffffffffffffffffffffffffff1691506109989050565b7001000000000000000000000000000000009004949350505050565b6000806133538587613c3e565b6fffffffffffffffffffffffffffffffff169050600080808080613378600289615b9c565b600290980497119050600061338d888c615adf565b905081156133a25761339f8b82615ab3565b90505b60005b888110156134db5760208282010260208b01015193508c600116600014156133e4578695506fffffffffffffffffffffffffffffffff841694506133fd565b6fffffffffffffffffffffffffffffffff841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6fffffffffffffffffffffffffffffffff16965060018d166134695786955070010000000000000000000000000000000084049450613483565b700100000000000000000000000000000000840495508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6fffffffffffffffffffffffffffffffff169650806134d381615b81565b9150506133a5565b82156135725760208282010260208b01015193508c60011660001415613518578695506fffffffffffffffffffffffffffffffff84169450613531565b6fffffffffffffffffffffffffffffffff841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206fffffffffffffffffffffffffffffffff1696505b50949b9a5050505050505050505050565b60008083600760200201516135a5906c01000000000000000000000000615adf565b60c08501516135bd9068010000000000000000615adf565b60a08601516135d190640100000000615adf565b60808701516135e09190615ab3565b6135ea9190615ab3565b6135f49190615ab3565b61360f90700100000000000000000000000000000000615adf565b606085015161362b906c01000000000000000000000000615adf565b60408601516136439068010000000000000000615adf565b602087015161365790640100000000615adf565b87516136639190615ab3565b61366d9190615ab3565b6136779190615ab3565b6136819190615ab3565b9050600084600f60200201516136a4906c01000000000000000000000000615adf565b6101c08601516136bd9068010000000000000000615adf565b6101a08701516136d290640100000000615adf565b6101808801516136e29190615ab3565b6136ec9190615ab3565b6136f69190615ab3565b61371190700100000000000000000000000000000000615adf565b61016086015161372e906c01000000000000000000000000615adf565b6101408701516137479068010000000000000000615adf565b61012088015161375c90640100000000615adf565b61010089015161376c9190615ab3565b6137769190615ab3565b6137809190615ab3565b61378a9190615ab3565b9050600084600760200201516137ad906c01000000000000000000000000615adf565b60c08601516137c59068010000000000000000615adf565b60a08701516137d990640100000000615adf565b60808801516137e89190615ab3565b6137f29190615ab3565b6137fc9190615ab3565b61381790700100000000000000000000000000000000615adf565b6060860151613833906c01000000000000000000000000615adf565b604087015161384b9068010000000000000000615adf565b602088015161385f90640100000000615adf565b885161386b9190615ab3565b6138759190615ab3565b61387f9190615ab3565b6138899190615ab3565b9050613894836138e2565b61389d836138e2565b6138a6836138e2565b604080516020810194909452830191909152606082015260800160408051808303601f1901815291905280516020909101209695505050505050565b60008060005b602081101561391d5761390260ff85166101008402615ab3565b6101009094049391508061391581615b81565b9150506138e8565b5092915050565b61392c614b7a565b61393860096008615adf565b60481461398f57604051600080516020615c8f833981519152815260206004820152600c60248201527f73706f6e6765206572726f7200000000000000000000000000000000000000006044820152606401610aa2565b600160a08301526780000000000000006101008301526048600860006139b6600983615adf565b90506139c0614bb8565b600080805b6139cf8786615acb565b831015613af257600091505b6005821015613ad5575060005b6005811015613ac3576139fb8688615acb565b613a06836005615adf565b613a109083615ab3565b1015613ab15788613a22836005615adf565b82613a2e866009615adf565b613a389190615ab3565b613a429190615ab3565b60098110613a5257613a52615c0e565b60200201518483613a64846005615adf565b613a6e9190615ab3565b60198110613a7e57613a7e615c0e565b6020020151188483613a91846005615adf565b613a9b9190615ab3565b60198110613aab57613aab615c0e565b60200201525b80613abb81615b81565b9150506139e8565b81613acd81615b81565b9250506139db565b613ade84613d3f565b935082613aea81615b81565b9350506139c5565b613afa614b7a565b60005b6010811015613c3057600093505b6005841015613c2b57600092505b6005831015613c1957613b2c888a615acb565b613b37856005615adf565b613b419085615ab3565b108015613b4e5750601081105b15613c07578584613b60856005615adf565b613b6a9190615ab3565b60198110613b7a57613b7a615c0e565b602002015163ffffffff16828260108110613b9757613b97615c0e565b60200201526401000000008685613baf866005615adf565b613bb99190615ab3565b60198110613bc957613bc9615c0e565b6020020151613bd89190615acb565b82613be4836001615ab3565b60108110613bf457613bf4615c0e565b6020020152613c04600282615ab3565b90505b82613c1181615b81565b935050613b19565b83613c2381615b81565b945050613b0b565b613afd565b509998505050505050505050565b600082613c4c836004615adf565b81518110613c5c57613c5c615c0e565b602002602001015183836004613c729190615adf565b613c7d906001615ab3565b81518110613c8d57613c8d615c0e565b602002602001015184846004613ca39190615adf565b613cae906002615ab3565b81518110613cbe57613cbe615c0e565b602002602001015185856004613cd49190615adf565b613cdf906003615ab3565b81518110613cef57613cef615c0e565b6020026020010151604051602001613d20949392919093845260208401929092526040830152606082015260800190565b60408051808303601f1901815291905280516020909101209392505050565b613d47614bb8565b613d4f614bb8565b613d57614bd7565b613d5f614bd7565b600060405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b6018811015614b00576080808801516060808a01516040808c01516020808e01518e511890911890921890931888526101208b01516101008c015160e08d015160c08e015160a08f0151181818189088018190526101c08b01516101a08c01516101808d01516101608e01516101408f015118181818928801929092526102608a01516102408b01516102208c01516102008d01516101e08e015118181818908701526103008901516102e08a01516102c08b01516102a08c01516102808d01511818181891860191909152613f649067800000000000000090615acb565b6020850151613f74906002615adf565b608086015167ffffffffffffffff91909116919091171883526040840151613fa59067800000000000000090615acb565b6040850151613fb5906002615adf565b855167ffffffffffffffff91909116919091171860208401526060840151613fe69067800000000000000090615acb565b6060850151613ff6906002615adf565b67ffffffffffffffff16178460016020020151188360026020020152678000000000000000846004602002015161402d9190615acb565b608085015161403d906002615adf565b604086015167ffffffffffffffff9190911691909117186060840152835161406e9067800000000000000090615acb565b845161407b906002615adf565b60608087015167ffffffffffffffff929092169290921718608080860191825285518a5118808b52865160208c81018051909218825288516040808f01805190921890915289518e8801805190911890528951948e0180519095189094528801805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291870180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292860180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a01805190911890529086525161420690631000000090615acb565b602088015161421a90641000000000615adf565b67ffffffffffffffff161761010086015260408701516142439067200000000000000090615acb565b6040880151614253906008615adf565b67ffffffffffffffff16176101608601526060870151614277906280000090615acb565b606088015161428c9065020000000000615adf565b67ffffffffffffffff161761026086015260808701516142b3906540000000000090615acb565b60808801516142c59062040000615adf565b67ffffffffffffffff16176102c086015260a08701516142ee9067800000000000000090615acb565b60a08801516142fe906002615adf565b67ffffffffffffffff1617604086015260c0870151614321906210000090615acb565b60c08801516143369065100000000000615adf565b67ffffffffffffffff161760a086015260e087015161435d90664000000000000090615acb565b60e088015161436e90610400615adf565b67ffffffffffffffff16176101a0860152610100870151614393906208000090615acb565b6101008801516143a99065200000000000615adf565b67ffffffffffffffff16176102008601526101208701516143d39067400000000000000090615acb565b6101208801516143e4906004615adf565b67ffffffffffffffff161761030086015261014087015161440790600490615acb565b61014088015161441f90674000000000000000615adf565b67ffffffffffffffff161760808601526101608701516144489067040000000000000090615acb565b610160880151614459906040615adf565b67ffffffffffffffff161760e086015261018087015161447d906220000090615acb565b6101808801516144939065080000000000615adf565b67ffffffffffffffff16176101408601526101a08701516144bc90660200000000000090615acb565b6101a08801516144ce90618000615adf565b67ffffffffffffffff16176102408601526101c08701516144f190600890615acb565b6101c088015161450990672000000000000000615adf565b67ffffffffffffffff16176102a08601526101e08701516145309064100000000090615acb565b6101e0880151614544906310000000615adf565b67ffffffffffffffff16176020860152610200878101516145659190615acb565b61020088015161457c906680000000000000615adf565b67ffffffffffffffff16176101208601526102208701516145a39064800000000090615acb565b6102208801516145b7906302000000615adf565b67ffffffffffffffff16176101808601526102408701516145df906508000000000090615acb565b6102408801516145f29062200000615adf565b67ffffffffffffffff16176101e08601526102608701516146169061010090615acb565b61026088015161462e90670100000000000000615adf565b67ffffffffffffffff16176102e08601526102808701516146559064200000000090615acb565b610280880151614669906308000000615adf565b67ffffffffffffffff161760608601526102a0870151614690906510000000000090615acb565b6102a08801516146a39062100000615adf565b67ffffffffffffffff161760c08601526102c08701516146c890630200000090615acb565b6102c08801516146dd90648000000000615adf565b67ffffffffffffffff16176101c08601526102e08701516147079067010000000000000090615acb565b6102e088015161471990610100615adf565b67ffffffffffffffff161761022086015261030087015161474290660400000000000090615acb565b61030088015161475490614000615adf565b67ffffffffffffffff1617856014602002015284600a602002015185600560200201511916856000602002015118876000602002015284600b602002015185600660200201511916856001602002015118876001602002015284600c602002015185600760200201511916856002602002015118876002602002015284600d602002015185600860200201511916856003602002015118876003602002015284600e602002015185600960200201511916856004602002015118876004602002015284600f602002015185600a602002015119168560056020020151188760056020020152846010602002015185600b602002015119168560066020020151188760066020020152846011602002015185600c602002015119168560076020020151188760076020020152846012602002015185600d602002015119168560086020020151188760086020020152846013602002015185600e602002015119168560096020020151188760096020020152846014602002015185600f6020020151191685600a60200201511887600a602002015284601560200201518560106020020151191685600b60200201511887600b602002015284601660200201518560116020020151191685600c60200201511887600c602002015284601760200201518560126020020151191685600d60200201511887600d602002015284601860200201518560136020020151191685600e60200201511887600e602002015284600060200201518560146020020151191685600f60200201511887600fae457614ae4615c0e565b6020020151875118875280614af881615b81565b915050613e85565b509495945050505050565b5080546000825560030290600052602060002090810190610a1d9190614bf5565b50610a1d90610200810190614c39565b6040518061040001604052806020906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b6040518061020001604052806010906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b5b80821115614c3557805473ffffffffffffffffffffffffffffffffffffffff199081168255600182018054909116905560006002820155600301614bf6565b5090565b5b80821115614c355760008155600101614c3a565b600082601f830112614c5f57600080fd5b81356020614c74614c6f83615a8f565b615a5e565b8281528181019085830183850287018401881015614c9157600080fd5b60005b85811015614cb9578135614ca781615c6c565b84529284019290840190600101614c94565b5090979650505050505050565b600082601f830112614cd757600080fd5b81356020614ce7614c6f83615a8f565b8281528181019085830183850287018401881015614d0457600080fd5b6000805b86811015614d4757823567ffffffffffffffff811115614d26578283fd5b614d348b88838d0101614db2565b8652509385019391850191600101614d08565b509198975050505050505050565b600082601f830112614d6657600080fd5b81356020614d76614c6f83615a8f565b8281528181019085830183850287018401881015614d9357600080fd5b60005b85811015614cb957813584529284019290840190600101614d96565b600082601f830112614dc357600080fd5b813567ffffffffffffffff811115614ddd57614ddd615c3d565b614df06020601f19601f84011601615a5e565b818152846020838601011115614e0557600080fd5b816020850160208301376000918101602001919091529392505050565b60006101c08284031215614e3557600080fd5b614e3d6159ee565b9050813567ffffffffffffffff80821115614e5757600080fd5b614e6385838601614db2565b83526020840135915080821115614e7957600080fd5b614e8585838601614db2565b60208401526040840135915080821115614e9e57600080fd5b614eaa85838601614db2565b6040840152606084013560608401526080840135915080821115614ecd57600080fd5b614ed985838601614db2565b608084015260a0840135915080821115614ef257600080fd5b614efe85838601614db2565b60a084015260c0840135915080821115614f1757600080fd5b614f2385838601614db2565b60c084015260e0840135915080821115614f3c57600080fd5b614f4885838601614db2565b60e084015261010091508184013581811115614f6357600080fd5b614f6f86828701614db2565b838501525061012091508184013581811115614f8a57600080fd5b614f9686828701614db2565b838501525061014091508184013581811115614fb157600080fd5b614fbd86828701614db2565b838501525061016091508184013581811115614fd857600080fd5b614fe486828701614db2565b838501525061018091508184013581811115614fff57600080fd5b61500b86828701614d55565b83850152506101a09150818401358181111561502657600080fd5b61503286828701614d55565b8385015250505092915050565b60006040828403121561505157600080fd5b615059615a18565b9050813567ffffffffffffffff8082111561507357600080fd5b818401915084601f83011261508757600080fd5b81356020615097614c6f83615a8f565b82815281810190858301838502870184018a10156150b457600080fd5b60005b858110156150ef578135878111156150ce57600080fd5b6150dc8c87838c0101614e22565b85525092840192908401906001016150b7565b50508652508581013593508284111561510757600080fd5b61511387858801615121565b818601525050505092915050565b6000606080838503121561513457600080fd5b61513c615a3b565b9150823567ffffffffffffffff8082111561515657600080fd5b61516286838701614cc6565b84526020915081850135828501526040808601358281111561518357600080fd5b86019150601f8201871361519657600080fd5b81356151a4614c6f82615a8f565b81815284810190848601878402860187018b10156151c157600080fd5b60009550855b8481101561521d5788828d0312156151dd578687fd5b6151e5615a3b565b82356151f081615c6c565b8152828901356151ff81615c6c565b818a01528287013587820152845292870192908801906001016151c7565b505080848901525050505050505092915050565b60006020828403121561524357600080fd5b8135612f0681615c6c565b6000806040838503121561526157600080fd5b823561526c81615c6c565b9150602083013561527c81615c6c565b809150509250929050565b60008060006060848603121561529c57600080fd5b83356152a781615c6c565b925060208401356152b781615c6c565b929592945050506040919091013590565b6000602082840312156152da57600080fd5b813567ffffffffffffffff8111156152f157600080fd5b61180584828501614c4e565b6000806040838503121561531057600080fd5b823567ffffffffffffffff8082111561532857600080fd5b61533486838701614c4e565b9350602085013591508082111561534a57600080fd5b5061535785828601614c4e565b9150509250929050565b60008060006060848603121561537657600080fd5b833567ffffffffffffffff81111561538d57600080fd5b61539986828701614cc6565b9660208601359650604090950135949350505050565b6000602082840312156153c157600080fd5b81518015158114612f0657600080fd5b6000602082840312156153e357600080fd5b5035919050565b600080604083850312156153fd57600080fd5b82359150602083013561527c81615c6c565b60006020828403121561542157600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114612f0657600080fd5b60006020828403121561546357600080fd5b813567ffffffffffffffff81111561547a57600080fd5b61180584828501614e22565b60006020828403121561549857600080fd5b813567ffffffffffffffff8111156154af57600080fd5b6118058482850161503f565b600080604083850312156154ce57600080fd5b823567ffffffffffffffff8111156154e557600080fd5b6154f18582860161503f565b925050602083013561527c81615c6c565b6000806040838503121561551557600080fd5b823567ffffffffffffffff81111561552c57600080fd5b6154f185828601615121565b6000806000806080858703121561554e57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff81111561557a57600080fd5b61558687828801614d55565b91505092959194509250565b6000885160206155a58285838e01615b3e565b81840191506c0100000000000000000000000073ffffffffffffffffffffffffffffffffffffffff8b16028252601489516155e581838601858e01615b3e565b89519301926155f981838601858d01615b3e565b885193019261560d81838601858c01615b3e565b875193019261562181838601858b01615b3e565b865193019261563581838601858a01615b3e565b929092019091019a9950505050505050505050565b6000845161565c818460208901615b3e565b82018481528351615674816020808501908801615b3e565b0160200195945050505050565b60008351615693818460208801615b3e565b8351908301906156a7818360208801615b3e565b01949350505050565b6000875160206156c38285838d01615b3e565b8851918401916156d68184848d01615b3e565b80830192505087825286516156f081838501848b01615b3e565b865192019161570481838501848a01615b3e565b855192019161571881838501848901615b3e565b919091010198975050505050505050565b60008a5161573b818460208f01615b3e565b8a5161574d8183860160208f01615b3e565b908301018981528851615767816020808501908d01615b3e565b885161577c8160208486010160208d01615b3e565b8851929091010190615795816020808501908b01615b3e565b86516157aa8160208486010160208b01615b3e565b86519290910101906157c3816020808501908901615b3e565b84516157d88160208486010160208901615b3e565b9101016020019b9a5050505050505050505050565b600086516157ff818460208b01615b3e565b865190830190615813818360208b01615b3e565b8651910190615826818360208a01615b3e565b8551910190615839818360208901615b3e565b845191019061584c818360208801615b3e565b01979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351615890816017850160208801615b3e565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516158cd816028840160208801615b3e565b01602801949350505050565b602080825282518282018190526000919060409081850190868401855b8281101561593e578151805173ffffffffffffffffffffffffffffffffffffffff908116865287820151168786015285015185850152606090930192908501906001016158f6565b5091979650505050505050565b60006020808301818452808554808352604092508286019150866000528360002060005b8281101561593e57815473ffffffffffffffffffffffffffffffffffffffff9081168552600180840154909116878601526002830154868601526060909401936003909201910161596f565b60208152600082518060208401526159da816040850160208701615b3e565b601f01601f19169190910160400192915050565b6040516101c0810167ffffffffffffffff81118282101715615a1257615a12615c3d565b60405290565b6040805190810167ffffffffffffffff81118282101715615a1257615a12615c3d565b6040516060810167ffffffffffffffff81118282101715615a1257615a12615c3d565b604051601f8201601f1916810167ffffffffffffffff81118282101715615a8757615a87615c3d565b604052919050565b600067ffffffffffffffff821115615aa957615aa9615c3d565b5060209081020190565b60008219821115615ac657615ac6615bb0565b500190565b600082615ada57615ada615bdf565b500490565b6000816000190483118215151615615af957615af9615bb0565b500290565b600082821015615b1057615b10615bb0565b500390565b80516020808301519190811015615b38578060200360080260020a600003821691505b50919050565b60005b83811015615b59578181015183820152602001615b41565b838111156112a65750506000910152565b600081615b7957615b79615bb0565b506000190190565b6000600019821415615b9557615b95615bb0565b5060010190565b600082615bab57615bab615bdf565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610a1d57600080fdfe08c379a000000000000000000000000000000000000000000000000000000000a26469706673582212200de49f1cd991e05196ec4bc16c3f8137a6bd585cdf01cf17e829a4d32425bd5c64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 397,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5473,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "queue",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Transfer)6187_storage)dyn_storage"
      },
      {
        "astId": 5478,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "lockedTransfers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LockedTransfers)6204_storage)"
      },
      {
        "astId": 5482,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5484,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "fee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5486,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 5488,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "sideBridgeAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 5490,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "minSafetyBlocks",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5492,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "timeframeSeconds",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 5494,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "lockTime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5496,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "inputEventId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5498,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "outputEventId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5500,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "oldestLockedEventId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5502,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "lastTimeframe",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 4239,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "epochData",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(EthashCacheOptData)4234_storage)"
      },
      {
        "astId": 6372,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "ambWrapperAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Transfer)6187_storage)dyn_storage": {
        "base": "t_struct(Transfer)6187_storage",
        "encoding": "dynamic_array",
        "label": "struct CommonStructs.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)512_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[512]",
        "numberOfBytes": "16384"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(EthashCacheOptData)4234_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ethash.EthashCacheOptData)",
        "numberOfBytes": "32",
        "value": "t_struct(EthashCacheOptData)4234_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedTransfers)6204_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonStructs.LockedTransfers)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedTransfers)6204_storage"
      },
      "t_struct(EthashCacheOptData)4234_storage": {
        "encoding": "inplace",
        "label": "struct Ethash.EthashCacheOptData",
        "members": [
          {
            "astId": 4229,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "merkleNodes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)512_storage"
          },
          {
            "astId": 4231,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "fullSizeIn128Resultion",
            "offset": 0,
            "slot": "512",
            "type": "t_uint256"
          },
          {
            "astId": 4233,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "branchDepth",
            "offset": 0,
            "slot": "513",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "16448"
      },
      "t_struct(LockedTransfers)6204_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.LockedTransfers",
        "members": [
          {
            "astId": 6201,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "transfers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transfer)6187_storage)dyn_storage"
          },
          {
            "astId": 6203,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transfer)6187_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.Transfer",
        "members": [
          {
            "astId": 6182,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6184,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6186,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}