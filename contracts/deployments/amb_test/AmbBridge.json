{
  "address": "0xdD97591Fd05f082d363CCe6e793b778cbC728085",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sideBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokenThisAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokenSideAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeframeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSafetyBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.ConstructorArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "queue",
          "type": "tuple[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokentTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockTime_",
          "type": "uint256"
        }
      ],
      "name": "changeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSafetyBlocks_",
          "type": "uint256"
        }
      ],
      "name": "changeMinSafetyBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframeSeconds_",
          "type": "uint256"
        }
      ],
      "name": "changeTimeframeSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "getLockedTransfers",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonStructs.Transfer[]",
              "name": "transfers",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.LockedTransfers",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochIndex",
          "type": "uint256"
        }
      ],
      "name": "isEpochDataSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSafetyBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestLockedEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "removeLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fullSizeIn128Resultion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "branchDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "merkleNodes",
          "type": "uint256[]"
        }
      ],
      "name": "setEpochData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sideBridgeAddress",
          "type": "address"
        }
      ],
      "name": "setSideBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes3",
                  "name": "p0WithNonce",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes3",
                  "name": "p0WithoutNonce",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes",
                  "name": "p1",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentOrReceiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "difficulty",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "number",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p4",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p5",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "nonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p6",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256[]",
                  "name": "dataSetLookup",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "witnessForLookup",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct CheckPoW.BlockPoW[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receiptProof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "eventId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            }
          ],
          "internalType": "struct CheckPoW.PoWProof",
          "name": "powProof",
          "type": "tuple"
        }
      ],
      "name": "submitTransferPoW",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeframeSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenSideAddress",
          "type": "address"
        }
      ],
      "name": "tokensAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenSideAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensAddBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        }
      ],
      "name": "tokensRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensRemoveBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "unlockTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unwrapSide",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "wrapWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5b03daed76a57395493b8967863698ae8c7fd1b2fb58f0e0c316ca2d16aa5399",
  "receipt": {
    "to": null,
    "from": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
    "contractAddress": "0xdD97591Fd05f082d363CCe6e793b778cbC728085",
    "transactionIndex": 0,
    "gasUsed": "6227194",
    "logsBloom": "0x00000004000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010020000000000000000000000000000000020000000000000000000a00000000000000000800000000000000000000000000000000000000000000004000000000000000020000000000000000000000000000000000040000000000000000000000000000005000000000000000000000400000000000000000000000000010000000000100000000000020000000000000000000000000080000000000000000000000000000000000000000",
    "blockHash": "0x9e36712171d10efb832a23e7e4054e0f5a2039cab4dd3d06b5ff0f05759083c6",
    "transactionHash": "0x5b03daed76a57395493b8967863698ae8c7fd1b2fb58f0e0c316ca2d16aa5399",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 47189,
        "transactionHash": "0x5b03daed76a57395493b8967863698ae8c7fd1b2fb58f0e0c316ca2d16aa5399",
        "address": "0xdD97591Fd05f082d363CCe6e793b778cbC728085",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9e36712171d10efb832a23e7e4054e0f5a2039cab4dd3d06b5ff0f05759083c6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 47189,
        "transactionHash": "0x5b03daed76a57395493b8967863698ae8c7fd1b2fb58f0e0c316ca2d16aa5399",
        "address": "0xdD97591Fd05f082d363CCe6e793b778cbC728085",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x9e36712171d10efb832a23e7e4054e0f5a2039cab4dd3d06b5ff0f05759083c6"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 47189,
        "transactionHash": "0x5b03daed76a57395493b8967863698ae8c7fd1b2fb58f0e0c316ca2d16aa5399",
        "address": "0xdD97591Fd05f082d363CCe6e793b778cbC728085",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe",
          "0x000000000000000000000000295c2707319ad4beca6b5bb4086617fd6f240cfe"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x9e36712171d10efb832a23e7e4054e0f5a2039cab4dd3d06b5ff0f05759083c6"
      }
    ],
    "blockNumber": 47189,
    "cumulativeGasUsed": "6227194",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "sideBridgeAddress": "0x0000000000000000000000000000000000000000",
      "adminAddress": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
      "relayAddress": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
      "wrappingTokenAddress": "0xBFe020d24F462c65a7A067BbAA1d6fbF6a827347",
      "tokenThisAddresses": [
        "0xBFe020d24F462c65a7A067BbAA1d6fbF6a827347",
        "0xEb58F86DaDde6B65dB2ce2091C89E4fE9f49aAf4",
        "0x0000000000000000000000000000000000000000"
      ],
      "tokenSideAddresses": [
        "0x77Ed552De89C4b128F855245aB56873B30715A58",
        "0xc778417E063141139Fce010982780140Aa0cD5Ab",
        "0xEb58F86DaDde6B65dB2ce2091C89E4fE9f49aAf4"
      ],
      "fee": 1000,
      "feeRecipient": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
      "timeframeSeconds": 1,
      "lockTime": 1,
      "minSafetyBlocks": 10
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "9b8683db637c59c3f941db2b1491c866",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"queue\",\"type\":\"tuple[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokentTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks_\",\"type\":\"uint256\"}],\"name\":\"changeMinSafetyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds_\",\"type\":\"uint256\"}],\"name\":\"changeTimeframeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getLockedTransfers\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.LockedTransfers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochIndex\",\"type\":\"uint256\"}],\"name\":\"isEpochDataSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSafetyBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestLockedEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"removeLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullSizeIn128Resultion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"branchDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"merkleNodes\",\"type\":\"uint256[]\"}],\"name\":\"setEpochData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideBridgeAddress\",\"type\":\"address\"}],\"name\":\"setSideBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"p0WithNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"p0WithoutNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes\",\"name\":\"p1\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentOrReceiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"number\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p5\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p6\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CheckPoW.BlockPoW[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receiptProof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"internalType\":\"struct CheckPoW.PoWProof\",\"name\":\"powProof\",\"type\":\"tuple\"}],\"name\":\"submitTransferPoW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSideAddress\",\"type\":\"address\"}],\"name\":\"tokensAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensAddBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"}],\"name\":\"tokensRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensRemoveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"unlockTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrapSide\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"wrapWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/eth/AmbBridge.sol\":\"AmbBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/checks/CheckPoW.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\nimport \\\"./CheckReceiptsProof.sol\\\";\\nimport \\\"./CheckPoW_Ethash.sol\\\";\\n\\ncontract CheckPoW is CheckReceiptsProof, Ethash  {\\n    struct BlockPoW {\\n        bytes3 p0WithNonce;\\n        bytes3 p0WithoutNonce;\\n\\n        bytes p1;\\n        bytes32 parentOrReceiptHash;\\n        bytes p2;\\n        bytes difficulty;\\n        bytes p3;\\n        bytes number;\\n        bytes p4;  // end when extra end\\n        bytes p5;  // after extra\\n        bytes nonce;\\n        bytes p6;\\n\\n        uint[] dataSetLookup;\\n        uint[] witnessForLookup;\\n    }\\n\\n    struct PoWProof {\\n        BlockPoW[] blocks;\\n        CommonStructs.TransferProof transfer;\\n    }\\n\\n    function checkPoW_(PoWProof memory powProof, address sideBridgeAddress) internal view\\n    {\\n        bytes32 hash = calcTransferReceiptsHash(powProof.transfer, sideBridgeAddress);\\n        for (uint i = 0; i < powProof.blocks.length; i++) {\\n            require(powProof.blocks[i].parentOrReceiptHash == hash, \\\"parentHash or receiptHash wrong\\\");\\n            hash = blockHash(powProof.blocks[i]);\\n\\n            verifyEthash(powProof.blocks[i]);\\n        }\\n    }\\n\\n\\n    function verifyEthash(BlockPoW memory block_) internal view {\\n        verifyPoW(\\n            bytesToUint(block_.number),\\n            blockHashWithoutNonce(block_),\\n            bytesToUint(block_.nonce),\\n            bytesToUint(block_.difficulty),\\n            block_.dataSetLookup,\\n            block_.witnessForLookup\\n        );\\n    }\\n\\n    function blockHash(BlockPoW memory block_) internal pure returns (bytes32) {\\n        // Note: too much arguments in abi.encodePacked() function cause CompilerError: Stack too deep...\\n        return keccak256(abi.encodePacked(\\n                abi.encodePacked(\\n                    block_.p0WithNonce,\\n                    block_.p1,\\n                    block_.parentOrReceiptHash,\\n                    block_.p2,\\n                    block_.difficulty,\\n                    block_.p3\\n                ),\\n                abi.encodePacked(\\n                    block_.number,\\n                    block_.p4,\\n                    block_.p5,\\n                    block_.nonce,\\n                    block_.p6\\n                )\\n            ));\\n    }\\n\\n    function blockHashWithoutNonce(BlockPoW memory block_) internal pure returns (bytes32) {\\n        bytes memory rlpHeaderHashWithoutNonce = abi.encodePacked(\\n            block_.p0WithoutNonce,\\n            block_.p1,\\n            block_.parentOrReceiptHash,\\n            block_.p2,\\n            block_.difficulty,\\n            block_.p3,\\n            block_.number,\\n            block_.p4,\\n            block_.p6\\n        );\\n\\n        return keccak256(rlpHeaderHashWithoutNonce);\\n    }\\n\\n\\n    function bytesToUint(bytes memory b) private pure returns (uint){\\n        return uint(bytes32(b)) >> (256 - b.length * 8);\\n    }\\n}\\n\",\"keccak256\":\"0x65e6baed22af1ae800744f3874df40cfdb83e1f6e0f665f5f89861e1891da9f3\",\"license\":\"MIT\"},\"contracts/checks/CheckPoW_Ethash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev These contracts are used to verify Proof of Work within a smart contract.\\n///      The algorithms have been extracted from the implementation of smart pool (https://github.com/smartpool)\\ncontract SHA3_512 {\\n    constructor() {}\\n\\n    function keccak_f(uint[25] memory A) pure private returns (uint[25] memory) {\\n        uint[25] memory B;\\n        uint[5]  memory C;\\n        uint[5]  memory D;\\n\\n        uint[24] memory RC = [\\n        uint(0x0000000000000001),\\n        0x0000000000008082,\\n        0x800000000000808A,\\n        0x8000000080008000,\\n        0x000000000000808B,\\n        0x0000000080000001,\\n        0x8000000080008081,\\n        0x8000000000008009,\\n        0x000000000000008A,\\n        0x0000000000000088,\\n        0x0000000080008009,\\n        0x000000008000000A,\\n        0x000000008000808B,\\n        0x800000000000008B,\\n        0x8000000000008089,\\n        0x8000000000008003,\\n        0x8000000000008002,\\n        0x8000000000000080,\\n        0x000000000000800A,\\n        0x800000008000000A,\\n        0x8000000080008081,\\n        0x8000000000008080,\\n        0x0000000080000001,\\n        0x8000000080008008];\\n\\n        for (uint i = 0; i < 24; i++) {\\n\\n            C[0] = A[0] ^ A[1] ^ A[2] ^ A[3] ^ A[4];\\n            C[1] = A[5] ^ A[6] ^ A[7] ^ A[8] ^ A[9];\\n            C[2] = A[10] ^ A[11] ^ A[12] ^ A[13] ^ A[14];\\n            C[3] = A[15] ^ A[16] ^ A[17] ^ A[18] ^ A[19];\\n            C[4] = A[20] ^ A[21] ^ A[22] ^ A[23] ^ A[24];\\n\\n            D[0] = C[4] ^ ((C[1] * 2) & 0xffffffffffffffff | (C[1] / (2 ** 63)));\\n            D[1] = C[0] ^ ((C[2] * 2) & 0xffffffffffffffff | (C[2] / (2 ** 63)));\\n            D[2] = C[1] ^ ((C[3] * 2) & 0xffffffffffffffff | (C[3] / (2 ** 63)));\\n            D[3] = C[2] ^ ((C[4] * 2) & 0xffffffffffffffff | (C[4] / (2 ** 63)));\\n            D[4] = C[3] ^ ((C[0] * 2) & 0xffffffffffffffff | (C[0] / (2 ** 63)));\\n\\n            A[0] = A[0] ^ D[0];\\n            A[1] = A[1] ^ D[0];\\n            A[2] = A[2] ^ D[0];\\n            A[3] = A[3] ^ D[0];\\n            A[4] = A[4] ^ D[0];\\n            A[5] = A[5] ^ D[1];\\n            A[6] = A[6] ^ D[1];\\n            A[7] = A[7] ^ D[1];\\n            A[8] = A[8] ^ D[1];\\n            A[9] = A[9] ^ D[1];\\n            A[10] = A[10] ^ D[2];\\n            A[11] = A[11] ^ D[2];\\n            A[12] = A[12] ^ D[2];\\n            A[13] = A[13] ^ D[2];\\n            A[14] = A[14] ^ D[2];\\n            A[15] = A[15] ^ D[3];\\n            A[16] = A[16] ^ D[3];\\n            A[17] = A[17] ^ D[3];\\n            A[18] = A[18] ^ D[3];\\n            A[19] = A[19] ^ D[3];\\n            A[20] = A[20] ^ D[4];\\n            A[21] = A[21] ^ D[4];\\n            A[22] = A[22] ^ D[4];\\n            A[23] = A[23] ^ D[4];\\n            A[24] = A[24] ^ D[4];\\n\\n            /*Rho and pi steps*/\\n            B[0] = A[0];\\n            B[8] = ((A[1] * (2 ** 36)) & 0xffffffffffffffff | (A[1] / (2 ** 28)));\\n            B[11] = ((A[2] * (2 ** 3)) & 0xffffffffffffffff | (A[2] / (2 ** 61)));\\n            B[19] = ((A[3] * (2 ** 41)) & 0xffffffffffffffff | (A[3] / (2 ** 23)));\\n            B[22] = ((A[4] * (2 ** 18)) & 0xffffffffffffffff | (A[4] / (2 ** 46)));\\n            B[2] = ((A[5] * (2 ** 1)) & 0xffffffffffffffff | (A[5] / (2 ** 63)));\\n            B[5] = ((A[6] * (2 ** 44)) & 0xffffffffffffffff | (A[6] / (2 ** 20)));\\n            B[13] = ((A[7] * (2 ** 10)) & 0xffffffffffffffff | (A[7] / (2 ** 54)));\\n            B[16] = ((A[8] * (2 ** 45)) & 0xffffffffffffffff | (A[8] / (2 ** 19)));\\n            B[24] = ((A[9] * (2 ** 2)) & 0xffffffffffffffff | (A[9] / (2 ** 62)));\\n            B[4] = ((A[10] * (2 ** 62)) & 0xffffffffffffffff | (A[10] / (2 ** 2)));\\n            B[7] = ((A[11] * (2 ** 6)) & 0xffffffffffffffff | (A[11] / (2 ** 58)));\\n            B[10] = ((A[12] * (2 ** 43)) & 0xffffffffffffffff | (A[12] / (2 ** 21)));\\n            B[18] = ((A[13] * (2 ** 15)) & 0xffffffffffffffff | (A[13] / (2 ** 49)));\\n            B[21] = ((A[14] * (2 ** 61)) & 0xffffffffffffffff | (A[14] / (2 ** 3)));\\n            B[1] = ((A[15] * (2 ** 28)) & 0xffffffffffffffff | (A[15] / (2 ** 36)));\\n            B[9] = ((A[16] * (2 ** 55)) & 0xffffffffffffffff | (A[16] / (2 ** 9)));\\n            B[12] = ((A[17] * (2 ** 25)) & 0xffffffffffffffff | (A[17] / (2 ** 39)));\\n            B[15] = ((A[18] * (2 ** 21)) & 0xffffffffffffffff | (A[18] / (2 ** 43)));\\n            B[23] = ((A[19] * (2 ** 56)) & 0xffffffffffffffff | (A[19] / (2 ** 8)));\\n            B[3] = ((A[20] * (2 ** 27)) & 0xffffffffffffffff | (A[20] / (2 ** 37)));\\n            B[6] = ((A[21] * (2 ** 20)) & 0xffffffffffffffff | (A[21] / (2 ** 44)));\\n            B[14] = ((A[22] * (2 ** 39)) & 0xffffffffffffffff | (A[22] / (2 ** 25)));\\n            B[17] = ((A[23] * (2 ** 8)) & 0xffffffffffffffff | (A[23] / (2 ** 56)));\\n            B[20] = ((A[24] * (2 ** 14)) & 0xffffffffffffffff | (A[24] / (2 ** 50)));\\n\\n            /*Xi state*/\\n            A[0] = B[0] ^ ((~B[5]) & B[10]);\\n            A[1] = B[1] ^ ((~B[6]) & B[11]);\\n            A[2] = B[2] ^ ((~B[7]) & B[12]);\\n            A[3] = B[3] ^ ((~B[8]) & B[13]);\\n            A[4] = B[4] ^ ((~B[9]) & B[14]);\\n            A[5] = B[5] ^ ((~B[10]) & B[15]);\\n            A[6] = B[6] ^ ((~B[11]) & B[16]);\\n            A[7] = B[7] ^ ((~B[12]) & B[17]);\\n            A[8] = B[8] ^ ((~B[13]) & B[18]);\\n            A[9] = B[9] ^ ((~B[14]) & B[19]);\\n            A[10] = B[10] ^ ((~B[15]) & B[20]);\\n            A[11] = B[11] ^ ((~B[16]) & B[21]);\\n            A[12] = B[12] ^ ((~B[17]) & B[22]);\\n            A[13] = B[13] ^ ((~B[18]) & B[23]);\\n            A[14] = B[14] ^ ((~B[19]) & B[24]);\\n            A[15] = B[15] ^ ((~B[20]) & B[0]);\\n            A[16] = B[16] ^ ((~B[21]) & B[1]);\\n            A[17] = B[17] ^ ((~B[22]) & B[2]);\\n            A[18] = B[18] ^ ((~B[23]) & B[3]);\\n            A[19] = B[19] ^ ((~B[24]) & B[4]);\\n            A[20] = B[20] ^ ((~B[0]) & B[5]);\\n            A[21] = B[21] ^ ((~B[1]) & B[6]);\\n            A[22] = B[22] ^ ((~B[2]) & B[7]);\\n            A[23] = B[23] ^ ((~B[3]) & B[8]);\\n            A[24] = B[24] ^ ((~B[4]) & B[9]);\\n\\n            /*Last step*/\\n            A[0] = A[0] ^ RC[i];\\n        }\\n\\n        return A;\\n    }\\n\\n\\n    function sponge(uint[9] memory M) pure internal returns (uint[16] memory) {\\n        require((M.length * 8) == 72, \\\"sponge error\\\");\\n\\n        M[5] = 0x01;\\n        M[8] = 0x8000000000000000;\\n\\n        uint r = 72;\\n        uint w = 8;\\n        uint size = M.length * 8;\\n\\n        uint[25] memory S;\\n        uint i;\\n        uint y;\\n        uint x;\\n        /*Absorbing Phase*/\\n        for (i = 0; i < size / r; i++) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w)) {\\n                        S[5 * x + y] = S[5 * x + y] ^ M[i * 9 + x + 5 * y];\\n                    }\\n                }\\n            }\\n            S = keccak_f(S);\\n        }\\n\\n        /*Squeezing phase*/\\n        uint[16] memory result;\\n        uint b = 0;\\n        while (b < 16) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w) && (b < 16)) {\\n                        result[b] = S[5 * x + y] & 0xFFFFFFFF;\\n                        result[b + 1] = S[5 * x + y] / 0x100000000;\\n                        b += 2;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n}\\n\\n////////////////////////////////////////////////////////////////////////////////\\n\\ncontract Ethash is SHA3_512 {\\n\\n    uint constant EPOCH_LENGTH = 30000;   // blocks per epoch\\n\\n    constructor() {\\n    }\\n\\n    struct EthashCacheOptData {\\n        uint[512] merkleNodes;\\n        uint fullSizeIn128Resultion;\\n        uint branchDepth;\\n    }\\n\\n    mapping(uint => EthashCacheOptData) epochData;\\n\\n\\n    function verifyPoW(uint blockNumber, bytes32 rlpHeaderHashWithoutNonce, uint nonce, uint difficulty,\\n        uint[] memory dataSetLookup, uint[] memory witnessForLookup) internal view {\\n\\n        uint epoch = blockNumber / EPOCH_LENGTH;\\n        uint ethash = hashimoto(rlpHeaderHashWithoutNonce, nonce, dataSetLookup, witnessForLookup, epoch);\\n\\n        require(ethash <= (2 ** 256 - 1) / difficulty, \\\"Ethash difficulty too low\\\");\\n    }\\n\\n    function isEpochDataSet(uint epochIndex) public view returns (bool) {\\n        return epochData[epochIndex].fullSizeIn128Resultion != 0;\\n    }\\n\\n    function setEpochData(\\n        uint epochNum,\\n        uint fullSizeIn128Resultion,\\n        uint branchDepth,\\n        uint[] memory merkleNodes\\n    ) public {\\n\\n        // we store only previous and current epochs\\n        // so, delete second from the end epoch\\n        if (epochNum >= 2)  // underflow check\\n            delete epochData[epochNum - 2];\\n\\n\\n        uint l = merkleNodes.length;\\n        uint[512] storage nodes = epochData[epochNum].merkleNodes;\\n\\n        for (uint i = 0; i < l; i++) {\\n            nodes[i] = merkleNodes[i];\\n        }\\n\\n        epochData[epochNum].fullSizeIn128Resultion = fullSizeIn128Resultion;\\n        epochData[epochNum].branchDepth = branchDepth;\\n    }\\n\\n\\n    function hashimoto(bytes32 header,\\n        uint nonceLe,\\n        uint[] memory dataSetLookup,\\n        uint[] memory witnessForLookup,\\n        uint epochIndex) private view returns (uint) {\\n\\n        uint[16] memory s = computeS(uint(header), nonceLe);\\n        uint[32] memory mix;\\n        uint[8]  memory cmix;\\n\\n\\n        uint depth = epochData[epochIndex].branchDepth;\\n        uint fullSize = epochData[epochIndex].fullSizeIn128Resultion;\\n\\n        uint i;\\n        uint j;\\n\\n        require(fullSize != 0, \\\"EpochData not set\\\");\\n\\n\\n        for (i = 0; i < 16; i++) {\\n            assembly {\\n                let offset := mul(i, 0x20)\\n\\n            //mix[i] = s[i];\\n                mstore(add(mix, offset), mload(add(s, offset)))\\n\\n            // mix[i+16] = s[i];\\n                mstore(add(mix, add(0x200, offset)), mload(add(s, offset)))\\n            }\\n        }\\n\\n        for (i = 0; i < 64; i++) {\\n            uint p = fnv(i ^ s[0], mix[i % 32]) % fullSize;\\n\\n            // console.log(computeCacheRoot( p, i, dataSetLookup,  witnessForLookup, depthAndFullSize[0]));\\n            // console.log(getMerkleLeave( epochIndex, p ));\\n\\n            if (computeCacheRoot(p, i, dataSetLookup, witnessForLookup, depth) != getMerkleLeave(epochIndex, p)) {\\n                // PoW failed\\n                revert(\\\"PoW failed\\\");\\n            }\\n\\n            for (j = 0; j < 8; j++) {\\n\\n                assembly{\\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & varFFFFFFFF );\\n                    let dataOffset := add(mul(0x80, i), add(dataSetLookup, 0x20))\\n                    let dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    let mixOffset := add(mix, mul(0x20, j))\\n                    let mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    let fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                }\\n\\n\\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & 0xFFFFFFFF );\\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\\n\\n\\n                //dataSetLookup[4*i    ] = dataSetLookup[4*i    ]/(2**32);\\n                //dataSetLookup[4*i + 1] = dataSetLookup[4*i + 1]/(2**32);\\n                //dataSetLookup[4*i + 2] = dataSetLookup[4*i + 2]/(2**32);\\n                //dataSetLookup[4*i + 3] = dataSetLookup[4*i + 3]/(2**32);\\n\\n                assembly{\\n                    let offset := add(add(dataSetLookup, 0x20), mul(i, 0x80))\\n                    let value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n                }\\n            }\\n        }\\n\\n\\n        for (i = 0; i < 32; i += 4) {\\n            cmix[i / 4] = (fnv(fnv(fnv(mix[i], mix[i + 1]), mix[i + 2]), mix[i + 3]));\\n        }\\n\\n        return computeSha3(s, cmix);\\n\\n    }\\n\\n\\n    function fnv(uint v1, uint v2) pure internal returns (uint) {\\n        return ((v1 * 0x01000193) ^ v2) & 0xFFFFFFFF;\\n    }\\n\\n    function computeCacheRoot(uint index,\\n        uint indexInElementsArray,\\n        uint[] memory elements,\\n        uint[] memory witness,\\n        uint branchSize) pure private returns (uint) {\\n\\n        uint leaf = computeLeaf(elements, indexInElementsArray) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n        uint left;\\n        uint right;\\n        uint node;\\n        bool oddBranchSize = (branchSize % 2) > 0;\\n\\n        assembly {\\n            branchSize := div(branchSize, 2)\\n        //branchSize /= 2;\\n        }\\n        uint witnessIndex = indexInElementsArray * branchSize;\\n        if (oddBranchSize) witnessIndex += indexInElementsArray;\\n\\n        uint depth;\\n        for (depth = 0; depth < branchSize; depth++) {\\n            assembly {\\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\\n            }\\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n\\n            }\\n            else {\\n                assembly{\\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            assembly {\\n                index := div(index, 2)\\n            }\\n\\n            //node  = witness[witnessIndex + depth] / (2**128);\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := div(node, 0x100000000000000000000000000000000)\\n                }\\n            }\\n            else {\\n                assembly {\\n                    left := div(node, 0x100000000000000000000000000000000)\\n                }\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            assembly {\\n                index := div(index, 2)\\n            }\\n        }\\n\\n        if (oddBranchSize) {\\n            assembly {\\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\\n            }\\n\\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n            }\\n            else {\\n                assembly{\\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n\\n\\n        return leaf;\\n    }\\n\\n\\n    function computeSha3(uint[16] memory s, uint[8] memory cmix) pure internal returns (uint) {\\n        uint s0 = s[0] + s[1] * (2 ** 32) + s[2] * (2 ** 64) + s[3] * (2 ** 96) +\\n        (s[4] + s[5] * (2 ** 32) + s[6] * (2 ** 64) + s[7] * (2 ** 96)) * (2 ** 128);\\n\\n        uint s1 = s[8] + s[9] * (2 ** 32) + s[10] * (2 ** 64) + s[11] * (2 ** 96) +\\n        (s[12] + s[13] * (2 ** 32) + s[14] * (2 ** 64) + s[15] * (2 ** 96)) * (2 ** 128);\\n\\n        uint c = cmix[0] + cmix[1] * (2 ** 32) + cmix[2] * (2 ** 64) + cmix[3] * (2 ** 96) +\\n        (cmix[4] + cmix[5] * (2 ** 32) + cmix[6] * (2 ** 64) + cmix[7] * (2 ** 96)) * (2 ** 128);\\n\\n\\n        /* god knows why need to convert to big endian */\\n        return uint(keccak256(abi.encodePacked(reverseBytes(s0), reverseBytes(s1), reverseBytes(c))));\\n    }\\n\\n\\n    function computeLeaf(uint[] memory dataSetLookup, uint index) pure internal returns (uint) {\\n        return uint(keccak256(abi.encodePacked(\\n                dataSetLookup[4 * index],\\n                dataSetLookup[4 * index + 1],\\n                dataSetLookup[4 * index + 2],\\n                dataSetLookup[4 * index + 3]\\n            )));\\n\\n    }\\n\\n    function computeS(uint header, uint nonceLe) pure internal returns (uint[16] memory) {\\n        uint[9] memory M;\\n\\n        header = reverseBytes(header);\\n\\n        M[0] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[1] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[2] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[3] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n\\n        // make little endian nonce\\n        M[4] = nonceLe;\\n        return sponge(M);\\n    }\\n\\n    function reverseBytes(uint input) pure internal returns (uint) {\\n        uint result;\\n        for (uint i = 0; i < 32; i++) {\\n            result = (result << 8) + (input & 0xff);\\n            input = input >> 8;\\n        }\\n        return result;\\n    }\\n\\n\\n    function getMerkleLeave(uint epochIndex, uint p) view internal returns (uint) {\\n        uint rootIndex = uint(p >> epochData[epochIndex].branchDepth);\\n        uint expectedRoot = epochData[epochIndex].merkleNodes[(rootIndex >> 1)];\\n\\n        if ((rootIndex % 2) == 0)\\n            return expectedRoot & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        return expectedRoot >> 128;\\n    }\\n\\n}\\n\",\"keccak256\":\"0xb0dc1a73f64f772b1cc9b0feada94faabc85c2c46a066be6c9a2cedb767ccc48\",\"license\":\"MIT\"},\"contracts/checks/CheckReceiptsProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\n\\n\\ncontract CheckReceiptsProof {\\n    // check readme for focs\\n    function calcReceiptsHash(bytes[] memory proof, bytes32 el, uint proofStart) internal pure returns (bytes32) {\\n        bytes memory s;\\n\\n        for (uint i = proofStart; i < proof.length; i += 2) {\\n            s = abi.encodePacked(proof[i], el, proof[i + 1]);\\n            el = (s.length > 32) ? keccak256(s) : bytes32(s);\\n        }\\n\\n        return el;\\n    }\\n\\n\\n    function calcTransferReceiptsHash(CommonStructs.TransferProof memory p, address eventContractAddress) internal pure returns (bytes32) {\\n        bytes32 el = keccak256(abi.encodePacked(\\n                p.receiptProof[0],\\n                eventContractAddress,\\n                p.receiptProof[1],\\n                toBinary(p.eventId),\\n                p.receiptProof[2],\\n                abi.encode(p.transfers),\\n                p.receiptProof[3]\\n            ));\\n        return calcReceiptsHash(p.receiptProof, el, 4);\\n        // start from proof[4]\\n    }\\n\\n\\n    function toBinary(uint _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), _x)\\n        }\\n        uint i;\\n        for (i = 0; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x7e46637724acc19ef57e50ac3bfc07826fe26f51aafb128d4f3f88e860ed869e\",\"license\":\"MIT\"},\"contracts/common/CommonBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./CommonStructs.sol\\\";\\nimport \\\"../tokens/IWrapper.sol\\\";\\n\\n\\ncontract CommonBridge is AccessControl, Pausable {\\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n\\n\\n    // queue to be pushed in another network\\n    CommonStructs.Transfer[] queue;\\n\\n    // locked transfers from another network\\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\\n    uint public oldestLockedEventId = 1;  // head index of lockedTransfers 'queue' mapping\\n\\n\\n    // this network to side network token addresses mapping\\n    mapping(address => address) public tokenAddresses;\\n    address public wrapperAddress;\\n\\n    uint public fee;\\n    address payable feeRecipient;\\n\\n    address public sideBridgeAddress;\\n    uint public minSafetyBlocks;\\n    uint public timeframeSeconds;\\n    uint public lockTime;\\n\\n    uint public inputEventId; // last processed event from side network\\n    uint outputEventId = 1;  // last created event in this network. start from 1 coz 0 consider already processed\\n\\n    uint lastTimeframe;\\n\\n    event Withdraw(address indexed from, address tokenFrom, address tokentTo, uint eventId, uint feeAmount);\\n    event Transfer(uint indexed eventId, CommonStructs.Transfer[] queue);\\n    event TransferSubmit(uint indexed eventId);\\n    event TransferFinish(uint indexed eventId);\\n\\n\\n    constructor(CommonStructs.ConstructorArgs memory args)\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(RELAY_ROLE, args.relayAddress);\\n        _setupRole(ADMIN_ROLE, args.adminAddress);\\n\\n        // initialise tokenAddresses with start values\\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\\n        wrapperAddress = args.wrappingTokenAddress;\\n\\n        sideBridgeAddress = args.sideBridgeAddress;\\n        fee = args.fee;\\n        feeRecipient = args.feeRecipient;\\n        minSafetyBlocks = args.minSafetyBlocks;\\n        timeframeSeconds = args.timeframeSeconds;\\n        lockTime = args.lockTime;\\n    }\\n\\n\\n    function wrapWithdraw(address toAddress) public payable {\\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\\n        require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value > fee, \\\"Sent value < fee\\\");\\n        feeRecipient.transfer(fee);\\n\\n        uint restOfValue = msg.value - fee;\\n        IWrapper(wrapperAddress).deposit{value : restOfValue}();\\n\\n        //\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, restOfValue));\\n        emit Withdraw(msg.sender, wrapperAddress, tokenSideAddress, outputEventId, fee);\\n\\n        withdraw_finish();\\n    }\\n\\n    function withdraw(address tokenThisAddress, address toAddress, uint amount, bool unwrapSide) payable public {\\n        address tokenSideAddress;\\n        if (unwrapSide) {\\n            require(tokenAddresses[address(0)] == tokenThisAddress, \\\"Token not point to native token\\\");\\n            // tokenSideAddress will be 0x0000000000000000000000000000000000000000 - for native token\\n        } else {\\n            tokenSideAddress = tokenAddresses[tokenThisAddress];\\n            require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n        }\\n\\n        require(msg.value == fee, \\\"Sent value != fee\\\");\\n        feeRecipient.transfer(msg.value);\\n\\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \\\"Fail transfer coins\\\");\\n\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, tokenThisAddress, tokenSideAddress, outputEventId, fee);\\n\\n        withdraw_finish();\\n    }\\n\\n    function withdraw_finish() internal {\\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\\n        if (nowTimeframe != lastTimeframe) {\\n            emit Transfer(outputEventId++, queue);\\n            delete queue;\\n\\n            lastTimeframe = nowTimeframe;\\n        }\\n    }\\n\\n\\n    // locked transfers from another network\\n    function getLockedTransfers(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\\n        return lockedTransfers[eventId];\\n    }\\n\\n\\n    function proceedTransfers(CommonStructs.Transfer[] memory transfers) internal {\\n        for (uint i = 0; i < transfers.length; i++) {\\n\\n            if (transfers[i].tokenAddress == address(0)) {// native token\\n                IWrapper(wrapperAddress).withdraw(transfers[i].amount);\\n                payable(transfers[i].toAddress).transfer(transfers[i].amount);\\n            } else {// ERC20 token\\n                require(\\n                    IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount),\\n                    \\\"Fail transfer coins\\\");\\n            }\\n\\n        }\\n    }\\n\\n\\n    // submitted transfers save here for `lockTime` period\\n    function lockTransfers(CommonStructs.Transfer[] memory events, uint eventId) internal {\\n        lockedTransfers[eventId].endTimestamp = block.timestamp + lockTime;\\n        for (uint i = 0; i < events.length; i++)\\n            lockedTransfers[eventId].transfers.push(events[i]);\\n    }\\n\\n    // after `lockTime` period, transfers can  be unlocked\\n    function unlockTransfers(uint eventId) public whenNotPaused {\\n        require(eventId == oldestLockedEventId, \\\"can unlock only oldest event\\\");\\n\\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n        require(transfersLocked.endTimestamp > 0, \\\"no locked transfers with this id\\\");\\n        require(transfersLocked.endTimestamp < block.timestamp, \\\"lockTime has not yet passed\\\");\\n\\n        proceedTransfers(transfersLocked.transfers);\\n\\n        delete lockedTransfers[eventId];\\n        emit TransferFinish(eventId);\\n\\n        oldestLockedEventId = eventId + 1;\\n    }\\n\\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\\n    function unlockTransfersBatch() public whenNotPaused {\\n        uint eventId = oldestLockedEventId;\\n        for (;; eventId++) {\\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\\n\\n            proceedTransfers(transfersLocked.transfers);\\n\\n            delete lockedTransfers[eventId];\\n            emit TransferFinish(eventId);\\n        }\\n        oldestLockedEventId = eventId;\\n    }\\n\\n    // delete transfers with passed eventId and all after it\\n    function removeLockedTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(eventId >= oldestLockedEventId, \\\"eventId must be >= oldestLockedEventId\\\");\\n        for (; lockedTransfers[eventId].endTimestamp != 0; eventId++)\\n            delete lockedTransfers[eventId];\\n    }\\n\\n\\n    // admin setters\\n\\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\\n        minSafetyBlocks = minSafetyBlocks_;\\n    }\\n\\n    function changeFee(uint fee_) public onlyRole(ADMIN_ROLE) {\\n        fee = fee_;\\n    }\\n\\n    function changeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        feeRecipient = feeRecipient_;\\n    }\\n\\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\\n        timeframeSeconds = timeframeSeconds_;\\n    }\\n\\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\\n        lockTime = lockTime_;\\n    }\\n\\n\\n    // token addressed mapping\\n\\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\\n    }\\n\\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\\n        delete tokenAddresses[tokenThisAddress];\\n    }\\n\\n    function tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\\n    }\\n\\n    function _tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) private {\\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \\\"sizes of tokenThisAddresses and tokenSideAddresses must be same\\\");\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\\n    }\\n\\n    function tokensRemoveBatch(address[] memory tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            delete tokenAddresses[tokenThisAddresses[i]];\\n    }\\n\\n    // pause\\n\\n    function pause() public onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // internal\\n\\n    function checkEventId(uint eventId) internal {\\n        require(eventId == ++inputEventId, \\\"EventId out of order\\\");\\n    }\\n\\n    receive() external payable {}  // need to receive native token from wrapper contract\\n\\n}\\n\",\"keccak256\":\"0x9fa9775fd120169abe3375fced9409bb2762d80b1370fcd6c610aee5fb1c39f8\",\"license\":\"MIT\"},\"contracts/common/CommonStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary CommonStructs {\\n    struct Transfer {\\n        address tokenAddress;\\n        address toAddress;\\n        uint amount;\\n    }\\n\\n    struct TransferProof {\\n        bytes[] receiptProof;\\n        uint eventId;\\n        Transfer[] transfers;\\n    }\\n\\n    struct LockedTransfers {\\n        Transfer[] transfers;\\n        uint endTimestamp;\\n    }\\n\\n    struct ConstructorArgs {\\n        address sideBridgeAddress; address adminAddress;\\n        address relayAddress; address wrappingTokenAddress;\\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\\n        uint fee; address payable feeRecipient;\\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0x21ed033271ffa50d60805037e81197610a3764b9647f8b67b85f7454b8ac0bd8\",\"license\":\"MIT\"},\"contracts/eth/AmbBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonBridge.sol\\\";\\nimport \\\"../common/CommonStructs.sol\\\";\\nimport \\\"../checks/CheckPoW.sol\\\";\\n\\n\\ncontract AmbBridge is CommonBridge, CheckPoW {\\n    constructor(CommonStructs.ConstructorArgs memory args) CommonBridge(args) {}\\n\\n    function submitTransferPoW(PoWProof memory powProof) public onlyRole(RELAY_ROLE) whenNotPaused {\\n        emit TransferSubmit(powProof.transfer.eventId);\\n\\n        checkEventId(powProof.transfer.eventId);\\n\\n        checkPoW_(powProof, sideBridgeAddress);\\n\\n        lockTransfers(powProof.transfer.transfers, powProof.transfer.eventId);\\n    }\\n\\n    function setSideBridge(address _sideBridgeAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(sideBridgeAddress == address(0), \\\"sideBridgeAddress already set\\\");\\n        sideBridgeAddress = _sideBridgeAddress;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1cbc505454fee5f8ac9493394bc23f33270eb25f4e820902fe0832035f12a229\",\"license\":\"MIT\"},\"contracts/tokens/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWrapper {\\n    event Deposit(address indexed dst, uint amount);\\n    event Withdrawal(address indexed src, uint amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external payable;\\n}\\n\",\"keccak256\":\"0x800c261f75f979f219a046bc3b5667e1371734606f47356c59a463dece282177\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016004556001600e553480156200001b57600080fd5b5060405162005b8c38038062005b8c8339810160408190526200003e916200045b565b6001805460ff19169055806200005f60003364010000000062000171810204565b6200009e7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7826040015162000171640100000000026401000000009004565b620000dd7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775826020015162000171640100000000026401000000009004565b6200010081608001518260a001516200018a640100000000026401000000009004565b606081015160068054600160a060020a03928316600160a060020a03199182161790915582516009805491841691831691909117905560c083015160075560e083015160088054919093169116179055610140810151600a55610100810151600b556101200151600c555062000669565b620001868282640100000000620002cc810204565b5050565b805182511462000220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d6500606482015260840160405180910390fd5b815160005b81811015620002c657828181518110620002435762000243620005f2565b602002602001015160056000868481518110620002645762000264620005f2565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080620002bd90620005af565b91505062000225565b50505050565b620002e1828264010000000062000368810204565b6200018657600082815260208181526040808320600160a060020a03851684529091529020805460ff191660011790556200032464010000000062000391810204565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600091825260208281526040808420600160a060020a0393909316845291905290205460ff1690565b3390565b8051620003a28162000650565b919050565b600082601f830112620003b957600080fd5b815160206001604060020a0380831115620003d857620003d862000621565b818302604051601f19603f83011681018181108482111715620003ff57620003ff62000621565b604052848152838101925086840182880185018910156200041f57600080fd5b600092505b858310156200044f5780516200043a8162000650565b84529284019260019290920191840162000424565b50979650505050505050565b6000602082840312156200046e57600080fd5b81516001604060020a03808211156200048657600080fd5b9083019061016082860312156200049c57600080fd5b620004a662000583565b620004b18362000395565b8152620004c16020840162000395565b6020820152620004d46040840162000395565b6040820152620004e76060840162000395565b6060820152608083015182811115620004ff57600080fd5b6200050d87828601620003a7565b60808301525060a0830151828111156200052657600080fd5b6200053487828601620003a7565b60a08301525060c083015160c08201526200055260e0840162000395565b60e0820152610100838101519082015261012080840151908201526101409283015192810192909252509392505050565b60405161016081016001604060020a0381118282101715620005a957620005a962000621565b60405290565b6000600019821415620005eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600160a060020a03811681146200066657600080fd5b50565b61551380620006796000396000f3fe60806040526004361061024e5760003560e060020a900480638ac1f86f1161013d578063baeebe75116100ba578063e31be0871161007e578063e31be087146106d9578063e4e6bba614610706578063e88b662614610719578063f33fe10f14610739578063f862b7eb14610759578063fd5d2ef31461077957600080fd5b8063baeebe751461063a578063c7b81f4f14610650578063d547741f14610683578063ddca3f43146106a3578063e1d862be146106b957600080fd5b806396cf52271161010157806396cf5227146105a357806399b5bb64146105c3578063a217fddf146105d9578063b6d3385e146105ee578063ba8bbbe01461062457600080fd5b80638ac1f86f146105255780638e5df9c71461053a57806391d148541461055a578063924cf6e01461057a578063934785b71461059057600080fd5b80633f4ba83a116101cb5780636a1db1bf1161018f5780636a1db1bf1461047657806375b238fc146104965780637df8b802146104b85780638456cb59146104f0578063853890ae1461050557600080fd5b80633f4ba83a146103d957806342180fb8146103ee5780634a1856de1461040e5780635249a7051461043e5780635c975abb1461045e57600080fd5b806323604071116102125780632360407114610329578063248a9ca3146103495780632f2ff15d14610379578063331a891a1461039957806336568abe146103b957600080fd5b806301ffc9a71461025a578063044218231461028f57806309fce356146102d15780630d668087146102f357806321d3d5361461030957600080fd5b3661025557005b600080fd5b34801561026657600080fd5b5061027a610275366004614a12565b610799565b60405190151581526020015b60405180910390f35b34801561029b57600080fd5b506102c37f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b604051908152602001610286565b3480156102dd57600080fd5b506102f16102ec366004614953565b61082c565b005b3480156102ff57600080fd5b506102c3600c5481565b34801561031557600080fd5b506102f1610324366004614875565b610854565b34801561033557600080fd5b506102f1610344366004614875565b6108e4565b34801561035557600080fd5b506102c36103643660046149d4565b60009081526020819052604090206001015490565b34801561038557600080fd5b506102f16103943660046149ed565b610920565b3480156103a557600080fd5b506102f16103b43660046149d4565b610946565b3480156103c557600080fd5b506102f16103d43660046149ed565b610a7f565b3480156103e557600080fd5b506102f1610b0a565b3480156103fa57600080fd5b506102f16104093660046149d4565b610b2e565b34801561041a57600080fd5b506102c36104293660046149d4565b60036020526000908152604090206001015481565b34801561044a57600080fd5b506102f161045936600461491e565b610b4d565b34801561046a57600080fd5b5060015460ff1661027a565b34801561048257600080fd5b506102f16104913660046149d4565b610bd2565b3480156104a257600080fd5b506102c36000805160206154be83398151915281565b3480156104c457600080fd5b506006546104d890600160a060020a031681565b604051600160a060020a039091168152602001610286565b3480156104fc57600080fd5b506102f1610bf1565b34801561051157600080fd5b506102f1610520366004614892565b610c12565b34801561053157600080fd5b506102f1610c5a565b34801561054657600080fd5b506102f1610555366004614875565b610db2565b34801561056657600080fd5b5061027a6105753660046149ed565b610df3565b34801561058657600080fd5b506102c3600a5481565b6102f161059e3660046148cb565b610e1c565b3480156105af57600080fd5b506102f16105be3660046149d4565b6111c6565b3480156105cf57600080fd5b506102c3600d5481565b3480156105e557600080fd5b506102c3600081565b3480156105fa57600080fd5b506104d8610609366004614875565b600560205260009081526040902054600160a060020a031681565b34801561063057600080fd5b506102c360045481565b34801561064657600080fd5b506102c3600b5481565b34801561065c57600080fd5b5061027a61066b3660046149d4565b60009081526010602052604090206102000154151590565b34801561068f57600080fd5b506102f161069e3660046149ed565b6111e5565b3480156106af57600080fd5b506102c360075481565b3480156106c557600080fd5b506102f16106d4366004614a51565b61120b565b3480156106e557600080fd5b506106f96106f43660046149d4565b6112cf565b6040516102869190615242565b6102f1610714366004614875565b61138b565b34801561072557600080fd5b506102f1610734366004614d48565b611633565b34801561074557600080fd5b506009546104d890600160a060020a031681565b34801561076557600080fd5b506102f16107743660046149d4565b6116fa565b34801561078557600080fd5b506102f16107943660046149d4565b61192d565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b00000000000000000000000000000000000000000000000000000000148061082657507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b6000805160206154be833981519152610845813361194c565b61084f83836119b3565b505050565b6000610860813361194c565b600954600160a060020a0316156108c15760405160e560020a62461bcd02815260206004820152601d60248201527f736964654272696467654164647265737320616c72656164792073657400000060448201526064015b60405180910390fd5b5060098054600160a060020a031916600160a060020a0392909216919091179055565b6000805160206154be8339815191526108fd813361194c565b5060088054600160a060020a031916600160a060020a0392909216919091179055565b60008281526020819052604090206001015461093c813361194c565b61084f8383611ac9565b6000805160206154be83398151915261095f813361194c565b60015460ff166109b45760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108b8565b600454821015610a2f5760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e744964000000000000000000000000000000000000000000000000000060648201526084016108b8565b60008281526003602052604090206001015415610a7b57600082815260036020526040812090610a5f8282614431565b5060006001919091015581610a7381615407565b925050610a2f565b5050565b600160a060020a0381163314610b005760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108b8565b610a7b8282611b4d565b6000805160206154be833981519152610b23813361194c565b610b2b611bb2565b50565b6000805160206154be833981519152610b47813361194c565b50600b55565b6000805160206154be833981519152610b66813361194c565b815160005b81811015610bcc5760056000858381518110610b8957610b89615468565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610bc481615407565b915050610b6b565b50505050565b6000805160206154be833981519152610beb813361194c565b50600755565b6000805160206154be833981519152610c0a813361194c565b610b2b611c51565b6000805160206154be833981519152610c2b813361194c565b50600160a060020a0391821660009081526005602052604090208054600160a060020a03191691909216179055565b60015460ff1615610c805760405160e560020a62461bcd0281526004016108b89061520b565b6004545b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610d1257600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610cb8565b5050505081526020016001820154815250509050806020015160001480610d3c5750428160200151115b15610d475750600455565b8051610d5290611caa565b600082815260036020526040812090610d6b8282614431565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610daa81615407565b915050610c84565b6000805160206154be833981519152610dcb813361194c565b50600160a060020a031660009081526005602052604090208054600160a060020a0319169055565b600091825260208281526040808420600160a060020a0393909316845291905290205460ff1690565b60008115610eb1576000805260056020527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc54600160a060020a03868116911614610eac5760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e0060448201526064016108b8565b610f1d565b50600160a060020a038085166000908152600560205260409020541680610f1d5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108b8565b6007543414610f715760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d2066656500000000000000000000000000000060448201526064016108b8565b600854604051600160a060020a03909116903480156108fc02916000818181858888f19350505050158015610faa573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101849052600160a060020a038616906323b872dd90606401602060405180830381600087803b15801561101257600080fd5b505af1158015611026573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104a91906149b7565b6110995760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108b8565b6040805160608082018352600160a060020a0384811680845288821660208086019182528587018a815260028054600181018255600091909152965160039097027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81018054988716600160a060020a0319998a1617905592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf84018054918716919098161790965594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600e546007548651938c168452948301919091529381019390935282015233907ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9060800160405180910390a26111bf611f3e565b5050505050565b6000805160206154be8339815191526111df813361194c565b50600c55565b600082815260208190526040902060010154611201813361194c565b61084f8383611b4d565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7611236813361194c565b60015460ff161561125c5760405160e560020a62461bcd0281526004016108b89061520b565b60208083015101516040517f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b90600090a261129e826020015160200151611fb6565b6009546112b5908390600160a060020a031661201b565b610a7b82602001516040015183602001516020015161210d565b6040805180820190915260608152600060208201526000828152600360209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b8282101561137257600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101611318565b5050505081526020016001820154815250509050919050565b600654600160a060020a0390811660009081526005602052604090205416806113f95760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108b8565b600754341161144d5760405160e560020a62461bcd02815260206004820152601060248201527f53656e742076616c7565203c206665650000000000000000000000000000000060448201526064016108b8565b600854600754604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015611489573d6000803e3d6000fd5b5060006007543461149a9190615384565b9050600660009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156114ef57600080fd5b505af1158015611503573d6000803e3d6000fd5b50506040805160608082018352600160a060020a038881168084528a821660208086019182528587018b815260028054600181018255600091909152965160039097027f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace81018054988716600160a060020a0319998a1617905592517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acf84018054918716919098161790965594517f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ad090910155600654600e54600754875192909416825294810191909152938401929092528201523393507ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9250608001905060405180910390a261084f611f3e565b6002841061167c576010600061164a600287615384565b8152602001908152602001600020600080820160006116699190614452565b5060006102008201819055610201909101555b80516000858152601060205260408120905b828110156116d7578381815181106116a8576116a8615468565b6020026020010151828261020081106116c3576116c3615468565b0155806116cf81615407565b91505061168e565b505050600093845250601060205260409092206102008101919091556102010155565b60015460ff16156117205760405160e560020a62461bcd0281526004016108b89061520b565b60045481146117745760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e740000000060448201526064016108b8565b6000818152600360209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561180257600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016117a8565b5050505081526020016001820154815250509050600081602001511161186d5760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e73666572732077697468207468697320696460448201526064016108b8565b428160200151106118c35760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f742079657420706173736564000000000060448201526064016108b8565b80516118ce90611caa565b6000828152600360205260408120906118e78282614431565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2611926826001615339565b6004555050565b6000805160206154be833981519152611946813361194c565b50600a55565b6119568282610df3565b610a7b5761196e81600160a060020a031660146121d0565b6119798360206121d0565b60405160200161198a9291906150d4565b60408051601f198184030181529082905260e560020a62461bcd0282526108b8916004016151d8565b8051825114611a2d5760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d650060648201526084016108b8565b815160005b81811015610bcc57828181518110611a4c57611a4c615468565b602002602001015160056000868481518110611a6a57611a6a615468565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611ac190615407565b915050611a32565b611ad38282610df3565b610a7b57600082815260208181526040808320600160a060020a03851684529091529020805460ff19166001179055611b093390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611b578282610df3565b15610a7b57600082815260208181526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60015460ff16611c075760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108b8565b6001805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60015460ff1615611c775760405160e560020a62461bcd0281526004016108b89061520b565b6001805460ff1916811790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833611c34565b60005b8151811015610a7b576000600160a060020a0316828281518110611cd357611cd3615468565b602002602001015160000151600160a060020a03161415611def576006548251600160a060020a0390911690632e1a7d4d90849084908110611d1757611d17615468565b6020026020010151604001516040518263ffffffff1660e060020a028152600401611d4491815260200190565b600060405180830381600087803b158015611d5e57600080fd5b505af1158015611d72573d6000803e3d6000fd5b50505050818181518110611d8857611d88615468565b602002602001015160200151600160a060020a03166108fc838381518110611db257611db2615468565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015611de9573d6000803e3d6000fd5b50611f2c565b818181518110611e0157611e01615468565b602002602001015160000151600160a060020a031663a9059cbb838381518110611e2d57611e2d615468565b602002602001015160200151848481518110611e4b57611e4b615468565b6020026020010151604001516040518363ffffffff1660e060020a028152600401611e8b929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b158015611ea557600080fd5b505af1158015611eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edd91906149b7565b611f2c5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108b8565b80611f3681615407565b915050611cad565b6000600b5442611f4e9190615351565b9050600f548114610b2b57600e8054906000611f6983615407565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae26002604051611f9d9190615168565b60405180910390a2611fb160026000614431565b600f55565b600d60008154611fc590615407565b91829055508114610b2b5760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f7264657200000000000000000000000060448201526064016108b8565b600061202b8360200151836123bd565b905060005b835151811015610bcc57818460000151828151811061205157612051615468565b602002602001015160600151146120ad5760405160e560020a62461bcd02815260206004820152601f60248201527f706172656e7448617368206f722072656365697074486173682077726f6e670060448201526064016108b8565b6120d3846000015182815181106120c6576120c6615468565b60200260200101516124b2565b91506120fb846000015182815181106120ee576120ee615468565b602002602001015161255f565b8061210581615407565b915050612030565b600c5461211a9042615339565b6000828152600360205260408120600101919091555b825181101561084f576000828152600360205260409020835184908390811061215b5761215b615468565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a03938416178255938301519481018054909416949091169390931790915560400151600290910155806121c881615407565b915050612130565b606060006121df836002615365565b6121ea906002615339565b67ffffffffffffffff81111561220257612202615481565b6040519080825280601f01601f19166020018201604052801561222c576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061226357612263615468565b6020010190600160f860020a031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122ae576122ae615468565b6020010190600160f860020a031916908160001a90535060006122d2846002615365565b6122dd906001615339565b90505b6001811115612364577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061231e5761231e615468565b1a60f860020a0282828151811061233757612337615468565b6020010190600160f860020a031916908160001a90535060109094049361235d816153f0565b90506122e0565b5083156123b65760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108b8565b9392505050565b60008083600001516000815181106123d7576123d7615468565b60200260200101518385600001516001815181106123f7576123f7615468565b602002602001015161240c87602001516125a4565b87518051600290811061242157612421615468565b6020026020010151886040015160405160200161243e9190615155565b604051602081830303815290604052896000015160038151811061246457612464615468565b60200260200101516040516020016124829796959493929190614f58565b6040516020818303038152906040528051906020012090506124aa846000015182600461270c565b949350505050565b600081600001518260400151836060015184608001518560a001518660c001516040516020016124e796959493929190614df4565b60408051601f198184030181529082905260e084015161010085015161012086015161014087015161016088015194956125249590602001615069565b60408051601f1981840301815290829052612542929160200161503a565b604051602081830303815290604052805190602001209050919050565b610b2b61256f8260e001516127bc565b612578836127ef565b6125868461014001516127bc565b6125938560a001516127bc565b856101800151866101a00151612858565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b602081101561263b578181815181106125ed576125ed615468565b60209101015160f860020a90819004027fff0000000000000000000000000000000000000000000000000000000000000016156126295761263b565b8061263381615407565b9150506125d2565b6000612648826020615384565b67ffffffffffffffff81111561266057612660615481565b6040519080825280601f01601f19166020018201604052801561268a576020820181803683370190505b50905060005b81518110156127035783836126a481615407565b9450815181106126b6576126b6615468565b602001015160f860020a900460f860020a028282815181106126da576126da615468565b6020010190600160f860020a031916908160001a905350806126fb81615407565b915050612690565b50949350505050565b60006060825b85518110156127b25785818151811061272d5761272d615468565b602002602001015185878360016127449190615339565b8151811061275457612754615468565b602002602001015160405160200161276e93929190615003565b60405160208183030381529060405291506020825111612796576127918261539b565b61279e565b815160208301205b94506127ab600282615339565b9050612712565b5092949350505050565b6000815160086127cc9190615365565b6127d890610100615384565b6127e18361539b565b60029190910a900492915050565b60008082602001518360400151846060015185608001518660a001518760c001518860e001518961010001518a610160015160405160200161283999989796959493929190614e86565b60408051601f1981840301815291905280516020909101209392505050565b600061286661753088615351565b9050600061287787878686866128e1565b905061288585600019615351565b8111156128d75760405160e560020a62461bcd02815260206004820152601960248201527f45746861736820646966666963756c747920746f6f206c6f770000000000000060448201526064016108b8565b5050505050505050565b6000806128ee8787612bce565b90506128f8614462565b612900614481565b6000858152601060205260408120610201810154610200909101549091808261296e5760405160e560020a62461bcd02815260206004820152601160248201527f45706f636844617461206e6f742073657400000000000000000000000000000060448201526064016108b8565b600091505b60108210156129a55760208202878101805191880191825251610200909101528161299d81615407565b925050612973565b600091505b6040821015612b2e57865160009084906129e6908518896129cc602088615422565b602081106129dc576129dc615468565b6020020151612c75565b6129f09190615422565b90506129fc8a82612c95565b612a0982858f8f8a612cfa565b14612a595760405160e560020a62461bcd02815260206004820152600a60248201527f506f57206661696c65640000000000000000000000000000000000000000000060448201526064016108b8565b600091505b6008821015612b1b57602060808481028e0182810180519386028b01805163ffffffff9586166301000193918202188616825260408401805161010084018051918916918402919091188816905260608501805161020085018051918a16918502919091188916905294909501805161030090930180519388169390920292909218909516909452805164010000000090819004909152825181900490925280518290049052815104905281612b1381615407565b925050612a5e565b5081612b2681615407565b9250506129aa565b600091505b6020821015612bb357612b80612b74612b68888560208110612b5757612b57615468565b6020020151896129cc876001615339565b886129cc866002615339565b876129cc856003615339565b85612b8c600485615351565b60088110612b9c57612b9c615468565b6020020152612bac600483615339565b9150612b33565b612bbd8786612ed5565b9d9c50505050505050505050505050565b612bd66144a0565b612bde6144bf565b612be78461320d565b67ffffffffffffffff811682529350612c096801000000000000000085615351565b67ffffffffffffffff811660208301529350612c2e6801000000000000000085615351565b67ffffffffffffffff811660408301529350612c536801000000000000000085615351565b67ffffffffffffffff811660608301526080820184905293506124aa8161324f565b600081612c86846301000193615365565b1863ffffffff16905092915050565b6000828152601060205260408120610201810154600290810a840491839183046102008110612cc657612cc6615468565b01549050612cd5600283615422565b612ceb576001608060020a031691506108269050565b608060020a9004949350505050565b600080612d078587613564565b6001608060020a03169050600080808080612d23600289615422565b6002909804971190506000612d38888c615365565b90508115612d4d57612d4a8b82615339565b90505b60005b88811015612e485760208282010260208b01015193508c60011660001415612d86578695506001608060020a0384169450612d96565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965060018d16612dec57869550608060020a84049450612df9565b608060020a840495508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965080612e4081615407565b915050612d50565b8215612ec45760208282010260208b01015193508c60011660001415612e7c578695506001608060020a0384169450612e8c565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206001608060020a031696505b50949b9a5050505050505050505050565b6000808360076020020151612ef7906c01000000000000000000000000615365565b60c0850151612f0f9068010000000000000000615365565b60a0860151612f2390640100000000615365565b6080870151612f329190615339565b612f3c9190615339565b612f469190615339565b612f5490608060020a615365565b6060850151612f70906c01000000000000000000000000615365565b6040860151612f889068010000000000000000615365565b6020870151612f9c90640100000000615365565b8751612fa89190615339565b612fb29190615339565b612fbc9190615339565b612fc69190615339565b9050600084600f6020020151612fe9906c01000000000000000000000000615365565b6101c08601516130029068010000000000000000615365565b6101a087015161301790640100000000615365565b6101808801516130279190615339565b6130319190615339565b61303b9190615339565b61304990608060020a615365565b610160860151613066906c01000000000000000000000000615365565b61014087015161307f9068010000000000000000615365565b61012088015161309490640100000000615365565b6101008901516130a49190615339565b6130ae9190615339565b6130b89190615339565b6130c29190615339565b9050600084600760200201516130e5906c01000000000000000000000000615365565b60c08601516130fd9068010000000000000000615365565b60a087015161311190640100000000615365565b60808801516131209190615339565b61312a9190615339565b6131349190615339565b61314290608060020a615365565b606086015161315e906c01000000000000000000000000615365565b60408701516131769068010000000000000000615365565b602088015161318a90640100000000615365565b88516131969190615339565b6131a09190615339565b6131aa9190615339565b6131b49190615339565b90506131bf8361320d565b6131c88361320d565b6131d18361320d565b604080516020810194909452830191909152606082015260800160408051808303601f1901815291905280516020909101209695505050505050565b60008060005b60208110156132485761322d60ff85166101008402615339565b6101009094049391508061324081615407565b915050613213565b5092915050565b6132576144a0565b61326360096008615365565b6048146132b55760405160e560020a62461bcd02815260206004820152600c60248201527f73706f6e6765206572726f72000000000000000000000000000000000000000060448201526064016108b8565b600160a08301526780000000000000006101008301526048600860006132dc600983615365565b90506132e66144de565b600080805b6132f58786615351565b83101561341857600091505b60058210156133fb575060005b60058110156133e9576133218688615351565b61332c836005615365565b6133369083615339565b10156133d75788613348836005615365565b82613354866009615365565b61335e9190615339565b6133689190615339565b6009811061337857613378615468565b6020020151848361338a846005615365565b6133949190615339565b601981106133a4576133a4615468565b60200201511884836133b7846005615365565b6133c19190615339565b601981106133d1576133d1615468565b60200201525b806133e181615407565b91505061330e565b816133f381615407565b925050613301565b61340484613665565b93508261341081615407565b9350506132eb565b6134206144a0565b60005b601081101561355657600093505b600584101561355157600092505b600583101561353f57613452888a615351565b61345d856005615365565b6134679085615339565b1080156134745750601081105b1561352d578584613486856005615365565b6134909190615339565b601981106134a0576134a0615468565b602002015163ffffffff168282601081106134bd576134bd615468565b602002015264010000000086856134d5866005615365565b6134df9190615339565b601981106134ef576134ef615468565b60200201516134fe9190615351565b8261350a836001615339565b6010811061351a5761351a615468565b602002015261352a600282615339565b90505b8261353781615407565b93505061343f565b8361354981615407565b945050613431565b613423565b509998505050505050505050565b600082613572836004615365565b8151811061358257613582615468565b6020026020010151838360046135989190615365565b6135a3906001615339565b815181106135b3576135b3615468565b6020026020010151848460046135c99190615365565b6135d4906002615339565b815181106135e4576135e4615468565b6020026020010151858560046135fa9190615365565b613605906003615339565b8151811061361557613615615468565b6020026020010151604051602001613646949392919093845260208401929092526040830152606082015260800190565b60408051808303601f1901815291905280516020909101209392505050565b61366d6144de565b6136756144de565b61367d6144fd565b6136856144fd565b600060405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b6018811015614426576080808801516060808a01516040808c01516020808e01518e511890911890921890931888526101208b01516101008c015160e08d015160c08e015160a08f0151181818189088018190526101c08b01516101a08c01516101808d01516101608e01516101408f015118181818928801929092526102608a01516102408b01516102208c01516102008d01516101e08e015118181818908701526103008901516102e08a01516102c08b01516102a08c01516102808d0151181818189186019190915261388a9067800000000000000090615351565b602085015161389a906002615365565b608086015167ffffffffffffffff919091169190911718835260408401516138cb9067800000000000000090615351565b60408501516138db906002615365565b855167ffffffffffffffff9190911691909117186020840152606084015161390c9067800000000000000090615351565b606085015161391c906002615365565b67ffffffffffffffff1617846001602002015118836002602002015267800000000000000084600460200201516139539190615351565b6080850151613963906002615365565b604086015167ffffffffffffffff919091169190911718606084015283516139949067800000000000000090615351565b84516139a1906002615365565b60608087015167ffffffffffffffff929092169290921718608080860191825285518a5118808b52865160208c81018051909218825288516040808f01805190921890915289518e8801805190911890528951948e0180519095189094528801805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291870180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292860180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a018051909118905290865251613b2c90631000000090615351565b6020880151613b4090641000000000615365565b67ffffffffffffffff16176101008601526040870151613b699067200000000000000090615351565b6040880151613b79906008615365565b67ffffffffffffffff16176101608601526060870151613b9d906280000090615351565b6060880151613bb29065020000000000615365565b67ffffffffffffffff16176102608601526080870151613bd9906540000000000090615351565b6080880151613beb9062040000615365565b67ffffffffffffffff16176102c086015260a0870151613c149067800000000000000090615351565b60a0880151613c24906002615365565b67ffffffffffffffff1617604086015260c0870151613c47906210000090615351565b60c0880151613c5c9065100000000000615365565b67ffffffffffffffff161760a086015260e0870151613c8390664000000000000090615351565b60e0880151613c9490610400615365565b67ffffffffffffffff16176101a0860152610100870151613cb9906208000090615351565b610100880151613ccf9065200000000000615365565b67ffffffffffffffff1617610200860152610120870151613cf99067400000000000000090615351565b610120880151613d0a906004615365565b67ffffffffffffffff1617610300860152610140870151613d2d90600490615351565b610140880151613d4590674000000000000000615365565b67ffffffffffffffff16176080860152610160870151613d6e9067040000000000000090615351565b610160880151613d7f906040615365565b67ffffffffffffffff161760e0860152610180870151613da3906220000090615351565b610180880151613db99065080000000000615365565b67ffffffffffffffff16176101408601526101a0870151613de290660200000000000090615351565b6101a0880151613df490618000615365565b67ffffffffffffffff16176102408601526101c0870151613e1790600890615351565b6101c0880151613e2f90672000000000000000615365565b67ffffffffffffffff16176102a08601526101e0870151613e569064100000000090615351565b6101e0880151613e6a906310000000615365565b67ffffffffffffffff1617602086015261020087810151613e8b9190615351565b610200880151613ea2906680000000000000615365565b67ffffffffffffffff1617610120860152610220870151613ec99064800000000090615351565b610220880151613edd906302000000615365565b67ffffffffffffffff1617610180860152610240870151613f05906508000000000090615351565b610240880151613f189062200000615365565b67ffffffffffffffff16176101e0860152610260870151613f3c9061010090615351565b610260880151613f5490670100000000000000615365565b67ffffffffffffffff16176102e0860152610280870151613f7b9064200000000090615351565b610280880151613f8f906308000000615365565b67ffffffffffffffff161760608601526102a0870151613fb6906510000000000090615351565b6102a0880151613fc99062100000615365565b67ffffffffffffffff161760c08601526102c0870151613fee90630200000090615351565b6102c088015161400390648000000000615365565b67ffffffffffffffff16176101c08601526102e087015161402d9067010000000000000090615351565b6102e088015161403f90610100615365565b67ffffffffffffffff161761022086015261030087015161406890660400000000000090615351565b61030088015161407a90614000615365565b67ffffffffffffffff1617856014602002015284600a602002015185600560200201511916856000602002015118876000602002015284600b602002015185600660200201511916856001602002015118876001602002015284600c602002015185600760200201511916856002602002015118876002602002015284600d602002015185600860200201511916856003602002015118876003602002015284600e602002015185600960200201511916856004602002015118876004602002015284600f602002015185600a602002015119168560056020020151188760056020020152846010602002015185600b602002015119168560066020020151188760066020020152846011602002015185600c602002015119168560076020020151188760076020020152846012602002015185600d602002015119168560086020020151188760086020020152846013602002015185600e602002015119168560096020020151188760096020020152846014602002015185600f6020020151191685600a60200201511887600a602002015284601560200201518560106020020151191685600b60200201511887600b602002015284601660200201518560116020020151191685600c60200201511887600c602002015284601760200201518560126020020151191685600d60200201511887600d602002015284601860200201518560136020020151191685600e60200201511887600e602002015284600060200201518560146020020151191685600f60200201511887600fa5761440a615468565b602002015187511887528061441e81615407565b9150506137ab565b509495945050505050565b5080546000825560030290600052602060002090810190610b2b919061451b565b50610b2b90610200810190614552565b6040518061040001604052806020906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b6040518061020001604052806010906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b5b8082111561454e578054600160a060020a0319908116825560018201805490911690556000600282015560030161451c565b5090565b5b8082111561454e5760008155600101614553565b600082601f83011261457857600080fd5b8135602061458d61458883615315565b6152e4565b82815281810190858301838502870184018810156145aa57600080fd5b60005b858110156145d25781356145c08161549a565b845292840192908401906001016145ad565b5090979650505050505050565b600082601f8301126145f057600080fd5b8135602061460061458883615315565b8281528181019085830160608086028801850189101561461f57600080fd5b6000805b8781101561467b5782848c031215614639578182fd5b614641615274565b843561464c8161549a565b81528488013561465b8161549a565b818901526040858101359082015286529486019492820192600101614623565b50929998505050505050505050565b600082601f83011261469b57600080fd5b813560206146ab61458883615315565b82815281810190858301838502870184018810156146c857600080fd5b60005b858110156145d2578135845292840192908401906001016146cb565b80357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198116811461471557600080fd5b919050565b600082601f83011261472b57600080fd5b813567ffffffffffffffff81111561474557614745615481565b614758601f8201601f19166020016152e4565b81815284602083860101111561476d57600080fd5b816020850160208301376000918101602001919091529392505050565b60006060828403121561479c57600080fd5b6147a4615274565b9050813567ffffffffffffffff808211156147be57600080fd5b818401915084601f8301126147d257600080fd5b813560206147e261458883615315565b82815281810190858301838502870184018a10156147ff57600080fd5b60005b8581101561483a5781358781111561481957600080fd5b6148278c87838c010161471a565b8552509284019290840190600101614802565b5050865250858101359085015250604084013591508082111561485c57600080fd5b50614869848285016145df565b60408301525092915050565b60006020828403121561488757600080fd5b81356123b68161549a565b600080604083850312156148a557600080fd5b82356148b08161549a565b915060208301356148c08161549a565b809150509250929050565b600080600080608085870312156148e157600080fd5b84356148ec8161549a565b935060208501356148fc8161549a565b9250604085013591506060850135614913816154af565b939692955090935050565b60006020828403121561493057600080fd5b813567ffffffffffffffff81111561494757600080fd5b6124aa84828501614567565b6000806040838503121561496657600080fd5b823567ffffffffffffffff8082111561497e57600080fd5b61498a86838701614567565b935060208501359150808211156149a057600080fd5b506149ad85828601614567565b9150509250929050565b6000602082840312156149c957600080fd5b81516123b6816154af565b6000602082840312156149e657600080fd5b5035919050565b60008060408385031215614a0057600080fd5b8235915060208301356148c08161549a565b600060208284031215614a2457600080fd5b81357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811681146123b657600080fd5b60006020808385031215614a6457600080fd5b67ffffffffffffffff8084351115614a7b57600080fd5b8335840160408187031215614a8f57600080fd5b614a9761529d565b8282351115614aa557600080fd5b8135820187601f820112614ab857600080fd5b614ac56145888235615315565b808235825286820191508683018a88898635028601011115614ae657600080fd5b60005b8435811015614d12578782351115614b0057600080fd5b813585016101c0818e03601f19011215614b1957600080fd5b614b216152c0565b614b2c8b83016146e7565b8152614b3a604083016146e7565b8b8201528960608301351115614b4f57600080fd5b614b618e8c606085013585010161471a565b6040820152608082013560608201528960a08301351115614b8157600080fd5b614b938e8c60a085013585010161471a565b60808201528960c08301351115614ba957600080fd5b614bbb8e8c60c085013585010161471a565b60a08201528960e08301351115614bd157600080fd5b614be38e8c60e085013585010161471a565b60c08201526101008201358a811115614bfb57600080fd5b614c098f8d8386010161471a565b60e0830152506101208201358a811115614c2257600080fd5b614c308f8d8386010161471a565b610100830152506101408201358a811115614c4a57600080fd5b614c588f8d8386010161471a565b610120830152506101608201358a811115614c7257600080fd5b614c808f8d8386010161471a565b610140830152506101808201358a811115614c9a57600080fd5b614ca88f8d8386010161471a565b610160830152506101a08201358a811115614cc257600080fd5b614cd08f8d8386010161468a565b610180830152506101c08201358a811115614cea57600080fd5b614cf88f8d8386010161468a565b6101a0830152508552509288019290880190600101614ae9565b50508352505081840135831015614d2857600080fd5b614d378785840135840161478a565b848201528094505050505092915050565b60008060008060808587031215614d5e57600080fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115614d8a57600080fd5b614d968782880161468a565b91505092959194509250565b600081518084526020808501945080840160005b838110156144265781518051600160a060020a0390811689528482015116848901526040908101519088015260609096019590820190600101614db6565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198716815260008651614e2c816003850160208b016153c4565b80830190508660038201528551614e4a816023840160208a016153c4565b8551910190614e608160238401602089016153c4565b8451910190614e768160238401602088016153c4565b0160230198975050505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198a168152600089516020614ebf8260038601838f016153c4565b81840191508a600383015260238a51614edd81838601858f016153c4565b8a51930192614ef181838601858e016153c4565b8951930192614f0581838601858d016153c4565b8851930192614f1981838601858c016153c4565b8751930192614f2d81838601858b016153c4565b8651930192614f4181838601858a016153c4565b929092019091019c9b505050505050505050505050565b600088516020614f6b8285838e016153c4565b81840191506c01000000000000000000000000600160a060020a038b1602825260148951614f9e81838601858e016153c4565b8951930192614fb281838601858d016153c4565b8851930192614fc681838601858c016153c4565b8751930192614fda81838601858b016153c4565b8651930192614fee81838601858a016153c4565b929092019091019a9950505050505050505050565b600084516150158184602089016153c4565b8201848152835161502d8160208085019088016153c4565b0160200195945050505050565b6000835161504c8184602088016153c4565b8351908301906150608183602088016153c4565b01949350505050565b6000865161507b818460208b016153c4565b86519083019061508f818360208b016153c4565b86519101906150a2818360208a016153c4565b85519101906150b58183602089016153c4565b84519101906150c88183602088016153c4565b01979650505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161510c8160178501602088016153c4565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516151498160288401602088016153c4565b01602801949350505050565b6020815260006123b66020830184614da2565b60006020808301818452808554808352604092508286019150866000528360002060005b828110156151cb578154600160a060020a039081168552600180840154909116878601526002830154868601526060909401936003909201910161518c565b5091979650505050505050565b60208152600082518060208401526151f78160408501602087016153c4565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b60208152600082516040602084015261525e6060840182614da2565b9050602084015160408401528091505092915050565b6040516060810167ffffffffffffffff8111828210171561529757615297615481565b60405290565b6040805190810167ffffffffffffffff8111828210171561529757615297615481565b6040516101c0810167ffffffffffffffff8111828210171561529757615297615481565b604051601f8201601f1916810167ffffffffffffffff8111828210171561530d5761530d615481565b604052919050565b600067ffffffffffffffff82111561532f5761532f615481565b5060209081020190565b6000821982111561534c5761534c615436565b500190565b6000826153605761536061544f565b500490565b600081600019048311821515161561537f5761537f615436565b500290565b60008282101561539657615396615436565b500390565b805160208083015191908110156153be578060200360080260020a600003821691505b50919050565b60005b838110156153df5781810151838201526020016153c7565b83811115610bcc5750506000910152565b6000816153ff576153ff615436565b506000190190565b600060001982141561541b5761541b615436565b5060010190565b6000826154315761543161544f565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610b2b57600080fd5b8015158114610b2b57600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220f9a0cfc24f7e6dfa91afaf06a5c6940826ccc9eff0e47da74498a11a84b3676164736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 397,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 5436,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "queue",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Transfer)6288_storage)dyn_storage"
      },
      {
        "astId": 5441,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "lockedTransfers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LockedTransfers)6305_storage)"
      },
      {
        "astId": 5444,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "oldestLockedEventId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5448,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5450,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 5452,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "fee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5454,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "8",
        "type": "t_address_payable"
      },
      {
        "astId": 5456,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "sideBridgeAddress",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 5458,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "minSafetyBlocks",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 5460,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "timeframeSeconds",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5462,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "lockTime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5464,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "inputEventId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5467,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "outputEventId",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5469,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "lastTimeframe",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 4201,
        "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
        "label": "epochData",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(EthashCacheOptData)4196_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Transfer)6288_storage)dyn_storage": {
        "base": "t_struct(Transfer)6288_storage",
        "encoding": "dynamic_array",
        "label": "struct CommonStructs.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)512_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[512]",
        "numberOfBytes": "16384"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_struct(EthashCacheOptData)4196_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ethash.EthashCacheOptData)",
        "numberOfBytes": "32",
        "value": "t_struct(EthashCacheOptData)4196_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedTransfers)6305_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonStructs.LockedTransfers)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedTransfers)6305_storage"
      },
      "t_struct(EthashCacheOptData)4196_storage": {
        "encoding": "inplace",
        "label": "struct Ethash.EthashCacheOptData",
        "members": [
          {
            "astId": 4191,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "merkleNodes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)512_storage"
          },
          {
            "astId": 4193,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "fullSizeIn128Resultion",
            "offset": 0,
            "slot": "512",
            "type": "t_uint256"
          },
          {
            "astId": 4195,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "branchDepth",
            "offset": 0,
            "slot": "513",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "16448"
      },
      "t_struct(LockedTransfers)6305_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.LockedTransfers",
        "members": [
          {
            "astId": 6302,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "transfers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transfer)6288_storage)dyn_storage"
          },
          {
            "astId": 6304,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transfer)6288_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.Transfer",
        "members": [
          {
            "astId": 6283,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6285,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 6287,
            "contract": "contracts/eth/AmbBridge.sol:AmbBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}