{
  "language": "Solidity",
  "sources": {
    "contracts/checks/CheckAura.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"./CheckReceiptsProof.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./SignatureCheck.sol\";\n\n\ncontract CheckAura is Initializable {\n    bytes1 constant PARENT_HASH_PREFIX = 0xA0;\n    bytes1 constant STEP_PREFIX = 0x84;\n    bytes2 constant SIGNATURE_PREFIX = 0xB841;\n\n    address[] public validatorSet;\n    address validatorSetAddress;\n    bytes32 public lastProcessedBlock; // actually latest processed block in which *vs change event* emitted\n    uint public minSafetyBlocksValidators;\n\n\n    struct BlockAura {\n        bytes3 p0Seal;\n        bytes3 p0Bare;\n\n        bytes32 parentHash;\n        bytes p2;\n        bytes32 receiptHash;\n        bytes p3;\n\n        bytes4 step;\n        bytes signature;  // todo maybe pass s r v values?\n\n        uint64 finalizedVs;\n    }\n\n\n    struct ValidatorSetChange {\n        address deltaAddress;\n        uint16 deltaIndex; // add if 0, else remove\n    }\n\n    struct ValidatorSetProof {\n        bytes[] receiptProof;\n        ValidatorSetChange[] changes;\n        uint64 eventBlock;\n    }\n\n    struct AuraProof {\n        BlockAura[] blocks;\n        CommonStructs.TransferProof transfer;\n        ValidatorSetProof[] vsChanges;\n        uint64 transferEventBlock;\n    }\n\n\n    function __CheckAura_init(\n        address[] calldata initialValidators_,\n        address validatorSetAddress_,\n        bytes32 lastProcessedBlock_,\n        uint minSafetyBlocksValidators_\n    ) internal initializer {\n        require(initialValidators_.length > 0, \"Length of _initialValidators must be bigger than 0\");\n\n        validatorSet = initialValidators_;\n        validatorSetAddress = validatorSetAddress_;\n        lastProcessedBlock = lastProcessedBlock_;\n        minSafetyBlocksValidators = minSafetyBlocksValidators_;\n    }\n\n\n\n    /*\n     AuraProof.blocks contains:\n      - blocks for validate validatorSet change event, in that order:\n        - block with `InitiateChange` events (contains list of all validators)\n        - some blocks, that need for validation (the amount depends on the length of the current validator set)\n        - block, when validators finalize; have `finalizedVs` != 0\n        * repeated for each vs change event; all events must go in order, without omissions *\n\n      - block with transfer event;\n      - safety blocks for transfer event\n\n      AuraProof.vsChanges contains changes in validator set and receiptProof for validation.\n      block.finalizedVs-1 is index in AuraProof.vsChanges array\n\n      Function will check all blocks, processing vs change events if needed.\n      Each block parentHash must be equal to the seal hash of the previous block, except for gaps between vsChange events\n      If there are no errors, the transfer is considered valid\n    */\n    function checkAura_(AuraProof calldata auraProof, uint minSafetyBlocks, address sideBridgeAddress) internal {\n\n        bytes32 parentHash;\n        bytes32 receiptHash;\n\n        // auraProof can be without transfer event when we have to many vsChanges and transfer doesn't fit into proof\n        if (auraProof.transfer.eventId != 0) {\n            receiptHash = calcTransferReceiptsHash(auraProof.transfer, sideBridgeAddress);\n            require(auraProof.blocks[auraProof.transferEventBlock].receiptHash == receiptHash, \"Transfer event validation failed\");\n            require(auraProof.blocks.length - auraProof.transferEventBlock >= minSafetyBlocks, \"Not enough safety blocks\");\n        }\n\n        for (uint i = 0; i < auraProof.blocks.length; i++) {\n            BlockAura calldata block_ = auraProof.blocks[i];\n\n            // check that parentHash is correct\n            if (block_.parentHash != parentHash) {\n                // we can ignore wrong parentHash if:\n                // - it's NOT safety blocks for transfer event\n                // - it's first block (don't know parentHash)\n                // - it's finalizing block (there is gap BEFORE finalizing block)\n                // - it's next block after finalizing (there is gap AFTER finalizing block)\n                // else, raise error\n\n                if (i > auraProof.transferEventBlock || // safety blocks for transfer event\n                    (i != 0 && // not first block\n                    block_.finalizedVs == 0 && // not finalizing block\n                    auraProof.blocks[i-1].finalizedVs == 0) // not next block after finalizing\n                )\n                    revert(\"Wrong parent hash\");\n            }\n\n            // check validator for this block\n            // calc block hash for this block\n            parentHash = checkBlock(block_);\n\n            // if this block is finalizing block\n            // 0 means no events should be finalized, so indexes are shifted by 1\n            if (block_.finalizedVs != 0) {\n                // vs changes in that block\n                ValidatorSetProof calldata vsProof = auraProof.vsChanges[block_.finalizedVs - 1];\n\n                // apply vs changes\n                for (uint k = 0; k < vsProof.changes.length; k++)\n                    applyVsChange(vsProof.changes[k]);\n\n                // check proof\n                receiptHash = calcValidatorSetReceiptHash(vsProof.receiptProof, validatorSetAddress, validatorSet);\n                require(auraProof.blocks[vsProof.eventBlock].receiptHash == receiptHash, \"Wrong VS receipt hash\");\n                require(i - vsProof.eventBlock >= minSafetyBlocksValidators, \"Few safety blocks validators\");\n            }\n\n        }\n\n        // save block.parentHash in which latest processed vsChange event emitted\n        if (auraProof.vsChanges.length > 0) {\n            lastProcessedBlock = auraProof.blocks[auraProof.vsChanges[auraProof.vsChanges.length - 1].eventBlock].parentHash;\n        }\n    }\n\n    function getValidatorSet() public view returns (address[] memory) {\n        return validatorSet;\n    }\n\n    function applyVsChange(ValidatorSetChange calldata vsEvent) internal {\n        if (vsEvent.deltaIndex == 0) {// add validator\n            validatorSet.push(vsEvent.deltaAddress);\n        } else {// delete validator\n            uint index = uint(vsEvent.deltaIndex - 1);\n            validatorSet[index] = validatorSet[validatorSet.length - 1];\n            validatorSet.pop();\n        }\n    }\n\n    function checkBlock(BlockAura calldata block_) internal view returns (bytes32) {\n        (bytes32 bareHash, bytes32 sealHash) = calcBlockHash(block_);\n\n        address validator = validatorSet[bytesToUint(block_.step) % validatorSet.length];\n        require(ecdsaRecover(bareHash, block_.signature) == validator, \"Failed to verify sign\");\n\n        return sealHash;\n    }\n\n    function calcBlockHash(BlockAura calldata block_) internal pure returns (bytes32, bytes32) {\n        bytes memory commonRlp = abi.encodePacked(PARENT_HASH_PREFIX, block_.parentHash, block_.p2, block_.receiptHash, block_.p3);\n        return (\n        // hash without seal (bare), for signature check\n        keccak256(abi.encodePacked(block_.p0Bare, commonRlp)),\n        // hash with seal, for prevHash check\n        keccak256(abi.encodePacked(block_.p0Seal, commonRlp, STEP_PREFIX, block_.step, SIGNATURE_PREFIX, block_.signature))\n        );\n    }\n\n\n    function calcValidatorSetReceiptHash(bytes[] calldata receiptProof, address validatorSetAddress_, address[] storage vSet) private pure returns (bytes32) {\n        bytes32 el = keccak256(abi.encodePacked(\n                receiptProof[0],\n                validatorSetAddress_,\n                receiptProof[1],\n                abi.encode(vSet),\n                receiptProof[2]\n            ));\n        return calcReceiptsHash(receiptProof, el, 3);\n    }\n\n    function bytesToUint(bytes4 b) internal pure returns (uint){\n        return uint(uint32(b));\n    }\n\n    uint256[15] private ___gap;\n}\n"
    },
    "contracts/checks/CheckReceiptsProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../common/CommonStructs.sol\";\n\n\n// check readme for focs\nfunction calcReceiptsHash(bytes[] calldata proof, bytes32 el, uint proofStart) pure returns (bytes32) {\n    bytes memory s;\n\n    for (uint i = proofStart; i < proof.length; i += 2) {\n        s = abi.encodePacked(proof[i], el, proof[i + 1]);\n        el = (s.length > 32) ? keccak256(s) : bytes32(s);\n    }\n\n    return el;\n}\n\n\nfunction calcTransferReceiptsHash(CommonStructs.TransferProof calldata p, address eventContractAddress) pure returns (bytes32) {\n    bytes32 el = keccak256(abi.encodePacked(\n            p.receiptProof[0],\n            eventContractAddress,\n            p.receiptProof[1],\n            toBinary(p.eventId),\n            p.receiptProof[2],\n            abi.encode(p.transfers),\n            p.receiptProof[3]\n        ));\n    return calcReceiptsHash(p.receiptProof, el, 4);\n    // start from proof[4]\n}\n\n\nfunction toBinary(uint _x) pure returns (bytes memory) {\n    bytes memory b = new bytes(32);\n    assembly {\n        mstore(add(b, 32), _x)\n    }\n    uint i;\n    for (i = 0; i < 32; i++) {\n        if (b[i] != 0) {\n            break;\n        }\n    }\n    bytes memory res = new bytes(32 - i);\n    for (uint j = 0; j < res.length; j++) {\n        res[j] = b[i++];\n    }\n    return res;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/checks/SignatureCheck.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nfunction ecdsaRecover(bytes32 messageHash, bytes memory signature) pure returns(address) {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n    assembly {\n        r := mload(add(signature, 32))\n        s := mload(add(signature, 64))\n        v := byte(0, mload(add(signature, 96)))\n        if lt(v, 27) {v := add(v, 27)}\n    }\n    return ecrecover(messageHash, v, r, s);\n}\n"
    },
    "contracts/common/CommonStructs.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nlibrary CommonStructs {\n    struct Transfer {\n        address tokenAddress;\n        address toAddress;\n        uint amount;\n    }\n\n    struct TransferProof {\n        bytes[] receiptProof;\n        uint eventId;\n        Transfer[] transfers;\n    }\n\n    struct LockedTransfers {\n        Transfer[] transfers;\n        uint endTimestamp;\n    }\n\n    struct ConstructorArgs {\n        address sideBridgeAddress; address adminAddress;\n        address relayAddress; address wrappingTokenAddress;\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\n        address payable transferFeeRecipient; address payable bridgeFeeRecipient;\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\n    }\n}\n"
    },
    "contracts/networks/_AuraReceiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../common/CommonBridge.sol\";\nimport \"../checks/CheckAura.sol\";\n\n\ncontract _AuraReceiver is CommonBridge, CheckAura {\n\n    function initialize(\n        CommonStructs.ConstructorArgs calldata args,\n        address[] calldata initialValidators,\n        address validatorSetAddress,\n        bytes32 lastProcessedBlock,\n        uint minSafetyBlocksValidators\n    ) public initializer {\n        __CommonBridge_init(args);\n        __CheckAura_init(initialValidators, validatorSetAddress, lastProcessedBlock, minSafetyBlocksValidators);\n    }\n\n\n    function changeMinSafetyBlocksValidators(uint minSafetyBlocksValidators_) public onlyRole(ADMIN_ROLE) {\n        minSafetyBlocksValidators = minSafetyBlocksValidators_;\n    }\n\n    function submitTransferAura(AuraProof calldata auraProof) public onlyRole(RELAY_ROLE) whenNotPaused {\n        emit TransferSubmit(auraProof.transfer.eventId);\n        checkEventId(auraProof.transfer.eventId);\n        checkAura_(auraProof, minSafetyBlocks, sideBridgeAddress);\n        lockTransfers(auraProof.transfer.transfers, auraProof.transfer.eventId);\n    }\n\n    function submitValidatorSetChangesAura(AuraProof calldata auraProof) public onlyRole(RELAY_ROLE) whenNotPaused {\n        checkAura_(auraProof, minSafetyBlocks, sideBridgeAddress);\n    }\n\n}\n"
    },
    "contracts/common/CommonBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./CommonStructs.sol\";\nimport \"../tokens/IWrapper.sol\";\nimport \"../checks/SignatureCheck.sol\";\n\n\ncontract CommonBridge is Initializable, AccessControlUpgradeable, PausableUpgradeable {\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant RELAY_ROLE = keccak256(\"RELAY_ROLE\");\n\n    // Signature contains timestamp divided by SIGNATURE_FEE_TIMESTAMP; SIGNATURE_FEE_TIMESTAMP should be the same on relay;\n    uint private constant SIGNATURE_FEE_TIMESTAMP = 1800;  // 30 min\n    // Signature will be valid for `SIGNATURE_FEE_TIMESTAMP` * `signatureFeeCheckNumber` seconds after creation\n    uint internal signatureFeeCheckNumber;\n\n\n    // queue of Transfers to be pushed in another network\n    CommonStructs.Transfer[] queue;\n\n    // locked transfers from another network\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\n    // head index of lockedTransfers 'queue' mapping\n    uint public oldestLockedEventId;\n\n\n    // this network to side network token addresses mapping\n    mapping(address => address) public tokenAddresses;\n    // token that implement `IWrapper` interface and used to wrap native coin\n    address public wrapperAddress;\n\n    // addresses that will receive fees\n    address payable public transferFeeRecipient;\n    address payable public bridgeFeeRecipient;\n\n    address public sideBridgeAddress;  // transfer events from side networks must be created by this address\n    uint public minSafetyBlocks;  // proof must contains at least `minSafetyBlocks` blocks after block with transfer\n    uint public timeframeSeconds;  // `withdrawFinish` func will be produce Transfer event no more often than `timeframeSeconds`\n    uint public lockTime;  // transfers received from side networks can be unlocked after `lockTime` seconds\n\n    uint public inputEventId; // last processed event from side network\n    uint public outputEventId;  // last created event in this network. start from 1 coz 0 consider already processed\n\n    uint public lastTimeframe; // timestamp / `timeframeSeconds` of latest withdraw\n\n\n    event Withdraw(address indexed from, uint eventId, address tokenFrom, address tokenTo, uint amount,\n        uint transferFeeAmount, uint bridgeFeeAmount);\n    event Transfer(uint indexed eventId, CommonStructs.Transfer[] queue);\n    event TransferSubmit(uint indexed eventId);\n    event TransferFinish(uint indexed eventId);\n\n    function __CommonBridge_init(CommonStructs.ConstructorArgs calldata args) internal initializer {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(RELAY_ROLE, args.relayAddress);\n        _setupRole(ADMIN_ROLE, args.adminAddress);\n\n        // initialise tokenAddresses with start values\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\n        wrapperAddress = args.wrappingTokenAddress;\n\n        sideBridgeAddress = args.sideBridgeAddress;\n        transferFeeRecipient = args.transferFeeRecipient;\n        bridgeFeeRecipient = args.bridgeFeeRecipient;\n        minSafetyBlocks = args.minSafetyBlocks;\n        timeframeSeconds = args.timeframeSeconds;\n        lockTime = args.lockTime;\n\n        // 1, coz eventId 0 considered already processed\n        oldestLockedEventId = 1;\n        outputEventId = 1;\n\n        signatureFeeCheckNumber = 3;\n\n        lastTimeframe = block.timestamp / timeframeSeconds;\n    }\n\n\n    // `wrapWithdraw` function used for wrap some amount of native coins and send it to side network;\n    /// @dev Amount to wrap is calculated by subtracting fees from msg.value; Use `wrapperAddress` token to wrap;\n\n    /// @param toAddress Address in side network that will receive the tokens\n    /// @param transferFee Amount (in native coins), payed to compensate gas fees in side network\n    /// @param bridgeFee Amount (in native coins), payed as bridge earnings\n    /// @param feeSignature Signature signed by relay that confirms that the fee values are valid\n    function wrapWithdraw(address toAddress,\n        bytes calldata feeSignature, uint transferFee, uint bridgeFee\n    ) public payable {\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\n        require(tokenSideAddress != address(0), \"Unknown token address\");\n\n        require(msg.value > transferFee + bridgeFee, \"Sent value <= fee\");\n\n        uint amount = msg.value - transferFee - bridgeFee;\n        feeCheck(wrapperAddress, feeSignature, transferFee, bridgeFee, amount);\n        transferFeeRecipient.transfer(transferFee);\n        bridgeFeeRecipient.transfer(bridgeFee);\n\n        IWrapper(wrapperAddress).deposit{value : amount}();\n\n        //\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\n        emit Withdraw(msg.sender, outputEventId, address(0), tokenSideAddress, amount, transferFee, bridgeFee);\n\n        withdrawFinish();\n    }\n\n    // `withdraw` function used for sending tokens from this network to side network;\n    /// @param tokenThisAddress Address of token [that will be transferred] in current network\n    /// @param toAddress Address in side network that will receive the tokens\n    /// @param amount Amount of tokens to be sent\n    /** @param unwrapSide If true, user on side network will receive native network coin instead of ERC20 token.\n     Transferred token MUST be wrapper of side network native coin (ex: WETH, if side net is Ethereum)\n     `tokenAddresses[0x0] == tokenThisAddress` means that `tokenThisAddress` is thisNet analogue of wrapper token in sideNet\n    */\n    /// @param transferFee Amount (in native coins), payed to compensate gas fees in side network\n    /// @param bridgeFee Amount (in native coins), payed as bridge earnings\n    /// @param feeSignature Signature signed by relay that confirms that the fee values are valid\n    function withdraw(\n        address tokenThisAddress, address toAddress, uint amount, bool unwrapSide,\n        bytes calldata feeSignature, uint transferFee, uint bridgeFee\n    ) payable public {\n        address tokenSideAddress;\n        if (unwrapSide) {\n            require(tokenAddresses[address(0)] == tokenThisAddress, \"Token not point to native token\");\n            // tokenSideAddress will be 0x0000000000000000000000000000000000000000 - for native token\n        } else {\n            tokenSideAddress = tokenAddresses[tokenThisAddress];\n            require(tokenSideAddress != address(0), \"Unknown token address\");\n        }\n\n        require(msg.value == transferFee + bridgeFee, \"Sent value != fee\");\n\n        require(amount > 0, \"Cannot withdraw 0\");\n\n        feeCheck(tokenThisAddress, feeSignature, transferFee, bridgeFee, amount);\n        transferFeeRecipient.transfer(transferFee);\n        bridgeFeeRecipient.transfer(bridgeFee);\n\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \"Fail transfer coins\");\n\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\n        emit Withdraw(msg.sender, outputEventId, tokenThisAddress, tokenSideAddress, amount, transferFee, bridgeFee);\n\n        withdrawFinish();\n    }\n\n    // can be called to force emit `Transfer` event, without waiting for withdraw in next timeframe\n    function triggerTransfers() public {\n        require(queue.length != 0, \"Queue is empty\");\n\n        emit Transfer(outputEventId++, queue);\n        delete queue;\n    }\n\n\n    // after `lockTime` period, transfers can be unlocked\n    function unlockTransfers(uint eventId) public whenNotPaused {\n        require(eventId == oldestLockedEventId, \"can unlock only oldest event\");\n\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\n        require(transfersLocked.endTimestamp > 0, \"no locked transfers with this id\");\n        require(transfersLocked.endTimestamp < block.timestamp, \"lockTime has not yet passed\");\n\n        proceedTransfers(transfersLocked.transfers);\n\n        delete lockedTransfers[eventId];\n        emit TransferFinish(eventId);\n\n        oldestLockedEventId = eventId + 1;\n    }\n\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\n    function unlockTransfersBatch() public whenNotPaused {\n        uint eventId = oldestLockedEventId;\n        for (;; eventId++) {\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\n\n            proceedTransfers(transfersLocked.transfers);\n\n            delete lockedTransfers[eventId];\n            emit TransferFinish(eventId);\n        }\n        oldestLockedEventId = eventId;\n    }\n\n    // delete transfers with passed eventId **and all after it**\n    function removeLockedTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\n        require(eventId >= oldestLockedEventId, \"eventId must be >= oldestLockedEventId\");  // can't undo unlocked :(\n        require(eventId <= inputEventId, \"eventId must be <= inputEventId\");\n\n        // now waiting for submitting a new transfer with `eventId` id\n        inputEventId = eventId - 1;\n\n        for (; lockedTransfers[eventId].endTimestamp != 0; eventId++)\n            delete lockedTransfers[eventId];\n\n    }\n\n    // pretend like bridge already receive and process all transfers up to `eventId` id\n    // BIG WARNING: CAN'T BE UNDONE coz of security reasons\n    function skipTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\n        require(eventId >= oldestLockedEventId, \"eventId must be >= oldestLockedEventId\"); // can't undo unlocked :(\n\n        inputEventId = eventId - 1; // now waiting for submitting a new transfer with `eventId` id\n        oldestLockedEventId = eventId;  // and no need to unlock previous transfers\n    }\n\n\n    // views\n\n    // returns locked transfers from another network\n    function getLockedTransfers(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\n        return lockedTransfers[eventId];\n    }\n\n\n    function isQueueEmpty() public view returns (bool) {\n        return queue.length == 0;\n    }\n\n\n    // admin setters\n\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\n        minSafetyBlocks = minSafetyBlocks_;\n    }\n\n    function changeTransferFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\n        transferFeeRecipient = feeRecipient_;\n    }\n\n    function changeBridgeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\n        bridgeFeeRecipient = feeRecipient_;\n    }\n\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\n        lastTimeframe = (lastTimeframe * timeframeSeconds) / timeframeSeconds_;\n        timeframeSeconds = timeframeSeconds_;\n    }\n\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\n        lockTime = lockTime_;\n    }\n\n    function changeSignatureFeeCheckNumber(uint signatureFeeCheckNumber_) public onlyRole(ADMIN_ROLE) {\n        signatureFeeCheckNumber = signatureFeeCheckNumber_;\n    }\n\n    // token addressed mapping\n\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\n    }\n\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\n        delete tokenAddresses[tokenThisAddress];\n    }\n\n    function tokensAddBatch(address[] calldata tokenThisAddresses, address[] calldata tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\n    }\n\n    function _tokensAddBatch(address[] calldata tokenThisAddresses, address[] calldata tokenSideAddresses) private {\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \"sizes of tokenThisAddresses and tokenSideAddresses must be same\");\n        uint arrayLength = tokenThisAddresses.length;\n        for (uint i = 0; i < arrayLength; i++)\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\n    }\n\n    function tokensRemoveBatch(address[] calldata tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\n        uint arrayLength = tokenThisAddresses.length;\n        for (uint i = 0; i < arrayLength; i++)\n            delete tokenAddresses[tokenThisAddresses[i]];\n    }\n\n    // pause\n\n    function pause() public onlyRole(ADMIN_ROLE) {\n        _pause();\n    }\n\n    function unpause() public onlyRole(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    // internal\n\n    // submitted transfers saves in `lockedTransfers` for `lockTime` period\n    function lockTransfers(CommonStructs.Transfer[] calldata events, uint eventId) internal {\n        lockedTransfers[eventId].endTimestamp = block.timestamp + lockTime;\n        for (uint i = 0; i < events.length; i++)\n            lockedTransfers[eventId].transfers.push(events[i]);\n    }\n\n\n    // sends money according to the information in the Transfer structure\n    // if transfer.tokenAddress == 0x0, then it's transfer of `wrapperAddress` token with auto-unwrap to native coin\n    function proceedTransfers(CommonStructs.Transfer[] memory transfers) internal {\n        for (uint i = 0; i < transfers.length; i++) {\n\n            if (transfers[i].tokenAddress == address(0)) {// native token\n                IWrapper(wrapperAddress).withdraw(transfers[i].amount);\n                payable(transfers[i].toAddress).transfer(transfers[i].amount);\n            } else {// ERC20 token\n                require(\n                    IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount),\n                    \"Fail transfer coins\");\n            }\n\n        }\n    }\n\n    // used by `withdraw` and `wrapWithdraw` functions;\n    // emit `Transfer` event with current queue if timeframe was changed;\n    function withdrawFinish() internal {\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\n        if (nowTimeframe != lastTimeframe) {\n            emit Transfer(outputEventId++, queue);\n            delete queue;\n\n            lastTimeframe = nowTimeframe;\n        }\n    }\n\n    // encode message with received values and current timestamp;\n    // check that signature is same message signed by address with RELAY_ROLE;\n    // make `signatureFeeCheckNumber` attempts, each time decrementing timestampEpoch (workaround for old signature)\n    function feeCheck(address token, bytes calldata signature, uint transferFee, uint bridgeFee, uint amount) internal view {\n        bytes32 messageHash;\n        address signer;\n        uint timestampEpoch = block.timestamp / SIGNATURE_FEE_TIMESTAMP;\n\n        for (uint i = 0; i < signatureFeeCheckNumber; i++) {\n            messageHash = keccak256(abi.encodePacked(\n                    \"\\x19Ethereum Signed Message:\\n32\",\n                    keccak256(abi.encodePacked(token, timestampEpoch, transferFee, bridgeFee, amount))\n                ));\n\n            signer = ecdsaRecover(messageHash, signature);\n            if (hasRole(RELAY_ROLE, signer))\n                return;\n            timestampEpoch--;\n        }\n        revert(\"Signature check failed\");\n    }\n\n    function checkEventId(uint eventId) internal {\n        require(eventId == ++inputEventId, \"EventId out of order\");\n    }\n\n    receive() external payable {}  // need to receive native token from wrapper contract\n\n    uint256[15] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal initializer {\n        __Context_init_unchained();\n        __ERC165_init_unchained();\n        __AccessControl_init_unchained();\n    }\n\n    function __AccessControl_init_unchained() internal initializer {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/tokens/IWrapper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\ninterface IWrapper {\n    event Deposit(address indexed dst, uint amount);\n    event Withdrawal(address indexed src, uint amount);\n\n    function deposit() external payable;\n\n    function withdraw(uint amount) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/networks/ETH_EthBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"./_AuraReceiver.sol\";\n\n\ncontract ETH_EthBridge is _AuraReceiver {\n\n}\n"
    },
    "contracts/networks/BSC_BscBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"./_AuraReceiver.sol\";\n\n\ncontract BSC_BscBridge is _AuraReceiver {\n\n}\n"
    },
    "contracts/networks/ETH_AmbBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../common/CommonBridge.sol\";\nimport \"../checks/CheckUntrustless.sol\";\n\n\ncontract ETH_AmbBridge is CommonBridge, CheckUntrustless {\n\n    function initialize(\n        CommonStructs.ConstructorArgs calldata args,\n        uint _confirmations,\n        address[] calldata _relays\n    ) public initializer {\n        __CommonBridge_init(args);\n        _setRelaysAndConfirmations(new address[](0), _relays, _confirmations);\n    }\n\n    function upgrade(\n        uint _confirmations,\n        address[] memory _relays\n    ) public {\n        require(msg.sender == address(this), \"This method require multisig\");\n        // _setRelaysAndConfirmations don't work during upgrade and nobody knows why\n        relays = _relays;\n        confirmationsThreshold = _confirmations;\n    }\n\n    function submitTransferUntrustless(uint eventId, CommonStructs.Transfer[] calldata transfers) public whenNotPaused {\n        // relay \"role\" checked at CheckUntrustless contract\n        require(eventId == inputEventId + 1, \"EventId out of order\");\n\n        bool confirm = checkUntrustless_(eventId, transfers);\n        if (confirm) {// required count of confirmations reached\n            ++inputEventId;\n            emit TransferSubmit(eventId);\n            lockTransfers(transfers, eventId);\n            // todo need lock?\n        }\n    }\n\n    function setRelaysAndConfirmations(address[] calldata toRemove, address[] calldata toAdd, uint _confirmations) public {\n        require(msg.sender == address(this), \"This method require multisig\");\n        _setRelaysAndConfirmations(toRemove, toAdd, _confirmations);\n    }\n\n    function setSideBridge(address _sideBridgeAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(sideBridgeAddress == address(0), \"sideBridgeAddress already set\");\n        sideBridgeAddress = _sideBridgeAddress;\n    }\n\n\n}\n"
    },
    "contracts/checks/CheckUntrustless.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../common/CommonStructs.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n\ncontract CheckUntrustless {\n    uint public confirmationsThreshold;\n\n    // [hash of (eventId, transfers)] => [relayAddress] => isConfirmed\n    mapping(bytes32 => mapping(address => bool)) public confirmations;\n\n    // using this instead of RELAY_ROLE coz it simpler\n    address[] public relays;\n\n    event RelayAdd(address indexed relay);\n    event RelayRemove(address indexed relay);\n    event ThresholdChange(uint newThreshold);\n    event RelayConfirmation(address indexed sender, uint indexed eventId, bytes32 hash);\n\n    // return true if current call reach confirmationsThreshold\n    function checkUntrustless_(uint eventId, CommonStructs.Transfer[] calldata transfers) internal returns (bool) {\n        require(isRelay(msg.sender), \"You not in relay whitelist\");\n\n        bytes32 hash = transfersHash(eventId, transfers);\n        require(confirmations[hash][msg.sender] == false, \"You have already confirmed this\");\n\n        uint confirmCount = confirmedCount(hash);\n        require(confirmCount < confirmationsThreshold, \"Already confirmed\");\n\n        confirmations[hash][msg.sender] = true;\n        emit RelayConfirmation(msg.sender, eventId, hash);\n\n        // +1 coz current relay confirmed just now\n        return confirmCount + 1 >= confirmationsThreshold;\n    }\n\n\n    function isConfirmedByRelay(address relay, uint eventId, CommonStructs.Transfer[] calldata transfers) public view returns (bool) {\n        bytes32 hash = transfersHash(eventId, transfers);\n        return confirmations[hash][relay];\n    }\n\n\n    function confirmedCount(bytes32 hash) public view returns (uint) {\n        uint res;\n        for (uint i = 0; i < relays.length; i++)\n            if (confirmations[hash][relays[i]])\n                res++;\n        return res;\n    }\n\n\n    function isRelay(address relay) public view returns (bool){\n        for (uint i = 0; i < relays.length; i++)\n            if (relays[i] == relay)\n                return true;\n        return false;\n    }\n\n    function getRelays() public view returns (address[] memory) {\n        return relays;\n    }\n\n    function transfersHash(uint eventId, CommonStructs.Transfer[] calldata transfers) public pure returns (bytes32) {\n        bytes memory payload = abi.encodePacked(eventId);\n\n        // i guess we can hash transfers only in this way\n        for (uint i = 0; i < transfers.length; i++)\n            payload = abi.encodePacked(payload, transfers[i].amount, transfers[i].toAddress, transfers[i].tokenAddress);\n\n        return keccak256(payload);\n    }\n\n\n    function _setRelaysAndConfirmations(address[] memory toRemove, address[] memory toAdd, uint _confirmations) internal {\n        for (uint i = 0; i < toRemove.length; i++)\n            _removeRelay(toRemove[i]);\n        for (uint i = 0; i < toAdd.length; i++)\n            _addRelay(toAdd[i]);\n\n        if (confirmationsThreshold != _confirmations) {\n            confirmationsThreshold = _confirmations;\n            emit ThresholdChange(_confirmations);\n        }\n    }\n\n    function _removeRelay(address relay) internal {\n        for (uint i = 0; i < relays.length; i++) {\n            if (relays[i] == relay) {\n                relays[i] = relays[relays.length - 1];\n                relays.pop();\n                emit RelayRemove(relay);\n                return;\n            }\n        }\n        revert(\"Not a relay\");\n    }\n\n    function _addRelay(address relay) internal {\n        require(!isRelay(relay), \"Already relay\");\n        relays.push(relay);\n        emit RelayAdd(relay);\n    }\n\n    uint256[15] private ___gap;\n\n}\n"
    },
    "contracts/contracts_for_tests/CheckUntrustlessTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../checks/CheckUntrustless.sol\";\n\ncontract CheckUntrustlessTest is CheckUntrustless {\n    constructor() {}\n\n    event checkUntrustlessTestResult(bool result);\n\n    function checkUntrustlessTest(uint eventId, CommonStructs.Transfer[] calldata transfers) public {\n        emit checkUntrustlessTestResult(checkUntrustless_(eventId, transfers));\n    }\n\n    function setRelaysAndConfirmationsTest(address[] calldata toRemove, address[] calldata toAdd, uint _confirmations) public {\n        _setRelaysAndConfirmations(toRemove, toAdd, _confirmations);\n    }\n\n}\n"
    },
    "contracts/checks/CheckPoW.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"./CheckReceiptsProof.sol\";\nimport \"./CheckPoW_Ethash.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n\ncontract CheckPoW is Initializable, Ethash {\n    struct BlockPoW {\n        bytes3 p0WithNonce;\n        bytes3 p0WithoutNonce;\n\n        bytes p1;\n        bytes32 parentOrReceiptHash;\n        bytes p2;\n        bytes difficulty;\n        bytes p3;\n        bytes number;\n        bytes p4;  // end when extra end\n        bytes p5;  // after extra\n        bytes nonce;\n        bytes p6;\n\n        uint[] dataSetLookup;\n        uint[] witnessForLookup;\n    }\n\n    struct PoWProof {\n        BlockPoW[] blocks;\n        CommonStructs.TransferProof transfer;\n    }\n\n    uint256 minimumDifficulty;\n\n    function __CheckPoW_init(\n        uint256 minimumDifficulty_\n    ) internal initializer {\n        minimumDifficulty = minimumDifficulty_;\n    }\n\n    /*\n     PoWProof.blocks contains:\n      - block with transfer event;\n      - safety blocks for transfer event\n\n      Function will check all blocks, checking it pow hash.\n      Each block parentHash must be equal to the hash of the previous block.\n      If there are no errors, the transfer is considered valid\n    */\n    function checkPoW_(PoWProof calldata powProof, address sideBridgeAddress) internal view\n    {\n        bytes32 hash = calcTransferReceiptsHash(powProof.transfer, sideBridgeAddress);\n        for (uint i = 0; i < powProof.blocks.length; i++) {\n            require(powProof.blocks[i].parentOrReceiptHash == hash, \"parentHash or receiptHash wrong\");\n            hash = blockHash(powProof.blocks[i]);\n\n            verifyEthash(powProof.blocks[i]);\n        }\n    }\n\n\n    function verifyEthash(BlockPoW calldata block_) internal view {\n        uint difficulty = bytesToUint(block_.difficulty);\n        require(difficulty >= minimumDifficulty, \"difficulty too low\");\n        verifyPoW(\n            bytesToUint(block_.number),\n            blockHashWithoutNonce(block_),\n            bytesToUint(block_.nonce),\n            difficulty,\n            block_.dataSetLookup,\n            block_.witnessForLookup\n        );\n    }\n\n    function blockHash(BlockPoW calldata block_) internal pure returns (bytes32) {\n        // Note: too much arguments in abi.encodePacked() function cause CompilerError: Stack too deep...\n        return keccak256(abi.encodePacked(\n                abi.encodePacked(\n                    block_.p0WithNonce,\n                    block_.p1,\n                    block_.parentOrReceiptHash,\n                    block_.p2,\n                    block_.difficulty,\n                    block_.p3\n                ),\n                abi.encodePacked(\n                    block_.number,\n                    block_.p4,\n                    block_.p5,\n                    block_.nonce,\n                    block_.p6\n                )\n            ));\n    }\n\n    function blockHashWithoutNonce(BlockPoW calldata block_) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\n            abi.encodePacked(\n                block_.p0WithoutNonce,\n                block_.p1,\n                block_.parentOrReceiptHash,\n                block_.p2\n            ),\n            abi.encodePacked(\n                block_.difficulty,\n                block_.p3,\n                block_.number,\n                block_.p4,\n                block_.p6\n            )\n        ));\n    }\n\n\n    function bytesToUint(bytes calldata b) private pure returns (uint){\n        return uint(bytes32(b)) >> (256 - b.length * 8);\n    }\n\n    uint256[15] private ___gap;\n}\n"
    },
    "contracts/checks/CheckPoW_Ethash.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\n/// @dev These contracts are used to verify Proof of Work within a smart contract.\n///      The algorithms have been extracted from the implementation of smart pool (https://github.com/smartpool)\ncontract SHA3_512 {\n    constructor() {}\n\n    function keccak_f(uint[25] memory A) pure private returns (uint[25] memory) {\n        uint[25] memory B;\n        uint[5]  memory C;\n        uint[5]  memory D;\n\n        uint[24] memory RC = [\n        uint(0x0000000000000001),\n        0x0000000000008082,\n        0x800000000000808A,\n        0x8000000080008000,\n        0x000000000000808B,\n        0x0000000080000001,\n        0x8000000080008081,\n        0x8000000000008009,\n        0x000000000000008A,\n        0x0000000000000088,\n        0x0000000080008009,\n        0x000000008000000A,\n        0x000000008000808B,\n        0x800000000000008B,\n        0x8000000000008089,\n        0x8000000000008003,\n        0x8000000000008002,\n        0x8000000000000080,\n        0x000000000000800A,\n        0x800000008000000A,\n        0x8000000080008081,\n        0x8000000000008080,\n        0x0000000080000001,\n        0x8000000080008008];\n\n        for (uint i = 0; i < 24; i++) {\n\n            C[0] = A[0] ^ A[1] ^ A[2] ^ A[3] ^ A[4];\n            C[1] = A[5] ^ A[6] ^ A[7] ^ A[8] ^ A[9];\n            C[2] = A[10] ^ A[11] ^ A[12] ^ A[13] ^ A[14];\n            C[3] = A[15] ^ A[16] ^ A[17] ^ A[18] ^ A[19];\n            C[4] = A[20] ^ A[21] ^ A[22] ^ A[23] ^ A[24];\n\n            D[0] = C[4] ^ ((C[1] * 2) & 0xffffffffffffffff | (C[1] / (2 ** 63)));\n            D[1] = C[0] ^ ((C[2] * 2) & 0xffffffffffffffff | (C[2] / (2 ** 63)));\n            D[2] = C[1] ^ ((C[3] * 2) & 0xffffffffffffffff | (C[3] / (2 ** 63)));\n            D[3] = C[2] ^ ((C[4] * 2) & 0xffffffffffffffff | (C[4] / (2 ** 63)));\n            D[4] = C[3] ^ ((C[0] * 2) & 0xffffffffffffffff | (C[0] / (2 ** 63)));\n\n            A[0] = A[0] ^ D[0];\n            A[1] = A[1] ^ D[0];\n            A[2] = A[2] ^ D[0];\n            A[3] = A[3] ^ D[0];\n            A[4] = A[4] ^ D[0];\n            A[5] = A[5] ^ D[1];\n            A[6] = A[6] ^ D[1];\n            A[7] = A[7] ^ D[1];\n            A[8] = A[8] ^ D[1];\n            A[9] = A[9] ^ D[1];\n            A[10] = A[10] ^ D[2];\n            A[11] = A[11] ^ D[2];\n            A[12] = A[12] ^ D[2];\n            A[13] = A[13] ^ D[2];\n            A[14] = A[14] ^ D[2];\n            A[15] = A[15] ^ D[3];\n            A[16] = A[16] ^ D[3];\n            A[17] = A[17] ^ D[3];\n            A[18] = A[18] ^ D[3];\n            A[19] = A[19] ^ D[3];\n            A[20] = A[20] ^ D[4];\n            A[21] = A[21] ^ D[4];\n            A[22] = A[22] ^ D[4];\n            A[23] = A[23] ^ D[4];\n            A[24] = A[24] ^ D[4];\n\n            /*Rho and pi steps*/\n            B[0] = A[0];\n            B[8] = ((A[1] * (2 ** 36)) & 0xffffffffffffffff | (A[1] / (2 ** 28)));\n            B[11] = ((A[2] * (2 ** 3)) & 0xffffffffffffffff | (A[2] / (2 ** 61)));\n            B[19] = ((A[3] * (2 ** 41)) & 0xffffffffffffffff | (A[3] / (2 ** 23)));\n            B[22] = ((A[4] * (2 ** 18)) & 0xffffffffffffffff | (A[4] / (2 ** 46)));\n            B[2] = ((A[5] * (2 ** 1)) & 0xffffffffffffffff | (A[5] / (2 ** 63)));\n            B[5] = ((A[6] * (2 ** 44)) & 0xffffffffffffffff | (A[6] / (2 ** 20)));\n            B[13] = ((A[7] * (2 ** 10)) & 0xffffffffffffffff | (A[7] / (2 ** 54)));\n            B[16] = ((A[8] * (2 ** 45)) & 0xffffffffffffffff | (A[8] / (2 ** 19)));\n            B[24] = ((A[9] * (2 ** 2)) & 0xffffffffffffffff | (A[9] / (2 ** 62)));\n            B[4] = ((A[10] * (2 ** 62)) & 0xffffffffffffffff | (A[10] / (2 ** 2)));\n            B[7] = ((A[11] * (2 ** 6)) & 0xffffffffffffffff | (A[11] / (2 ** 58)));\n            B[10] = ((A[12] * (2 ** 43)) & 0xffffffffffffffff | (A[12] / (2 ** 21)));\n            B[18] = ((A[13] * (2 ** 15)) & 0xffffffffffffffff | (A[13] / (2 ** 49)));\n            B[21] = ((A[14] * (2 ** 61)) & 0xffffffffffffffff | (A[14] / (2 ** 3)));\n            B[1] = ((A[15] * (2 ** 28)) & 0xffffffffffffffff | (A[15] / (2 ** 36)));\n            B[9] = ((A[16] * (2 ** 55)) & 0xffffffffffffffff | (A[16] / (2 ** 9)));\n            B[12] = ((A[17] * (2 ** 25)) & 0xffffffffffffffff | (A[17] / (2 ** 39)));\n            B[15] = ((A[18] * (2 ** 21)) & 0xffffffffffffffff | (A[18] / (2 ** 43)));\n            B[23] = ((A[19] * (2 ** 56)) & 0xffffffffffffffff | (A[19] / (2 ** 8)));\n            B[3] = ((A[20] * (2 ** 27)) & 0xffffffffffffffff | (A[20] / (2 ** 37)));\n            B[6] = ((A[21] * (2 ** 20)) & 0xffffffffffffffff | (A[21] / (2 ** 44)));\n            B[14] = ((A[22] * (2 ** 39)) & 0xffffffffffffffff | (A[22] / (2 ** 25)));\n            B[17] = ((A[23] * (2 ** 8)) & 0xffffffffffffffff | (A[23] / (2 ** 56)));\n            B[20] = ((A[24] * (2 ** 14)) & 0xffffffffffffffff | (A[24] / (2 ** 50)));\n\n            /*Xi state*/\n            A[0] = B[0] ^ ((~B[5]) & B[10]);\n            A[1] = B[1] ^ ((~B[6]) & B[11]);\n            A[2] = B[2] ^ ((~B[7]) & B[12]);\n            A[3] = B[3] ^ ((~B[8]) & B[13]);\n            A[4] = B[4] ^ ((~B[9]) & B[14]);\n            A[5] = B[5] ^ ((~B[10]) & B[15]);\n            A[6] = B[6] ^ ((~B[11]) & B[16]);\n            A[7] = B[7] ^ ((~B[12]) & B[17]);\n            A[8] = B[8] ^ ((~B[13]) & B[18]);\n            A[9] = B[9] ^ ((~B[14]) & B[19]);\n            A[10] = B[10] ^ ((~B[15]) & B[20]);\n            A[11] = B[11] ^ ((~B[16]) & B[21]);\n            A[12] = B[12] ^ ((~B[17]) & B[22]);\n            A[13] = B[13] ^ ((~B[18]) & B[23]);\n            A[14] = B[14] ^ ((~B[19]) & B[24]);\n            A[15] = B[15] ^ ((~B[20]) & B[0]);\n            A[16] = B[16] ^ ((~B[21]) & B[1]);\n            A[17] = B[17] ^ ((~B[22]) & B[2]);\n            A[18] = B[18] ^ ((~B[23]) & B[3]);\n            A[19] = B[19] ^ ((~B[24]) & B[4]);\n            A[20] = B[20] ^ ((~B[0]) & B[5]);\n            A[21] = B[21] ^ ((~B[1]) & B[6]);\n            A[22] = B[22] ^ ((~B[2]) & B[7]);\n            A[23] = B[23] ^ ((~B[3]) & B[8]);\n            A[24] = B[24] ^ ((~B[4]) & B[9]);\n\n            /*Last step*/\n            A[0] = A[0] ^ RC[i];\n        }\n\n        return A;\n    }\n\n\n    function sponge(uint[9] memory M) pure internal returns (uint[16] memory) {\n        require((M.length * 8) == 72, \"sponge error\");\n\n        M[5] = 0x01;\n        M[8] = 0x8000000000000000;\n\n        uint r = 72;\n        uint w = 8;\n        uint size = M.length * 8;\n\n        uint[25] memory S;\n        uint i;\n        uint y;\n        uint x;\n        /*Absorbing Phase*/\n        for (i = 0; i < size / r; i++) {\n            for (y = 0; y < 5; y++) {\n                for (x = 0; x < 5; x++) {\n                    if ((x + 5 * y) < (r / w)) {\n                        S[5 * x + y] = S[5 * x + y] ^ M[i * 9 + x + 5 * y];\n                    }\n                }\n            }\n            S = keccak_f(S);\n        }\n\n        /*Squeezing phase*/\n        uint[16] memory result;\n        uint b = 0;\n        while (b < 16) {\n            for (y = 0; y < 5; y++) {\n                for (x = 0; x < 5; x++) {\n                    if ((x + 5 * y) < (r / w) && (b < 16)) {\n                        result[b] = S[5 * x + y] & 0xFFFFFFFF;\n                        result[b + 1] = S[5 * x + y] / 0x100000000;\n                        b += 2;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\ncontract Ethash is SHA3_512 {\n\n    uint constant EPOCH_LENGTH = 30000;   // blocks per epoch\n\n    constructor() {\n    }\n\n    struct EthashCacheOptData {\n        uint[512] merkleNodes;\n        uint fullSizeIn128Resultion;\n        uint branchDepth;\n    }\n\n    mapping(uint => EthashCacheOptData) epochData;\n\n\n    function verifyPoW(uint blockNumber, bytes32 rlpHeaderHashWithoutNonce, uint nonce, uint difficulty,\n        uint[] memory dataSetLookup, uint[] memory witnessForLookup) internal view {\n\n        uint epoch = blockNumber / EPOCH_LENGTH;\n        uint ethash = hashimoto(rlpHeaderHashWithoutNonce, nonce, dataSetLookup, witnessForLookup, epoch);\n\n        require(ethash <= (2 ** 256 - 1) / difficulty, \"Ethash difficulty too low\");\n    }\n\n    function isEpochDataSet(uint epochIndex) public view returns (bool) {\n        return epochData[epochIndex].fullSizeIn128Resultion != 0;\n    }\n\n    function setEpochData(\n        uint epochNum,\n        uint fullSizeIn128Resultion,\n        uint branchDepth,\n        uint[] calldata merkleNodes\n    ) public {\n\n        // we store only previous and current epochs\n        // so, delete second from the end epoch\n        if (epochNum >= 2)  // underflow check\n            delete epochData[epochNum - 2];\n\n\n        uint l = merkleNodes.length;\n        uint[512] storage nodes = epochData[epochNum].merkleNodes;\n\n        for (uint i = 0; i < l; i++) {\n            nodes[i] = merkleNodes[i];\n        }\n\n        epochData[epochNum].fullSizeIn128Resultion = fullSizeIn128Resultion;\n        epochData[epochNum].branchDepth = branchDepth;\n    }\n\n\n    function hashimoto(bytes32 header,\n        uint nonceLe,\n        uint[] memory dataSetLookup,\n        uint[] memory witnessForLookup,\n        uint epochIndex) private view returns (uint) {\n\n        uint[16] memory s = computeS(uint(header), nonceLe);\n        uint[32] memory mix;\n        uint[8]  memory cmix;\n\n\n        uint depth = epochData[epochIndex].branchDepth;\n        uint fullSize = epochData[epochIndex].fullSizeIn128Resultion;\n\n        uint i;\n        uint j;\n\n        require(fullSize != 0, \"EpochData not set\");\n\n\n        for (i = 0; i < 16; i++) {\n            assembly {\n                let offset := mul(i, 0x20)\n\n            //mix[i] = s[i];\n                mstore(add(mix, offset), mload(add(s, offset)))\n\n            // mix[i+16] = s[i];\n                mstore(add(mix, add(0x200, offset)), mload(add(s, offset)))\n            }\n        }\n\n        for (i = 0; i < 64; i++) {\n            uint p = fnv(i ^ s[0], mix[i % 32]) % fullSize;\n\n            // console.log(computeCacheRoot( p, i, dataSetLookup,  witnessForLookup, depthAndFullSize[0]));\n            // console.log(getMerkleLeave( epochIndex, p ));\n\n            if (computeCacheRoot(p, i, dataSetLookup, witnessForLookup, depth) != getMerkleLeave(epochIndex, p)) {\n                // PoW failed\n                revert(\"PoW failed\");\n            }\n\n            for (j = 0; j < 8; j++) {\n\n                assembly{\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & varFFFFFFFF );\n                    let dataOffset := add(mul(0x80, i), add(dataSetLookup, 0x20))\n                    let dataValue := and(mload(dataOffset), 0xFFFFFFFF)\n\n                    let mixOffset := add(mix, mul(0x20, j))\n                    let mixValue := mload(mixOffset)\n\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\n                    let fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\n                    mstore(mixOffset, fnvValue)\n\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\n                    dataOffset := add(dataOffset, 0x20)\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\n\n                    mixOffset := add(mixOffset, 0x100)\n                    mixValue := mload(mixOffset)\n\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\n                    mstore(mixOffset, fnvValue)\n\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\n                    dataOffset := add(dataOffset, 0x20)\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\n\n                    mixOffset := add(mixOffset, 0x100)\n                    mixValue := mload(mixOffset)\n\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\n                    mstore(mixOffset, fnvValue)\n\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\n                    dataOffset := add(dataOffset, 0x20)\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\n\n                    mixOffset := add(mixOffset, 0x100)\n                    mixValue := mload(mixOffset)\n\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\n                    mstore(mixOffset, fnvValue)\n\n                }\n\n\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & 0xFFFFFFFF );\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\n\n\n                //dataSetLookup[4*i    ] = dataSetLookup[4*i    ]/(2**32);\n                //dataSetLookup[4*i + 1] = dataSetLookup[4*i + 1]/(2**32);\n                //dataSetLookup[4*i + 2] = dataSetLookup[4*i + 2]/(2**32);\n                //dataSetLookup[4*i + 3] = dataSetLookup[4*i + 3]/(2**32);\n\n                assembly{\n                    let offset := add(add(dataSetLookup, 0x20), mul(i, 0x80))\n                    let value := div(mload(offset), 0x100000000)\n                    mstore(offset, value)\n\n                    offset := add(offset, 0x20)\n                    value := div(mload(offset), 0x100000000)\n                    mstore(offset, value)\n\n                    offset := add(offset, 0x20)\n                    value := div(mload(offset), 0x100000000)\n                    mstore(offset, value)\n\n                    offset := add(offset, 0x20)\n                    value := div(mload(offset), 0x100000000)\n                    mstore(offset, value)\n                }\n            }\n        }\n\n\n        for (i = 0; i < 32; i += 4) {\n            cmix[i / 4] = (fnv(fnv(fnv(mix[i], mix[i + 1]), mix[i + 2]), mix[i + 3]));\n        }\n\n        return computeSha3(s, cmix);\n\n    }\n\n\n    function fnv(uint v1, uint v2) pure internal returns (uint) {\n        return ((v1 * 0x01000193) ^ v2) & 0xFFFFFFFF;\n    }\n\n    function computeCacheRoot(uint index,\n        uint indexInElementsArray,\n        uint[] memory elements,\n        uint[] memory witness,\n        uint branchSize) pure private returns (uint) {\n\n        uint leaf = computeLeaf(elements, indexInElementsArray) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n\n        uint left;\n        uint right;\n        uint node;\n        bool oddBranchSize = (branchSize % 2) > 0;\n\n        assembly {\n            branchSize := div(branchSize, 2)\n        //branchSize /= 2;\n        }\n        uint witnessIndex = indexInElementsArray * branchSize;\n        if (oddBranchSize) witnessIndex += indexInElementsArray;\n\n        uint depth;\n        for (depth = 0; depth < branchSize; depth++) {\n            assembly {\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\n            }\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n            if (index & 0x1 == 0) {\n                left = leaf;\n                assembly{\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n                }\n\n            }\n            else {\n                assembly{\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n                }\n                right = leaf;\n            }\n\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n            assembly {\n                index := div(index, 2)\n            }\n\n            //node  = witness[witnessIndex + depth] / (2**128);\n            if (index & 0x1 == 0) {\n                left = leaf;\n                assembly{\n                    right := div(node, 0x100000000000000000000000000000000)\n                }\n            }\n            else {\n                assembly {\n                    left := div(node, 0x100000000000000000000000000000000)\n                }\n                right = leaf;\n            }\n\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n            assembly {\n                index := div(index, 2)\n            }\n        }\n\n        if (oddBranchSize) {\n            assembly {\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\n            }\n\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n            if (index & 0x1 == 0) {\n                left = leaf;\n                assembly{\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n                }\n            }\n            else {\n                assembly{\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n                }\n\n                right = leaf;\n            }\n\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        }\n\n\n        return leaf;\n    }\n\n\n    function computeSha3(uint[16] memory s, uint[8] memory cmix) pure internal returns (uint) {\n        uint s0 = s[0] + s[1] * (2 ** 32) + s[2] * (2 ** 64) + s[3] * (2 ** 96) +\n        (s[4] + s[5] * (2 ** 32) + s[6] * (2 ** 64) + s[7] * (2 ** 96)) * (2 ** 128);\n\n        uint s1 = s[8] + s[9] * (2 ** 32) + s[10] * (2 ** 64) + s[11] * (2 ** 96) +\n        (s[12] + s[13] * (2 ** 32) + s[14] * (2 ** 64) + s[15] * (2 ** 96)) * (2 ** 128);\n\n        uint c = cmix[0] + cmix[1] * (2 ** 32) + cmix[2] * (2 ** 64) + cmix[3] * (2 ** 96) +\n        (cmix[4] + cmix[5] * (2 ** 32) + cmix[6] * (2 ** 64) + cmix[7] * (2 ** 96)) * (2 ** 128);\n\n\n        /* god knows why need to convert to big endian */\n        return uint(keccak256(abi.encodePacked(reverseBytes(s0), reverseBytes(s1), reverseBytes(c))));\n    }\n\n\n    function computeLeaf(uint[] memory dataSetLookup, uint index) pure internal returns (uint) {\n        return uint(keccak256(abi.encodePacked(\n                dataSetLookup[4 * index],\n                dataSetLookup[4 * index + 1],\n                dataSetLookup[4 * index + 2],\n                dataSetLookup[4 * index + 3]\n            )));\n\n    }\n\n    function computeS(uint header, uint nonceLe) pure internal returns (uint[16] memory) {\n        uint[9] memory M;\n\n        header = reverseBytes(header);\n\n        M[0] = uint(header) & 0xFFFFFFFFFFFFFFFF;\n        header = header / 2 ** 64;\n        M[1] = uint(header) & 0xFFFFFFFFFFFFFFFF;\n        header = header / 2 ** 64;\n        M[2] = uint(header) & 0xFFFFFFFFFFFFFFFF;\n        header = header / 2 ** 64;\n        M[3] = uint(header) & 0xFFFFFFFFFFFFFFFF;\n\n        // make little endian nonce\n        M[4] = nonceLe;\n        return sponge(M);\n    }\n\n    function reverseBytes(uint input) pure internal returns (uint) {\n        uint result;\n        for (uint i = 0; i < 32; i++) {\n            result = (result << 8) + (input & 0xff);\n            input = input >> 8;\n        }\n        return result;\n    }\n\n\n    function getMerkleLeave(uint epochIndex, uint p) view internal returns (uint) {\n        uint rootIndex = uint(p >> epochData[epochIndex].branchDepth);\n        uint expectedRoot = epochData[epochIndex].merkleNodes[(rootIndex >> 1)];\n\n        if ((rootIndex % 2) == 0)\n            return expectedRoot & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n        return expectedRoot >> 128;\n    }\n\n}\n"
    },
    "contracts/networks/ETH_AmbBridge_PoW.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../common/CommonBridge.sol\";\nimport \"../checks/CheckPoW.sol\";\n\n\ncontract ETH_AmbBridge_PoW is CommonBridge, CheckPoW {\n\n    function initialize(\n        CommonStructs.ConstructorArgs calldata args,\n        uint minimumDifficulty\n    ) public initializer {\n        __CommonBridge_init(args);\n        __CheckPoW_init(minimumDifficulty);\n    }\n\n    function submitTransferPoW(PoWProof calldata powProof) public onlyRole(RELAY_ROLE) whenNotPaused {\n        emit TransferSubmit(powProof.transfer.eventId);\n        checkEventId(powProof.transfer.eventId);\n        checkPoW_(powProof, sideBridgeAddress);\n        // checkPoW_(powProof, sideBridgeAddress);\n        lockTransfers(powProof.transfer.transfers, powProof.transfer.eventId);\n    }\n\n    function setSideBridge(address _sideBridgeAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(sideBridgeAddress == address(0), \"sideBridgeAddress already set\");\n        sideBridgeAddress = _sideBridgeAddress;\n    }\n}\n\n"
    },
    "contracts/contracts_for_tests/CheckPoWTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../checks/CheckPoW.sol\";\n\ncontract CheckPoWTest is CheckPoW {\n\n    constructor(\n        uint minimumDifficulty_\n    ) {\n        minimumDifficulty = minimumDifficulty_;\n    }\n\n    function checkPoWTest(PoWProof calldata powProof, address sideBridgeAddress) public {\n        checkPoW_(powProof, sideBridgeAddress);\n    }\n\n    function verifyEthashTest(BlockPoW calldata block_) public view {\n        verifyEthash(block_);\n    }\n\n    function blockHashTest(BlockPoW calldata block_) public pure returns (bytes32) {\n        return blockHash(block_);\n    }\n\n}\n"
    },
    "contracts/contracts_for_tests/CommonBridgeTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../common/CommonBridge.sol\";\nimport \"../checks/CheckReceiptsProof.sol\";\n\ncontract CommonBridgeTest is CommonBridge {\n\n    // normal constructor can't have calldata args\n    function constructor_(CommonStructs.ConstructorArgs calldata args) public {\n        __CommonBridge_init(args);\n\n        // used for signature check\n        _setupRole(RELAY_ROLE, address(0x295C2707319ad4BecA6b5bb4086617fD6F240CfE));\n    }\n\n    function lockTransfersTest(CommonStructs.Transfer[] calldata events, uint eventId) public {\n        checkEventId(eventId);  // now its more like submitTransferTest\n        lockTransfers(events, eventId);\n    }\n\n    function addElementToQueue() public {\n        queue.push(CommonStructs.Transfer(address(0), address(0), 100));\n    }\n\n    // checkReceiptsProof\n\n    function calcTransferReceiptsHashTest(CommonStructs.TransferProof calldata p, address eventContractAddress) public pure returns (bytes32) {\n        return calcTransferReceiptsHash(p, eventContractAddress);\n    }\n\n    function checkSignatureTest(bytes32 hash, bytes memory signature) public view returns(address) {\n        return ecdsaRecover(hash, signature);\n    }\n\n\n    function FeeCheckTest(address token, bytes calldata signature, uint fee1, uint fee2) public payable {\n        feeCheck(token, signature, fee1, fee2, msg.value);\n    }\n\n    function getSignatureFeeCheckNumber() public view returns (uint) {\n        return signatureFeeCheckNumber;\n    }\n}\n"
    },
    "contracts/checks/CheckPoSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../common/CommonStructs.sol\";\nimport \"./CheckReceiptsProof.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./SignatureCheck.sol\";\n\n\ncontract CheckPoSA is Initializable {\n    uint256 private constant ADDRESS_LENGTH = 20;\n    uint256 private constant EXTRA_VANITY_LENGTH = 32;\n    uint256 private constant EXTRA_SEAL_LENGTH = 65;\n    uint256 private constant EPOCH_LENGTH = 200;\n    bytes1 constant PARENT_HASH_PREFIX = 0xA0;\n\n    mapping(uint => mapping(address => bool)) internal allValidators;\n    uint public currentEpoch;\n    uint currentValidatorSetSize;\n\n    bytes1 chainId;\n\n\n    struct BlockPoSA {\n        bytes3 p0Signed;\n        bytes3 p0Unsigned;\n\n        bytes32 parentHash;\n        bytes p1;\n        bytes32 receiptHash;\n        bytes p2;\n        bytes number;\n        bytes p3;\n\n        bytes p4Signed;\n        bytes p4Unsigned;\n        bytes extraData;\n\n        bytes p5;\n    }\n\n    struct PoSAProof {\n        BlockPoSA[] blocks;\n        CommonStructs.TransferProof transfer;\n        uint64 transferEventBlock;\n    }\n\n\n    function __CheckPoSA_init(\n        address[] calldata initialValidators_,\n        uint initialEpoch_,\n        bytes1 chainId_\n    ) internal initializer {\n        require(initialValidators_.length > 0, \"Length of _initialValidators must be bigger than 0\");\n\n        chainId = chainId_;\n        currentEpoch = initialEpoch_;\n        currentValidatorSetSize = initialValidators_.length;\n\n        for (uint i = 0; i < initialValidators_.length; i++) {\n            allValidators[currentEpoch][initialValidators_[i]] = true;\n        }\n    }\n\n    /*\n     PoSAProof.blocks contains:\n      - blocks for validate validatorSet changes, in that order:\n        - first block in epoch (blockNum % 200 == 0)\n        - some blocks, that need for validation (the amount depends on the length of the current validator set)\n        - block, when validators finalize\n        * repeated for each new epoch, all epochs must go in order, without omissions *\n\n      - block with transfer event;\n      - safety blocks for transfer event\n\n      Function will check all blocks, processing vs change events if needed.\n      Each block parentHash must be equal to the seal hash of the previous block, except for gaps between epochs\n      If there are no errors, the transfer is considered valid\n    */\n    function checkPoSA_(PoSAProof calldata posaProof, uint minSafetyBlocks, address sideBridgeAddress) internal {\n        bytes32 bareHash;\n        bytes32 parentHash;\n        uint finalizeVsBlock;\n        uint nextVsSize;\n\n        // posaProof can be without transfer event when we have to many vsChanges and transfer doesn't fit into proof\n        if (posaProof.transfer.eventId != 0) {\n            bytes32 receiptHash = calcTransferReceiptsHash(posaProof.transfer, sideBridgeAddress);\n            require(posaProof.blocks[posaProof.transferEventBlock].receiptHash == receiptHash, \"Transfer event validation failed\");\n            require(posaProof.blocks.length - posaProof.transferEventBlock >= minSafetyBlocks, \"Not enough safety blocks\");\n        }\n\n        for (uint i = 0; i < posaProof.blocks.length; i++) {\n            BlockPoSA calldata block_ = posaProof.blocks[i];\n\n            if (parentHash != bytes32(0))\n                require(block_.parentHash == parentHash, \"Wrong parent hash\");\n\n            (bareHash, parentHash) = calcBlockHash(block_);\n\n            require(verifySignature(bareHash, getSignature(block_.extraData)), \"invalid signature\");\n\n            // change validator set\n\n            uint blockNumber = bytesToUint(block_.number);\n\n            if (blockNumber % EPOCH_LENGTH == 0) {\n                require(blockNumber / EPOCH_LENGTH == currentEpoch + 1, \"invalid epoch\");\n\n                nextVsSize = newValidatorSet(block_.extraData);\n                finalizeVsBlock = blockNumber + currentValidatorSetSize / 2;\n            } else if (blockNumber == finalizeVsBlock) {\n                currentEpoch++;\n                currentValidatorSetSize = nextVsSize;\n\n                // after finalizing vs change, next block in posaProof.blocks can have any parentHash (skipping some blocks)\n                // but only if it's not the safety blocks for transfer event\n                if (i < posaProof.transferEventBlock)\n                    parentHash = bytes32(0);\n            }\n        }\n    }\n\n\n    function calcBlockHash(BlockPoSA calldata block_) internal view returns (bytes32, bytes32) {\n        bytes memory commonRlp = abi.encodePacked(PARENT_HASH_PREFIX, block_.parentHash, block_.p1, block_.receiptHash, block_.p2, block_.number, block_.p3);\n        return (\n        // hash without seal (bare), for signature check\n        keccak256(abi.encodePacked(block_.p0Unsigned, chainId, commonRlp, block_.p4Unsigned, getExtraDataUnsigned(block_.extraData), block_.p5)),\n        // hash with seal, for prev_hash check\n        keccak256(abi.encodePacked(block_.p0Signed, commonRlp, block_.p4Signed, block_.extraData, block_.p5))\n        );\n    }\n\n    function getSignature(bytes calldata extraData) private pure returns (bytes calldata) {\n        uint start = extraData.length - EXTRA_SEAL_LENGTH;\n        return extraData[start : start + EXTRA_SEAL_LENGTH];\n    }\n\n    function getExtraDataUnsigned(bytes calldata extraData) private pure returns (bytes memory) {\n        return extraData[0 : extraData.length - EXTRA_SEAL_LENGTH];\n    }\n\n    function newValidatorSet(bytes calldata extraData) private returns (uint) {\n        uint nextValidatorSet = currentEpoch + 1;\n        uint endPos = extraData.length - EXTRA_SEAL_LENGTH;\n\n        uint nextValidatorSetSize;\n        for (uint pos = EXTRA_VANITY_LENGTH; pos < endPos; pos += ADDRESS_LENGTH) {\n            address validator = address(bytes20(extraData[pos : pos + ADDRESS_LENGTH]));\n            allValidators[nextValidatorSet][validator] = true;\n            nextValidatorSetSize++;\n        }\n\n        return nextValidatorSetSize;\n    }\n\n    function verifySignature(bytes32 hash, bytes calldata signature) private view returns (bool) {\n        address signer = ecdsaRecover(hash, signature);\n        return allValidators[currentEpoch][signer];\n    }\n\n    function bytesToUint(bytes calldata b) private pure returns (uint){\n        return uint(bytes32(b)) >> (256 - b.length * 8);\n    }\n}\n"
    },
    "contracts/networks/BSC_AmbBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../common/CommonBridge.sol\";\nimport \"../checks/CheckPoSA.sol\";\n\n\ncontract BSC_AmbBridge is CommonBridge, CheckPoSA {\n\n    function initialize(\n        CommonStructs.ConstructorArgs calldata args,\n        address[] calldata initialValidators,\n        uint initialEpoch,\n        bytes1 chainId\n    ) public initializer {\n        __CommonBridge_init(args);\n        __CheckPoSA_init(initialValidators, initialEpoch, chainId);\n    }\n\n    function submitTransferPoSA(PoSAProof calldata posaProof) public onlyRole(RELAY_ROLE) whenNotPaused {\n        emit TransferSubmit(posaProof.transfer.eventId);\n        checkEventId(posaProof.transfer.eventId);\n        checkPoSA_(posaProof, minSafetyBlocks, sideBridgeAddress);\n        lockTransfers(posaProof.transfer.transfers, posaProof.transfer.eventId);\n    }\n\n    function submitValidatorSetChangesPoSA(PoSAProof calldata posaProof) public onlyRole(RELAY_ROLE) whenNotPaused {\n        checkPoSA_(posaProof, minSafetyBlocks, sideBridgeAddress);\n    }\n\n    function setSideBridge(address _sideBridgeAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(sideBridgeAddress == address(0), \"sideBridgeAddress already set\");\n        sideBridgeAddress = _sideBridgeAddress;\n    }\n\n}\n"
    },
    "contracts/contracts_for_tests/CheckPoSATest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../checks/CheckPoSA.sol\";\n\n\ncontract CheckPoSATest is CheckPoSA {\n    constructor(\n        bytes1 chainId_\n    ) {\n        chainId = chainId_;\n    }\n\n    function checkPoSATest(PoSAProof calldata posaProof, uint minSafetyBlocks, address sideBridgeAddress,\n        address[] memory _initialValidators, uint _initialEpoch, bytes1 _chainId) public {\n        // TODO: we can't use the `__CheckPoSA_init` twice, but copy-paste is also not good\n        chainId = _chainId;\n        currentEpoch = _initialEpoch;\n        currentValidatorSetSize = _initialValidators.length;\n\n        for (uint i = 0; i < _initialValidators.length; i++) {\n            allValidators[currentEpoch][_initialValidators[i]] = true;\n        }\n\n        checkPoSA_(posaProof, minSafetyBlocks, sideBridgeAddress);\n    }\n\n    function blockHashTest(BlockPoSA calldata block_) public view returns (bytes32, bytes32) {\n        return calcBlockHash(block_);\n    }\n\n    function blockHashTestPaid(BlockPoSA calldata block_) public returns (bytes32, bytes32) {\n        return calcBlockHash(block_);\n    }\n\n}\n"
    },
    "contracts/tokens/sAMB.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./IWrapper.sol\";\n\ncontract sAMB is IWrapper, ERC20 {\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\n\n    function deposit() public override payable {\n        _mint(msg.sender, msg.value);\n\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint amount) public override {\n        _burn(msg.sender, amount);\n        payable(msg.sender).transfer(amount);\n\n        emit Withdrawal(msg.sender, amount);\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/tokens/BridgeERC20_Amb.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BridgeERC20_Amb is ERC20, Ownable {\n\n    // decimals of token in side network\n    // example:\n    // 0xBSC_Amb => 18 (AMB contract of BSC bridge  => 18 decimals)\n    // 0xETH_Amb => 6  (AMB contract of ETH bridge  => 6 decimals)\n    // now, token will auto convert self _decimals to side _decimals (or vice versa) on bridge transfer\n    // NOTE: value 0 means that address is not a bridge; DON'T SET NON ZERO VALUES FOR NON BRIDGE ADDRESSES\n    mapping(address => uint8) public sideTokenDecimals;\n\n    mapping(address => uint) public bridgeBalances;  // locked tokens on the side bridge\n\n    uint8 _decimals;\n\n    constructor(\n        string memory name_, string memory symbol_, uint8 decimals_,\n        address[] memory bridgeAddresses_, uint8[] memory sideTokenDecimals_\n    ) ERC20(name_, symbol_) Ownable() {\n        _setSideTokenDecimals(bridgeAddresses_, sideTokenDecimals_);\n        _decimals = decimals_;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function setSideTokenDecimals(address[] memory bridgeAddresses_, uint8[] memory sideTokenDecimals_) public onlyOwner() {\n        _setSideTokenDecimals(bridgeAddresses_, sideTokenDecimals_);\n    }\n\n    // todo check if we need this func\n    function _setSideTokenDecimals(address[] memory bridgeAddresses_, uint8[] memory sideTokenDecimals_) private {\n        require(bridgeAddresses_.length == sideTokenDecimals_.length, \"wrong array lengths\");\n        for (uint i = 0; i < bridgeAddresses_.length; i++)\n            sideTokenDecimals[bridgeAddresses_[i]] = sideTokenDecimals_[i];\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint amount\n    ) internal virtual override {\n        // todo events\n        if (sideTokenDecimals[sender] != 0) { // sender is bridge\n             // user transfer tokens to ambrosus => need to mint it\n\n            // we receive tokens from network where token have sideTokenDecimals[sender] decimals\n            // convert amount with SIDE network decimals form to SELF decimals form\n            uint amount_this = _convertDecimals(amount, sideTokenDecimals[sender], _decimals);\n\n\n            // bridge mint money to user; same amount locked on side bridge\n            bridgeBalances[sender] += amount_this;\n\n            _mint(recipient, amount_this);\n        } else if (sideTokenDecimals[recipient] != 0) { // recipient is bridge\n            // user withdraw tokens from ambrosus => need to burn it\n\n            // we transfer tokens to network where token have sideTokenDecimals[sender] decimals\n            // convert amount with SIDE network decimals form to SELF decimals form\n            uint amount_this = _convertDecimals(amount, sideTokenDecimals[recipient], _decimals);\n\n\n            // user burn tokens; side bridge must have enough tokens to send\n            require(bridgeBalances[recipient] >= amount_this, \"not enough locked tokens on bridge\");\n            bridgeBalances[recipient] -= amount_this;\n\n            _burn(sender, amount_this);\n        } else {\n            super._transfer(sender, recipient, amount);\n        }\n    }\n\n    function _convertDecimals(uint256 amount, uint8 dFrom, uint8 dTo) internal pure returns (uint256) {\n        if (dTo == dFrom)\n            return amount;\n        if (dTo > dFrom)\n            return amount * (10 ** (dTo - dFrom));\n        else\n            return amount / (10 ** (dFrom - dTo));\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/tokens/BridgeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BridgeERC20 is ERC20, Ownable {\n    address public bridgeAddress; // address of bridge contract on this network\n    uint public bridgeBalance;  // locked tokens on the bridge\n\n    uint8 _decimals;\n\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, address bridgeAddress_)\n    ERC20(name_, symbol_)\n    Ownable() {\n        bridgeAddress = bridgeAddress_;\n        _decimals = decimals_;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function setBridgeAddress(address bridgeAddress_) public onlyOwner() {\n        bridgeAddress = bridgeAddress_;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint amount\n    ) internal virtual override {\n        if (sender == bridgeAddress) {\n            // user transfer tokens to ambrosus => need to mint it\n\n            // same amount locked on side bridge\n            bridgeBalance += amount;\n\n            _mint(recipient, amount);\n        } else if (recipient == bridgeAddress) {\n            // user withdraw tokens from ambrosus => need to burn it\n\n            // side bridge must have enough tokens to send\n            require(bridgeBalance >= amount, \"not enough locked tokens on bridge\");\n            bridgeBalance -= amount;\n\n            _burn(sender, amount);\n        } else {\n            super._transfer(sender, recipient, amount);\n        }\n    }\n}\n"
    },
    "contracts/contracts_for_tests/BridgeERC20Test.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../tokens/BridgeERC20.sol\";\n\ncontract BridgeERC20Test is BridgeERC20 {\n    constructor(string memory name_, string memory symbol_, uint8 decimals_, address bridgeAddress)\n    BridgeERC20(name_, symbol_, decimals_, bridgeAddress) {}\n\n    function mint(address to,  uint256 amount) public {\n        _mint(to, amount);\n    }\n\n    function changeBridgeBalance(uint balance) public {\n        bridgeBalance = balance;\n    }\n}\n"
    },
    "contracts/contracts_for_tests/MintableERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MintableERC20 is ERC20 {\n    uint8 _decimals;\n\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function mint(address to,  uint256 amount) public {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/contracts_for_tests/CheckAuraTest.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"../checks/CheckAura.sol\";\n\ncontract CheckAuraTest is CheckAura {\n    constructor(address validatorSetAddress_, uint minSafetyBlocksValidators_) {\n        validatorSetAddress = validatorSetAddress_;\n        minSafetyBlocksValidators = minSafetyBlocksValidators_;\n    }\n\n    function checkAuraTest(AuraProof calldata auraProof, uint minSafetyBlocks, address sideBridgeAddress, address[] memory initialValidators_) public {\n        validatorSet = initialValidators_;\n        checkAura_(auraProof, minSafetyBlocks, sideBridgeAddress);\n    }\n\n    function blockHashTest(BlockAura calldata block_) public pure returns (bytes32, bytes32) {\n        return calcBlockHash(block_);\n    }\n\n    function blockHashTestPaid(BlockAura calldata block_) public returns (bytes32, bytes32) {\n        return calcBlockHash(block_);\n    }\n\n    function bytesToUintTest(bytes4 b) public pure returns (uint) {\n        return bytesToUint(b);\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "byzantium",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}