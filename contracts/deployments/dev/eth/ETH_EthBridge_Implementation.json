{
  "address": "0x49020c3d48860C1e2DEFb5d485245bCa138D65B3",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "queue",
          "type": "tuple[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockTime_",
          "type": "uint256"
        }
      ],
      "name": "changeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSafetyBlocks_",
          "type": "uint256"
        }
      ],
      "name": "changeMinSafetyBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframeSeconds_",
          "type": "uint256"
        }
      ],
      "name": "changeTimeframeSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "getLockedTransfers",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonStructs.Transfer[]",
              "name": "transfers",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.LockedTransfers",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidatorSet",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sideBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokenThisAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokenSideAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeframeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSafetyBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.ConstructorArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "initialValidators",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "validatorSetAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "lastProcessedBlock",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProcessedBlock",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSafetyBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestLockedEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "removeLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes3",
                  "name": "p0Seal",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes3",
                  "name": "p0Bare",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "receiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes4",
                  "name": "step",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "finalizedVs",
                  "type": "uint64"
                }
              ],
              "internalType": "struct CheckAura.BlockAura[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receiptProof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "eventId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receiptProof",
                  "type": "bytes[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "deltaAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "int64",
                      "name": "deltaIndex",
                      "type": "int64"
                    }
                  ],
                  "internalType": "struct CheckAura.ValidatorSetChange[]",
                  "name": "changes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CheckAura.ValidatorSetProof[]",
              "name": "vsChanges",
              "type": "tuple[]"
            },
            {
              "internalType": "uint64",
              "name": "transferEventBlock",
              "type": "uint64"
            }
          ],
          "internalType": "struct CheckAura.AuraProof",
          "name": "auraProof",
          "type": "tuple"
        }
      ],
      "name": "submitTransferAura",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeframeSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenSideAddress",
          "type": "address"
        }
      ],
      "name": "tokensAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenSideAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensAddBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        }
      ],
      "name": "tokensRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensRemoveBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerTransfers",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "unlockTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validatorSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unwrapSide",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "wrapWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x04761eee93b0c9c7725b4a8f9682eea2390dd2df7cfaca368989a319ea0bb2fc",
  "receipt": {
    "to": null,
    "from": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
    "contractAddress": "0x49020c3d48860C1e2DEFb5d485245bCa138D65B3",
    "transactionIndex": 67,
    "gasUsed": "3904451",
    "logsBloom": "0x
    "blockHash": "0x16d9a52e25daa6901b549aa1a80c7275602ff8d9a332f37bb41e4143589fd82b",
    "transactionHash": "0x04761eee93b0c9c7725b4a8f9682eea2390dd2df7cfaca368989a319ea0bb2fc",
    "logs": [],
    "blockNumber": 12272133,
    "cumulativeGasUsed": "5821803",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "49cc3226365e316ae16868d78bda3dec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"queue\",\"type\":\"tuple[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks_\",\"type\":\"uint256\"}],\"name\":\"changeMinSafetyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds_\",\"type\":\"uint256\"}],\"name\":\"changeTimeframeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getLockedTransfers\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.LockedTransfers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"initialValidators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"validatorSetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"lastProcessedBlock\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProcessedBlock\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSafetyBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestLockedEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"removeLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"p0Seal\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"p0Bare\",\"type\":\"bytes3\"},{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"step\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"finalizedVs\",\"type\":\"uint64\"}],\"internalType\":\"struct CheckAura.BlockAura[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receiptProof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receiptProof\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"deltaAddress\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"deltaIndex\",\"type\":\"int64\"}],\"internalType\":\"struct CheckAura.ValidatorSetChange[]\",\"name\":\"changes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CheckAura.ValidatorSetProof[]\",\"name\":\"vsChanges\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"transferEventBlock\",\"type\":\"uint64\"}],\"internalType\":\"struct CheckAura.AuraProof\",\"name\":\"auraProof\",\"type\":\"tuple\"}],\"name\":\"submitTransferAura\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSideAddress\",\"type\":\"address\"}],\"name\":\"tokensAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensAddBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"}],\"name\":\"tokensRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensRemoveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTransfers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"unlockTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrapSide\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"wrapWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/networks/ETH_EthBridge.sol\":\"ETH_EthBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/checks/CheckAura.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./CheckReceiptsProof.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract CheckAura is Initializable, CheckReceiptsProof {\\n    bytes1 constant PARENT_HASH_PREFIX = 0xA0;\\n    bytes1 constant STEP_PREFIX = 0x84;\\n    bytes2 constant SIGNATURE_PREFIX = 0xB841;\\n\\n    address[] public validatorSet;\\n    address validatorSetAddress;\\n    bytes32 public lastProcessedBlock;\\n\\n\\n    struct BlockAura {\\n        bytes3 p0Seal;\\n        bytes3 p0Bare;\\n\\n        bytes32 parentHash;\\n        bytes p2;\\n        bytes32 receiptHash;\\n        bytes p3;\\n\\n        bytes4 step;\\n        bytes signature;  // todo maybe pass s r v values?\\n\\n        uint64 finalizedVs;\\n    }\\n\\n\\n    struct ValidatorSetChange {\\n        address deltaAddress;\\n        int64 deltaIndex; // < 0 ? remove : add\\n    }\\n\\n    struct ValidatorSetProof {\\n        bytes[] receiptProof;\\n        ValidatorSetChange[] changes;\\n    }\\n\\n    struct AuraProof {\\n        BlockAura[] blocks;\\n        CommonStructs.TransferProof transfer;\\n        ValidatorSetProof[] vsChanges;\\n        uint64 transferEventBlock;\\n    }\\n\\n\\n    function __CheckAura_init(\\n        address[] memory initialValidators_,\\n        address validatorSetAddress_,\\n        bytes32 lastProcessedBlock_\\n    ) internal initializer {\\n        require(initialValidators_.length > 0, \\\"Length of _initialValidators must be bigger than 0\\\");\\n\\n        validatorSet = initialValidators_;\\n        validatorSetAddress = validatorSetAddress_;\\n        lastProcessedBlock = lastProcessedBlock_;\\n\\n    }\\n\\n    function checkAura_(AuraProof calldata auraProof, uint minSafetyBlocks, address sideBridgeAddress) internal {\\n\\n        bytes32 parentHash;\\n        uint lastFinalizedVs;\\n\\n        bytes32 receiptHash = calcTransferReceiptsHash(auraProof.transfer, sideBridgeAddress);\\n        require(auraProof.blocks[auraProof.transferEventBlock].receiptHash == receiptHash, \\\"Transfer event validation failed\\\");\\n        require(auraProof.blocks.length - auraProof.transferEventBlock >= minSafetyBlocks, \\\"Not enough safety blocks\\\");\\n\\n\\n        for (uint i = 0; i < auraProof.blocks.length; i++) {\\n            BlockAura calldata block_ = auraProof.blocks[i];\\n\\n            if (block_.finalizedVs != 0) {// 0 means no events should be finalized, so indexes are shifted by 1\\n                for (uint j = lastFinalizedVs; j < block_.finalizedVs; j++) {\\n                    // vs changes in that block\\n                    ValidatorSetProof memory vsProof = auraProof.vsChanges[j];\\n\\n                    // how many block after event validatorSet should be finalized\\n                    uint txsBeforeFinalize = validatorSet.length / 2 + 1;\\n\\n                    // apply vs changes\\n                    for (uint k = 0; k < vsProof.changes.length; k++)\\n                        applyVsChange(vsProof.changes[k]);\\n\\n                    // check proof\\n                    receiptHash = calcValidatorSetReceiptHash(vsProof.receiptProof, validatorSetAddress, validatorSet);\\n\\n                    // event_block = finalized_block - txsBeforeFinalize\\n                    require(auraProof.blocks[i - txsBeforeFinalize].receiptHash == receiptHash, \\\"Wrong VS receipt hash\\\");\\n                }\\n\\n                lastFinalizedVs = block_.finalizedVs;\\n\\n            }\\n\\n            if (parentHash != bytes32(0))\\n                require(block_.parentHash == parentHash, \\\"Wrong parent hash\\\");\\n\\n            parentHash = checkBlock(block_);\\n\\n            // after proceed vs change event next block in auraProof.blocks can have any parentHash\\n            // (skipping some blocks) but only if it's not the safety blocks for transfer event\\n            if (block_.finalizedVs != 0 && i < auraProof.transferEventBlock)\\n                parentHash = bytes32(0);\\n\\n        }\\n\\n        lastProcessedBlock = parentHash;\\n    }\\n\\n    function getValidatorSet() public view returns (address[] memory) {\\n        return validatorSet;\\n    }\\n\\n    function applyVsChange(ValidatorSetChange memory vsEvent) internal {\\n        if (vsEvent.deltaIndex < 0) {\\n            uint index = uint(int(vsEvent.deltaIndex * (- 1) - 1));\\n            validatorSet[index] = validatorSet[validatorSet.length - 1];\\n            validatorSet.pop();\\n        }\\n        else {\\n            uint index = uint(int((vsEvent.deltaIndex)));\\n\\n            // logic if validatorSet contract will be updated\\n            // validatorSet.push(validatorSet[index]);\\n            // validatorSet[index] = vsEvent.deltaAddress;\\n\\n            // old (current) validatorSet contract logic\\n            validatorSet.push(vsEvent.deltaAddress);\\n        }\\n    }\\n\\n    function checkBlock(BlockAura calldata block_) internal view returns (bytes32) {\\n        (bytes32 bareHash, bytes32 sealHash) = calcBlockHash(block_);\\n\\n        address validator = validatorSet[bytesToUint(block_.step) % validatorSet.length];\\n        checkSignature(validator, bareHash, block_.signature);\\n\\n        return sealHash;\\n    }\\n\\n    function calcBlockHash(BlockAura calldata block_) internal pure returns (bytes32, bytes32) {\\n        bytes memory commonRlp = abi.encodePacked(PARENT_HASH_PREFIX, block_.parentHash, block_.p2, block_.receiptHash, block_.p3);\\n        return (\\n        // hash without seal (bare), for signature check\\n        keccak256(abi.encodePacked(block_.p0Bare, commonRlp)),\\n        // hash with seal, for prev_hash check\\n        keccak256(abi.encodePacked(block_.p0Seal, commonRlp, STEP_PREFIX, block_.step, SIGNATURE_PREFIX, block_.signature))\\n        );\\n    }\\n\\n\\n    function checkSignature(address signer, bytes32 messageHash, bytes memory signature) internal pure {\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := byte(0, mload(add(signature, 96)))\\n            if lt(v, 27) {v := add(v, 27)}\\n        }\\n        require(ecrecover(messageHash, v, r, s) == signer, \\\"Failed to verify sign\\\");\\n    }\\n\\n    function calcValidatorSetReceiptHash(bytes[] memory receipt_proof, address validatorSetAddress, address[] memory vSet) private pure returns (bytes32) {\\n        bytes32 el = keccak256(abi.encodePacked(\\n                receipt_proof[0],\\n                validatorSetAddress,\\n                receipt_proof[1],\\n                abi.encode(vSet),\\n                receipt_proof[2]\\n            ));\\n        return calcReceiptsHash(receipt_proof, el, 3);\\n    }\\n\\n    function bytesToUint(bytes4 b) internal pure returns (uint){\\n        return uint(uint32(b));\\n    }\\n}\\n\",\"keccak256\":\"0xb32212a4d52618386fadf7c183cdfeff83fcdbe35b4fc6c14087d1e7b5a584cd\",\"license\":\"MIT\"},\"contracts/checks/CheckReceiptsProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\n\\n\\ncontract CheckReceiptsProof {\\n    // check readme for focs\\n    function calcReceiptsHash(bytes[] memory proof, bytes32 el, uint proofStart) internal pure returns (bytes32) {\\n        bytes memory s;\\n\\n        for (uint i = proofStart; i < proof.length; i += 2) {\\n            s = abi.encodePacked(proof[i], el, proof[i + 1]);\\n            el = (s.length > 32) ? keccak256(s) : bytes32(s);\\n        }\\n\\n        return el;\\n    }\\n\\n\\n    function calcTransferReceiptsHash(CommonStructs.TransferProof memory p, address eventContractAddress) internal pure returns (bytes32) {\\n        bytes32 el = keccak256(abi.encodePacked(\\n                p.receiptProof[0],\\n                eventContractAddress,\\n                p.receiptProof[1],\\n                toBinary(p.eventId),\\n                p.receiptProof[2],\\n                abi.encode(p.transfers),\\n                p.receiptProof[3]\\n            ));\\n        return calcReceiptsHash(p.receiptProof, el, 4);\\n        // start from proof[4]\\n    }\\n\\n\\n    function toBinary(uint _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), _x)\\n        }\\n        uint i;\\n        for (i = 0; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x7e46637724acc19ef57e50ac3bfc07826fe26f51aafb128d4f3f88e860ed869e\",\"license\":\"MIT\"},\"contracts/common/CommonBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./CommonStructs.sol\\\";\\nimport \\\"../tokens/IWrapper.sol\\\";\\n\\n\\n\\ncontract CommonBridge is Initializable, AccessControlUpgradeable, PausableUpgradeable {\\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n\\n\\n    // queue to be pushed in another network\\n    CommonStructs.Transfer[] queue;\\n\\n    // locked transfers from another network\\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\\n    uint public oldestLockedEventId;  // head index of lockedTransfers 'queue' mapping\\n\\n\\n    // this network to side network token addresses mapping\\n    mapping(address => address) public tokenAddresses;\\n    address public wrapperAddress;\\n\\n    uint public fee;\\n    address payable feeRecipient;\\n\\n    address public sideBridgeAddress;\\n    uint public minSafetyBlocks;\\n    uint public timeframeSeconds;\\n    uint public lockTime;\\n\\n    uint public inputEventId; // last processed event from side network\\n    uint outputEventId;  // last created event in this network. start from 1 coz 0 consider already processed\\n\\n    uint lastTimeframe;\\n\\n    event Withdraw(address indexed from, uint eventId, address tokenFrom, address tokenTo, uint amount, uint feeAmount);\\n    event Transfer(uint indexed eventId, CommonStructs.Transfer[] queue);\\n    event TransferSubmit(uint indexed eventId);\\n    event TransferFinish(uint indexed eventId);\\n\\n    function __CommonBridge_init(CommonStructs.ConstructorArgs memory args) internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(RELAY_ROLE, args.relayAddress);\\n        _setupRole(ADMIN_ROLE, args.adminAddress);\\n\\n        // initialise tokenAddresses with start values\\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\\n        wrapperAddress = args.wrappingTokenAddress;\\n\\n        sideBridgeAddress = args.sideBridgeAddress;\\n        fee = args.fee;\\n        feeRecipient = args.feeRecipient;\\n        minSafetyBlocks = args.minSafetyBlocks;\\n        timeframeSeconds = args.timeframeSeconds;\\n        lockTime = args.lockTime;\\n\\n        oldestLockedEventId = 1;\\n        outputEventId = 1;\\n    }\\n\\n    function wrapWithdraw(address toAddress) public payable {\\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\\n        require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value > fee, \\\"Sent value <= fee\\\");\\n        feeRecipient.transfer(fee);\\n\\n        uint amount = msg.value - fee;\\n        IWrapper(wrapperAddress).deposit{value : amount}();\\n\\n        //\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, address(0), tokenSideAddress, amount, fee);\\n\\n        withdrawFinish();\\n    }\\n\\n    function withdraw(address tokenThisAddress, address toAddress, uint amount, bool unwrapSide) payable public {\\n        address tokenSideAddress;\\n        if (unwrapSide) {\\n            require(tokenAddresses[address(0)] == tokenThisAddress, \\\"Token not point to native token\\\");\\n            // tokenSideAddress will be 0x0000000000000000000000000000000000000000 - for native token\\n        } else {\\n            tokenSideAddress = tokenAddresses[tokenThisAddress];\\n            require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n        }\\n\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(msg.value == fee, \\\"Sent value != fee\\\");\\n        feeRecipient.transfer(msg.value);\\n\\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \\\"Fail transfer coins\\\");\\n\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, tokenThisAddress, tokenSideAddress, amount, fee);\\n\\n        withdrawFinish();\\n    }\\n\\n    function triggerTransfers() public payable {\\n        if (!hasRole(RELAY_ROLE, msg.sender)) {\\n            require(msg.value == fee, \\\"Sent value is not equal fee\\\");\\n            feeRecipient.transfer(fee);\\n        }\\n\\n        emit Transfer(outputEventId++, queue);\\n        delete queue;\\n    }\\n\\n    function withdrawFinish() internal {\\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\\n        if (nowTimeframe != lastTimeframe) {\\n            emit Transfer(outputEventId++, queue);\\n            delete queue;\\n\\n            lastTimeframe = nowTimeframe;\\n        }\\n    }\\n\\n\\n    // locked transfers from another network\\n    function getLockedTransfers(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\\n        return lockedTransfers[eventId];\\n    }\\n\\n\\n    function proceedTransfers(CommonStructs.Transfer[] memory transfers) internal {\\n        for (uint i = 0; i < transfers.length; i++) {\\n\\n            if (transfers[i].tokenAddress == address(0)) {// native token\\n                IWrapper(wrapperAddress).withdraw(transfers[i].amount);\\n                payable(transfers[i].toAddress).transfer(transfers[i].amount);\\n            } else {// ERC20 token\\n                require(\\n                    IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount),\\n                    \\\"Fail transfer coins\\\");\\n            }\\n\\n        }\\n    }\\n\\n\\n    // submitted transfers save here for `lockTime` period\\n    function lockTransfers(CommonStructs.Transfer[] memory events, uint eventId) internal {\\n        lockedTransfers[eventId].endTimestamp = block.timestamp + lockTime;\\n        for (uint i = 0; i < events.length; i++)\\n            lockedTransfers[eventId].transfers.push(events[i]);\\n    }\\n\\n    // after `lockTime` period, transfers can  be unlocked\\n    function unlockTransfers(uint eventId) public whenNotPaused {\\n        require(eventId == oldestLockedEventId, \\\"can unlock only oldest event\\\");\\n\\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n        require(transfersLocked.endTimestamp > 0, \\\"no locked transfers with this id\\\");\\n        require(transfersLocked.endTimestamp < block.timestamp, \\\"lockTime has not yet passed\\\");\\n\\n        proceedTransfers(transfersLocked.transfers);\\n\\n        delete lockedTransfers[eventId];\\n        emit TransferFinish(eventId);\\n\\n        oldestLockedEventId = eventId + 1;\\n    }\\n\\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\\n    function unlockTransfersBatch() public whenNotPaused {\\n        uint eventId = oldestLockedEventId;\\n        for (;; eventId++) {\\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\\n\\n            proceedTransfers(transfersLocked.transfers);\\n\\n            delete lockedTransfers[eventId];\\n            emit TransferFinish(eventId);\\n        }\\n        oldestLockedEventId = eventId;\\n    }\\n\\n    // delete transfers with passed eventId and all after it\\n    function removeLockedTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(eventId >= oldestLockedEventId, \\\"eventId must be >= oldestLockedEventId\\\");\\n        for (; lockedTransfers[eventId].endTimestamp != 0; eventId++)\\n            delete lockedTransfers[eventId];\\n        inputEventId = eventId-1; // pretend like we don't receive that event\\n    }\\n\\n\\n    // admin setters\\n\\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\\n        minSafetyBlocks = minSafetyBlocks_;\\n    }\\n\\n    function changeFee(uint fee_) public onlyRole(ADMIN_ROLE) {\\n        fee = fee_;\\n    }\\n\\n    function changeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        feeRecipient = feeRecipient_;\\n    }\\n\\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\\n        timeframeSeconds = timeframeSeconds_;\\n    }\\n\\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\\n        lockTime = lockTime_;\\n    }\\n\\n\\n    // token addressed mapping\\n\\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\\n    }\\n\\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\\n        delete tokenAddresses[tokenThisAddress];\\n    }\\n\\n    function tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\\n    }\\n\\n    function _tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) private {\\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \\\"sizes of tokenThisAddresses and tokenSideAddresses must be same\\\");\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\\n    }\\n\\n    function tokensRemoveBatch(address[] memory tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            delete tokenAddresses[tokenThisAddresses[i]];\\n    }\\n\\n    // pause\\n\\n    function pause() public onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // internal\\n\\n    function checkEventId(uint eventId) internal {\\n        require(eventId == ++inputEventId, \\\"EventId out of order\\\");\\n    }\\n\\n    receive() external payable {}  // need to receive native token from wrapper contract\\n\\n}\\n\",\"keccak256\":\"0x6b7effaec4920c40b3b22025a9e703854f74ac01672c26708fa91e77403b8483\",\"license\":\"MIT\"},\"contracts/common/CommonStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary CommonStructs {\\n    struct Transfer {\\n        address tokenAddress;\\n        address toAddress;\\n        uint amount;\\n    }\\n\\n    struct TransferProof {\\n        bytes[] receiptProof;\\n        uint eventId;\\n        Transfer[] transfers;\\n    }\\n\\n    struct LockedTransfers {\\n        Transfer[] transfers;\\n        uint endTimestamp;\\n    }\\n\\n    struct ConstructorArgs {\\n        address sideBridgeAddress; address adminAddress;\\n        address relayAddress; address wrappingTokenAddress;\\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\\n        uint fee; address payable feeRecipient;\\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0x21ed033271ffa50d60805037e81197610a3764b9647f8b67b85f7454b8ac0bd8\",\"license\":\"MIT\"},\"contracts/networks/ETH_EthBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonBridge.sol\\\";\\nimport \\\"../checks/CheckAura.sol\\\";\\n\\n\\ncontract ETH_EthBridge is CommonBridge, CheckAura {\\n\\n    function initialize(\\n        CommonStructs.ConstructorArgs memory args,\\n        address[] memory initialValidators,\\n        address validatorSetAddress,\\n        bytes32 lastProcessedBlock\\n    ) public initializer {\\n        __CommonBridge_init(args);\\n        __CheckAura_init(initialValidators, validatorSetAddress, lastProcessedBlock);\\n    }\\n\\n    function submitTransferAura(AuraProof calldata auraProof) public onlyRole(RELAY_ROLE) whenNotPaused {\\n        emit TransferSubmit(auraProof.transfer.eventId);\\n        checkEventId(auraProof.transfer.eventId);\\n        checkAura_(auraProof, minSafetyBlocks, sideBridgeAddress);\\n        lockTransfers(auraProof.transfer.transfers, auraProof.transfer.eventId);\\n    }\\n}\\n\",\"keccak256\":\"0xb683bf3549d420105fe5edb9cb0f10509cdbe7bf00dff16ec62ad3d71242b48b\",\"license\":\"MIT\"},\"contracts/tokens/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWrapper {\\n    event Deposit(address indexed dst, uint amount);\\n    event Withdrawal(address indexed src, uint amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n}\\n\",\"keccak256\":\"0xbe5bc17241b9a14b78e18e4562e2a4c02e2b941fae0f1a896bbd795e49af136e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506145d0806100206000396000f3fe6080604052600436106102645760003560e060020a90048063853890ae11610148578063ba8bbbe0116100ba578063e31be0871161007e578063e31be087146106ea578063e4e6bba614610717578063e64808f31461072a578063f33fe10f1461074a578063f862b7eb1461076a578063fd5d2ef31461078a57600080fd5b8063ba8bbbe014610666578063baeebe751461067c578063cf33125014610692578063d547741f146106b4578063ddca3f43146106d457600080fd5b8063934785b71161010c578063934785b7146105b257806396cf5227146105c557806399b5bb64146105e5578063a217fddf146105fb578063b6aa366b14610610578063b6d3385e1461063057600080fd5b8063853890ae146105275780638ac1f86f146105475780638e5df9c71461055c57806391d148541461057c578063924cf6e01461059c57600080fd5b806336568abe116101e15780635c975abb116101a55780635c975abb146104785780636a1db1bf14610490578063746b5c42146104b057806375b238fc146104b85780637df8b802146104da5780638456cb591461051257600080fd5b806336568abe146103d35780633f4ba83a146103f357806342180fb8146104085780634a1856de146104285780635249a7051461045857600080fd5b80632360407111610228578063236040711461032d578063248a9ca31461034d5780632f2ff15d1461037d578063331a891a1461039d57806333de61d2146103bd57600080fd5b806301ffc9a71461027057806304421823146102a557806309fce356146102d55780630d668087146102f7578063119b980d1461030d57600080fd5b3661026b57005b600080fd5b34801561027c57600080fd5b5061029061028b3660046137a2565b6107aa565b60405190151581526020015b60405180910390f35b3480156102b157600080fd5b506102c760008051602061455b83398151915281565b60405190815260200161029c565b3480156102e157600080fd5b506102f56102f03660046136a3565b610813565b005b34801561030357600080fd5b506102c760d35481565b34801561031957600080fd5b506102f56103283660046137cc565b61083b565b34801561033957600080fd5b506102f56103483660046135c5565b61097f565b34801561035957600080fd5b506102c7610368366004613764565b60009081526065602052604090206001015490565b34801561038957600080fd5b506102f561039836600461377d565b6109bb565b3480156103a957600080fd5b506102f56103b8366004613764565b6109e1565b3480156103c957600080fd5b506102c760d95481565b3480156103df57600080fd5b506102f56103ee36600461377d565b610b28565b3480156103ff57600080fd5b506102f5610bb3565b34801561041457600080fd5b506102f5610423366004613764565b610bd7565b34801561043457600080fd5b506102c7610443366004613764565b60ca6020526000908152604090206001015481565b34801561046457600080fd5b506102f561047336600461366e565b610bf6565b34801561048457600080fd5b5060975460ff16610290565b34801561049c57600080fd5b506102f56104ab366004613764565b610c7b565b6102f5610c9a565b3480156104c457600080fd5b506102c760008051602061457b83398151915281565b3480156104e657600080fd5b5060cd546104fa90600160a060020a031681565b604051600160a060020a03909116815260200161029c565b34801561051e57600080fd5b506102f5610da2565b34801561053357600080fd5b506102f56105423660046135e2565b610dc3565b34801561055357600080fd5b506102f5610e0b565b34801561056857600080fd5b506102f56105773660046135c5565b610f63565b34801561058857600080fd5b5061029061059736600461377d565b610fa4565b3480156105a857600080fd5b506102c760d15481565b6102f56105c036600461361b565b610fcf565b3480156105d157600080fd5b506102f56105e0366004613764565b6113d7565b3480156105f157600080fd5b506102c760d45481565b34801561060757600080fd5b506102c7600081565b34801561061c57600080fd5b506102f561062b366004613807565b6113f6565b34801561063c57600080fd5b506104fa61064b3660046135c5565b60cc60205260009081526040902054600160a060020a031681565b34801561067257600080fd5b506102c760cb5481565b34801561068857600080fd5b506102c760d25481565b34801561069e57600080fd5b506106a761147c565b60405161029c9190613d3b565b3480156106c057600080fd5b506102f56106cf36600461377d565b6114de565b3480156106e057600080fd5b506102c760ce5481565b3480156106f657600080fd5b5061070a610705366004613764565b611504565b60405161029c9190613ed2565b6102f56107253660046135c5565b6115c0565b34801561073657600080fd5b506104fa610745366004613764565b61186d565b34801561075657600080fd5b5060d0546104fa90600160a060020a031681565b34801561077657600080fd5b506102f5610785366004613764565b611897565b34801561079657600080fd5b506102f56107a5366004613764565b611aca565b6000600160e060020a031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061080d57507f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a03198316145b92915050565b60008051602061457b83398151915261082c8133611ae9565b6108368383611b50565b505050565b60008051602061455b8339815191526108548133611ae9565b60975460ff16156108835760405160e560020a62461bcd02815260040161087a90613e3e565b60405180910390fd5b6108906020830183614005565b602001357f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b60405160405180910390a26108d96108d06020840184614005565b60200135611c66565b60d15460d0546108f3918491600160a060020a0316611ccb565b61097b6109036020840184614005565b610911906040810190613f54565b808060200260200160405190810160405280939291908181526020016000905b8282101561095d5761094e60608302860136819003810190613959565b81526020019060010190610931565b50505050508380602001906109729190614005565b6020013561213f565b5050565b60008051602061457b8339815191526109988133611ae9565b5060cf8054600160a060020a031916600160a060020a0392909216919091179055565b6000828152606560205260409020600101546109d78133611ae9565b6108368383612202565b60008051602061457b8339815191526109fa8133611ae9565b60975460ff16610a4f5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161087a565b60cb54821015610aca5760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e7449640000000000000000000000000000000000000000000000000000606482015260840161087a565b600082815260ca602052604090206001015415610b1657600082815260ca6020526040812090610afa828261333c565b5060006001919091015581610b0e8161448b565b925050610aca565b610b2160018361422a565b60d4555050565b600160a060020a0381163314610ba95760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161087a565b61097b8282612288565b60008051602061457b833981519152610bcc8133611ae9565b610bd46122ef565b50565b60008051602061457b833981519152610bf08133611ae9565b5060d255565b60008051602061457b833981519152610c0f8133611ae9565b815160005b81811015610c755760cc6000858381518110610c3257610c32614505565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610c6d8161448b565b915050610c14565b50505050565b60008051602061457b833981519152610c948133611ae9565b5060ce55565b610cb260008051602061455b83398151915233610fa4565b610d485760ce543414610d0a5760405160e560020a62461bcd02815260206004820152601b60248201527f53656e742076616c7565206973206e6f7420657175616c206665650000000000604482015260640161087a565b60cf5460ce54604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015610d46573d6000803e3d6000fd5b505b60d58054906000610d588361448b565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c9604051610d8c9190613d9b565b60405180910390a2610da060c9600061333c565b565b60008051602061457b833981519152610dbb8133611ae9565b610bd461238e565b60008051602061457b833981519152610ddc8133611ae9565b50600160a060020a03918216600090815260cc602052604090208054600160a060020a03191691909216179055565b60975460ff1615610e315760405160e560020a62461bcd02815260040161087a90613e3e565b60cb545b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610ec357600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610e69565b5050505081526020016001820154815250509050806020015160001480610eed5750428160200151115b15610ef8575060cb55565b8051610f03906123e9565b600082815260ca6020526040812090610f1c828261333c565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610f5b8161448b565b915050610e35565b60008051602061457b833981519152610f7c8133611ae9565b50600160a060020a0316600090815260cc602052604090208054600160a060020a0319169055565b6000918252606560209081526040808420600160a060020a0393909316845291905290205460ff1690565b60008115611064576000805260cc6020527f435daec636ce435a90bde0aeec309a303a359a854c5a51b7d6a5a941d6db609454600160a060020a0386811691161461105f5760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e00604482015260640161087a565b6110d0565b50600160a060020a03808516600090815260cc602052604090205416806110d05760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e20616464726573730000000000000000000000604482015260640161087a565b600083116111235760405160e560020a62461bcd02815260206004820152601160248201527f43616e6e6f742077697468647261772030000000000000000000000000000000604482015260640161087a565b60ce5434146111775760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d20666565000000000000000000000000000000604482015260640161087a565b60cf54604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156111b0573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101849052600160a060020a038616906323b872dd90606401602060405180830381600087803b15801561121857600080fd5b505af115801561122c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112509190613707565b61129f5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e7300000000000000000000000000604482015260640161087a565b6040805160608082018352600160a060020a0384811680845288821660208086019182528587018a815260c98054600181018255600091909152965160039097027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054988716600160a060020a0319998a1617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2984018054918716919098161790965594517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55460ce548651918252928b1694810194909452938301939093528101859052608081019190915233907f396a477f1cc45749b4f1db2dfdf2ca466f53c3b26ab0b5452c2aaaf7f5ac9c439060a00160405180910390a26113d061267d565b5050505050565b60008051602061457b8339815191526113f08133611ae9565b5060d355565b600054610100900460ff168061140f575060005460ff16155b61142e5760405160e560020a62461bcd02815260040161087a90613e75565b600054610100900460ff16158015611450576000805461ffff19166101011790555b611459856126f5565b61146484848461282e565b80156113d0576000805461ff00191690555050505050565b606060d78054806020026020016040519081016040528092919081815260200182805480156114d457602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116114b6575b5050505050905090565b6000828152606560205260409020600101546114fa8133611ae9565b6108368383612288565b604080518082019091526060815260006020820152600082815260ca60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b828210156115a757600084815260209081902060408051606081018252600386029092018054600160a060020a0390811684526001808301549091168486015260029091015491830191909152908352909201910161154d565b5050505081526020016001820154815250509050919050565b60cd54600160a060020a03908116600090815260cc6020526040902054168061162e5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e20616464726573730000000000000000000000604482015260640161087a565b60ce5434116116825760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c7565203c3d20666565000000000000000000000000000000604482015260640161087a565b60cf5460ce54604051600160a060020a039092169181156108fc0291906000818181858888f193505050501580156116be573d6000803e3d6000fd5b50600060ce54346116cf919061422a565b905060cd60009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b15801561172457600080fd5b505af1158015611738573d6000803e3d6000fd5b50506040805160608082018352600160a060020a038881168084528a821660208086019182528587018b815260c980546001810182556000918252975160039098027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054998816600160a060020a03199a8b1617905593517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d29850180549190971698169790971790945592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55460ce5486519182529281019490945293830193909352810186905260808101919091523393507f396a477f1cc45749b4f1db2dfdf2ca466f53c3b26ab0b5452c2aaaf7f5ac9c43925060a001905060405180910390a261083661267d565b60d7818154811061187d57600080fd5b600091825260209091200154600160a060020a0316905081565b60975460ff16156118bd5760405160e560020a62461bcd02815260040161087a90613e3e565b60cb5481146119115760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e7400000000604482015260640161087a565b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561199f57600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101611945565b50505050815260200160018201548152505090506000816020015111611a0a5760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e736665727320776974682074686973206964604482015260640161087a565b42816020015110611a605760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f7420796574207061737365640000000000604482015260640161087a565b8051611a6b906123e9565b600082815260ca6020526040812090611a84828261333c565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2611ac38260016140f6565b60cb555050565b60008051602061457b833981519152611ae38133611ae9565b5060d155565b611af38282610fa4565b61097b57611b0b81600160a060020a0316601461294d565b611b1683602061294d565b604051602001611b27929190613cba565b60408051601f198184030181529082905260e560020a62461bcd02825261087a91600401613e0b565b8051825114611bca5760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d6500606482015260840161087a565b815160005b81811015610c7557828181518110611be957611be9614505565b602002602001015160cc6000868481518110611c0757611c07614505565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611c5e9061448b565b915050611bcf565b60d460008154611c759061448b565b91829055508114610bd45760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f72646572000000000000000000000000604482015260640161087a565b60008080611cee611cdf6020880188614005565b611ce89061426a565b85612b3a565b905080611cfb8780613f04565b611d0b60808a0160608b01613975565b67ffffffffffffffff16818110611d2457611d24614505565b9050602002810190611d369190613fe4565b6080013514611d8a5760405160e560020a62461bcd02815260206004820181905260248201527f5472616e73666572206576656e742076616c69646174696f6e206661696c6564604482015260640161087a565b84611d9b6080880160608901613975565b67ffffffffffffffff16611daf8880613f04565b611dba92915061422a565b1015611e0b5760405160e560020a62461bcd02815260206004820152601860248201527f4e6f7420656e6f7567682073616665747920626c6f636b730000000000000000604482015260640161087a565b60005b611e188780613f04565b90508110156121345736611e2c8880613f04565b83818110611e3c57611e3c614505565b9050602002810190611e4e9190613fe4565b9050611e6261012082016101008301613975565b67ffffffffffffffff161561206e57835b611e8561012083016101008401613975565b67ffffffffffffffff1681101561204e576000611ea560408b018b613f04565b83818110611eb557611eb5614505565b9050602002810190611ec7919061401b565b611ed090614344565b60d754909150600090611ee59060029061410e565b611ef09060016140f6565b905060005b826020015151811015611f3a57611f2883602001518281518110611f1b57611f1b614505565b6020026020010151612c2f565b80611f328161448b565b915050611ef5565b50815160d85460d7805460408051602080840282018101909252828152611fad9594600160a060020a03169390929091830182828015611fa357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611f85575b5050505050612d6b565b955085611fba8c80613f04565b611fc4848961422a565b818110611fd357611fd3614505565b9050602002810190611fe59190613fe4565b60800135146120395760405160e560020a62461bcd02815260206004820152601560248201527f57726f6e67205653207265636569707420686173680000000000000000000000604482015260640161087a565b505080806120469061448b565b915050611e73565b5061206161012082016101008301613975565b67ffffffffffffffff1693505b84156120ca57848160400135146120ca5760405160e560020a62461bcd02815260206004820152601160248201527f57726f6e6720706172656e742068617368000000000000000000000000000000604482015260640161087a565b6120d381612e21565b94506120e761012082016101008301613975565b67ffffffffffffffff1615801590612117575061210a6080890160608a01613975565b67ffffffffffffffff1682105b1561212157600094505b508061212c8161448b565b915050611e0e565b50505060d955505050565b60d35461214c90426140f6565b600082815260ca60205260408120600101919091555b825181101561083657600082815260ca60205260409020835184908390811061218d5761218d614505565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a03938416178255938301519481018054909416949091169390931790915560400151600290910155806121fa8161448b565b915050612162565b61220c8282610fa4565b61097b576000828152606560209081526040808320600160a060020a03851684529091529020805460ff191660011790556122443390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6122928282610fa4565b1561097b576000828152606560209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff166123445760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161087a565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60975460ff16156123b45760405160e560020a62461bcd02815260040161087a90613e3e565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123713390565b60005b815181101561097b576000600160a060020a031682828151811061241257612412614505565b602002602001015160000151600160a060020a0316141561252e5760cd548251600160a060020a0390911690632e1a7d4d9084908490811061245657612456614505565b6020026020010151604001516040518263ffffffff1660e060020a02815260040161248391815260200190565b600060405180830381600087803b15801561249d57600080fd5b505af11580156124b1573d6000803e3d6000fd5b505050508181815181106124c7576124c7614505565b602002602001015160200151600160a060020a03166108fc8383815181106124f1576124f1614505565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015612528573d6000803e3d6000fd5b5061266b565b81818151811061254057612540614505565b602002602001015160000151600160a060020a031663a9059cbb83838151811061256c5761256c614505565b60200260200101516020015184848151811061258a5761258a614505565b6020026020010151604001516040518363ffffffff1660e060020a0281526004016125ca929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b1580156125e457600080fd5b505af11580156125f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261c9190613707565b61266b5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e7300000000000000000000000000604482015260640161087a565b806126758161448b565b9150506123ec565b600060d2544261268d919061410e565b905060d6548114610bd45760d580549060006126a88361448b565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c96040516126dc9190613d9b565b60405180910390a26126f060c9600061333c565b60d655565b600054610100900460ff168061270e575060005460ff16155b61272d5760405160e560020a62461bcd02815260040161087a90613e75565b600054610100900460ff1615801561274f576000805461ffff19166101011790555b61275a600033612ee4565b61277660008051602061455b8339815191528360400151612ee4565b61279260008051602061457b8339815191528360200151612ee4565b6127a482608001518360a00151611b50565b606082015160cd8054600160a060020a03928316600160a060020a031991821617909155835160d0805491841691831691909117905560c084015160ce5560e084015160cf805491909316911617905561014082015160d15561010082015160d25561012082015160d355600160cb81905560d555801561097b576000805461ff00191690555050565b600054610100900460ff1680612847575060005460ff16155b6128665760405160e560020a62461bcd02815260040161087a90613e75565b600054610100900460ff16158015612888576000805461ffff19166101011790555b60008451116129025760405160e560020a62461bcd02815260206004820152603260248201527f4c656e677468206f66205f696e697469616c56616c696461746f7273206d757360448201527f7420626520626967676572207468616e20300000000000000000000000000000606482015260840161087a565b83516129159060d790602087019061335d565b5060d88054600160a060020a031916600160a060020a03851617905560d98290558015610c75576000805461ff001916905550505050565b6060600061295c8360026141b9565b6129679060026140f6565b67ffffffffffffffff81111561297f5761297f61451e565b6040519080825280601f01601f1916602001820160405280156129a9576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129e0576129e0614505565b6020010190600160f860020a031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a2b57612a2b614505565b6020010190600160f860020a031916908160001a9053506000612a4f8460026141b9565b612a5a9060016140f6565b90505b6001811115612ae1577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612a9b57612a9b614505565b1a60f860020a02828281518110612ab457612ab4614505565b6020010190600160f860020a031916908160001a905350601090940493612ada81614474565b9050612a5d565b508315612b335760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161087a565b9392505050565b6000808360000151600081518110612b5457612b54614505565b6020026020010151838560000151600181518110612b7457612b74614505565b6020026020010151612b898760200151612eee565b875180516002908110612b9e57612b9e614505565b60200260200101518860400151604051602001612bbb9190613d88565b6040516020818303038152906040528960000151600381518110612be157612be1614505565b6020026020010151604051602001612bff9796959493929190613bd8565b604051602081830303815290604052805190602001209050612c278460000151826004613056565b949350505050565b6000816020015160070b1215612d1957600060018260200151600019612c559190614122565b612c5f91906141d8565b60070b905060d7600160d780549050612c78919061422a565b81548110612c8857612c88614505565b60009182526020909120015460d78054600160a060020a039092169183908110612cb457612cb4614505565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555060d7805480612cf357612cf36144ec565b60008281526020902081016000199081018054600160a060020a03191690550190555050565b5160d780546001810182556000919091527f8a012a6de2943a5aa4d77acf5e695d4456760a3f1f30a5d6dc2079599187a071018054600160a060020a031916600160a060020a03909216919091179055565b60008084600081518110612d8157612d81614505565b60200260200101518486600181518110612d9d57612d9d614505565b602002602001015185604051602001612db69190613d3b565b60405160208183030381529060405288600281518110612dd857612dd8614505565b6020026020010151604051602001612df4959493929190613b59565b604051602081830303815290604052805190602001209050612e1885826003613056565b95945050505050565b6000806000612e2f84613106565b60d78054929450909250600091612e5f612e4f60e0890160c08a016137a2565b60e060020a900463ffffffff1690565b612e6991906144a6565b81548110612e7957612e79614505565b600091825260209091200154600160a060020a03169050612edc8184612ea260e0890189613f9d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061325492505050565b509392505050565b61097b8282612202565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b6020811015612f8557818181518110612f3757612f37614505565b60209101015160f860020a90819004027fff000000000000000000000000000000000000000000000000000000000000001615612f7357612f85565b80612f7d8161448b565b915050612f1c565b6000612f9282602061422a565b67ffffffffffffffff811115612faa57612faa61451e565b6040519080825280601f01601f191660200182016040528015612fd4576020820181803683370190505b50905060005b815181101561304d578383612fee8161448b565b94508151811061300057613000614505565b602001015160f860020a900460f860020a0282828151811061302457613024614505565b6020010190600160f860020a031916908160001a905350806130458161448b565b915050612fda565b50949350505050565b60006060825b85518110156130fc5785818151811061307757613077614505565b6020026020010151858783600161308e91906140f6565b8151811061309e5761309e614505565b60200260200101516040516020016130b893929190613c83565b604051602081830303815290604052915060208251116130e0576130db82614241565b6130e8565b815160208301205b94506130f56002826140f6565b905061305c565b5092949350505050565b600080807fa000000000000000000000000000000000000000000000000000000000000000604085013561313d6060870187613f9d565b608088013561314f60a08a018a613f9d565b60405160200161316597969594939291906139fc565b60408051601f1981840301815291815290915061318790850160208601613724565b81604051602001613199929190613a59565b60408051601f198184030181529190528051602091820120906131be90860186613724565b827f84000000000000000000000000000000000000000000000000000000000000006131f060e0890160c08a016137a2565b7fb84100000000000000000000000000000000000000000000000000000000000061321e60e08b018b613f9d565b6040516020016132349796959493929190613a9f565b604051602081830303815290604052805190602001209250925050915091565b60208101516040820151606083015160001a601b81101561327357601b015b60408051600081526020810180835287905260ff8316918101919091526060810184905260808101839052600160a060020a0387169060019060a0016020604051602081039080840390855afa1580156132d1573d6000803e3d6000fd5b50505060206040510351600160a060020a0316146133345760405160e560020a62461bcd02815260206004820152601560248201527f4661696c656420746f20766572696679207369676e0000000000000000000000604482015260640161087a565b505050505050565b5080546000825560030290600052602060002090810190610bd491906133c2565b8280548282559060005260206000209081019282156133b2579160200282015b828111156133b25782518254600160a060020a031916600160a060020a0390911617825560209092019160019091019061337d565b506133be9291506133f5565b5090565b5b808211156133be578054600160a060020a031990811682556001820180549091169055600060028201556003016133c3565b5b808211156133be57600081556001016133f6565b803561341581614537565b919050565b600082601f83011261342b57600080fd5b8135602061344061343b836140d2565b6140a1565b828152818101908583018385028701840188101561345d57600080fd5b60005b8581101561348557813561347381614537565b84529284019290840190600101613460565b5090979650505050505050565b6000601f83818401126134a457600080fd5b823560206134b461343b836140d2565b82815281810190868301838502880184018910156134d157600080fd5b60005b8581101561356957813567ffffffffffffffff808211156134f457600080fd5b818b0191508b603f83011261350857600080fd5b8682013560408282111561351e5761351e61451e565b61352f828c01601f19168a016140a1565b92508183528d8183860101111561354557600080fd5b818185018a85013750600090820188015285525092840192908401906001016134d4565b509098975050505050505050565b60006060828403121561358957600080fd5b613591614031565b9050813561359e81614537565b815260208201356135ae81614537565b806020830152506040820135604082015292915050565b6000602082840312156135d757600080fd5b8135612b3381614537565b600080604083850312156135f557600080fd5b823561360081614537565b9150602083013561361081614537565b809150509250929050565b6000806000806080858703121561363157600080fd5b843561363c81614537565b9350602085013561364c81614537565b92506040850135915060608501356136638161454c565b939692955090935050565b60006020828403121561368057600080fd5b813567ffffffffffffffff81111561369757600080fd5b612c278482850161341a565b600080604083850312156136b657600080fd5b823567ffffffffffffffff808211156136ce57600080fd5b6136da8683870161341a565b935060208501359150808211156136f057600080fd5b506136fd8582860161341a565b9150509250929050565b60006020828403121561371957600080fd5b8151612b338161454c565b60006020828403121561373657600080fd5b81357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612b3357600080fd5b60006020828403121561377657600080fd5b5035919050565b6000806040838503121561379057600080fd5b82359150602083013561361081614537565b6000602082840312156137b457600080fd5b8135600160e060020a031981168114612b3357600080fd5b6000602082840312156137de57600080fd5b813567ffffffffffffffff8111156137f557600080fd5b820160808185031215612b3357600080fd5b6000806000806080858703121561381d57600080fd5b843567ffffffffffffffff8082111561383557600080fd5b90860190610160828903121561384a57600080fd5b61385261405a565b61385b8361340a565b81526138696020840161340a565b602082015261387a6040840161340a565b604082015261388b6060840161340a565b60608201526080830135828111156138a257600080fd5b6138ae8a82860161341a565b60808301525060a0830135828111156138c657600080fd5b6138d28a82860161341a565b60a08301525060c083013560c08201526138ee60e0840161340a565b60e08201526101008381013590820152610120808401359082015261014092830135928101929092529094506020860135908082111561392d57600080fd5b5061393a8782880161341a565b9350506139496040860161340a565b9396929550929360600135925050565b60006060828403121561396b57600080fd5b612b338383613577565b60006020828403121561398757600080fd5b813567ffffffffffffffff81168114612b3357600080fd5b600081518084526020808501945080840160005b838110156139f15781518051600160a060020a03908116895284820151168489015260409081015190880152606090960195908201906001016139b3565b509495945050505050565b7fff0000000000000000000000000000000000000000000000000000000000000088168152866001820152848660218301378481016021810185905260009083856041830137600093016041019283525090979650505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316815260008251613a91816003850160208701614448565b919091016003019392505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198816815260008751613ad7816003850160208c01614448565b7fff000000000000000000000000000000000000000000000000000000000000008816600391840191820152600160e060020a0319871660048201527fffff000000000000000000000000000000000000000000000000000000000000861660088201528385600a83013760009301600a019283525090979650505050505050565b60008651613b6b818460208b01614448565b600160a060020a0387166c01000000000000000000000000029083019081528551613b9d816014840160208a01614448565b8551910190613bb3816014840160208901614448565b8451910190613bc9816014840160208801614448565b01601401979650505050505050565b600088516020613beb8285838e01614448565b81840191506c01000000000000000000000000600160a060020a038b1602825260148951613c1e81838601858e01614448565b8951930192613c3281838601858d01614448565b8851930192613c4681838601858c01614448565b8751930192613c5a81838601858b01614448565b8651930192613c6e81838601858a01614448565b929092019091019a9950505050505050505050565b60008451613c95818460208901614448565b82018481528351613cad816020808501908801614448565b0160200195945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613cf2816017850160208801614448565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613d2f816028840160208801614448565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b81811015613d7c578351600160a060020a031683529284019291840191600101613d57565b50909695505050505050565b602081526000612b33602083018461399f565b60006020808301818452808554808352604092508286019150866000528360002060005b82811015613dfe578154600160a060020a0390811685526001808401549091168786015260028301548686015260609094019360039092019101613dbf565b5091979650505050505050565b6020815260008251806020840152613e2a816040850160208701614448565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b602081526000825160406020840152613eee606084018261399f565b9050602084015160408401528091505092915050565b6000808335601e19843603018112613f1b57600080fd5b83018035915067ffffffffffffffff821115613f3657600080fd5b6020908101925081023603821315613f4d57600080fd5b9250929050565b6000808335601e19843603018112613f6b57600080fd5b83018035915067ffffffffffffffff821115613f8657600080fd5b6020019150606081023603821315613f4d57600080fd5b6000808335601e19843603018112613fb457600080fd5b83018035915067ffffffffffffffff821115613fcf57600080fd5b602001915036819003821315613f4d57600080fd5b6000823561011e19833603018112613ffb57600080fd5b9190910192915050565b60008235605e19833603018112613ffb57600080fd5b60008235603e19833603018112613ffb57600080fd5b6040516060810167ffffffffffffffff811182821017156140545761405461451e565b60405290565b604051610160810167ffffffffffffffff811182821017156140545761405461451e565b6040805190810167ffffffffffffffff811182821017156140545761405461451e565b604051601f8201601f1916810167ffffffffffffffff811182821017156140ca576140ca61451e565b604052919050565b600067ffffffffffffffff8211156140ec576140ec61451e565b5060209081020190565b60008219821115614109576141096144ba565b500190565b60008261411d5761411d6144d3565b500490565b60008160070b8360070b677fffffffffffffff600082136000841383830485118282161615614153576141536144ba565b677fffffffffffffff196000851282811687830587121615614177576141776144ba565b60008712925085820587128484161615614193576141936144ba565b858505871281841616156141a9576141a96144ba565b5050509290910295945050505050565b60008160001904831182151516156141d3576141d36144ba565b500290565b60008160070b8360070b6000811281677fffffffffffffff1901831281151615614204576142046144ba565b81677fffffffffffffff018313811615614220576142206144ba565b5090039392505050565b60008282101561423c5761423c6144ba565b500390565b80516020808301519190811015614264578060200360080260020a600003821691505b50919050565b6000606080833603121561427d57600080fd5b614285614031565b833567ffffffffffffffff8082111561429d57600080fd5b6142a936838801613492565b83526020915081860135828401526040860135818111156142c957600080fd5b8601905036601f8201126142dc57600080fd5b80356142ea61343b826140d2565b818152838101908385013688850286018701111561430757600080fd5b600094505b838510156143325761431e3682613577565b83526001949094019391850191870161430c565b50604086015250929695505050505050565b6000604080833603121561435757600080fd5b61435f61407e565b833567ffffffffffffffff8082111561437757600080fd5b61438336838801613492565b835260209150818601358181111561439a57600080fd5b8601905036601f8201126143ad57600080fd5b80356143bb61343b826140d2565b81815283810190838501368885028601870111156143d857600080fd5b600094505b83851015614435578781360312156143f457600080fd5b6143fc61407e565b813561440781614537565b815281870135600781900b811461441d57600080fd5b818801528352600194909401939185019187016143dd565b5093850193909352509195945050505050565b60005b8381101561446357818101518382015260200161444b565b83811115610c755750506000910152565b600081614483576144836144ba565b506000190190565b600060001982141561449f5761449f6144ba565b5060010190565b6000826144b5576144b56144d3565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603160045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610bd457600080fd5b8015158114610bd457600080fdfe077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220ce5494b34cc67d65f15854ed426de14960207a5246fdfe482d513afca7f55f7664736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102645760003560e060020a90048063853890ae11610148578063ba8bbbe0116100ba578063e31be0871161007e578063e31be087146106ea578063e4e6bba614610717578063e64808f31461072a578063f33fe10f1461074a578063f862b7eb1461076a578063fd5d2ef31461078a57600080fd5b8063ba8bbbe014610666578063baeebe751461067c578063cf33125014610692578063d547741f146106b4578063ddca3f43146106d457600080fd5b8063934785b71161010c578063934785b7146105b257806396cf5227146105c557806399b5bb64146105e5578063a217fddf146105fb578063b6aa366b14610610578063b6d3385e1461063057600080fd5b8063853890ae146105275780638ac1f86f146105475780638e5df9c71461055c57806391d148541461057c578063924cf6e01461059c57600080fd5b806336568abe116101e15780635c975abb116101a55780635c975abb146104785780636a1db1bf14610490578063746b5c42146104b057806375b238fc146104b85780637df8b802146104da5780638456cb591461051257600080fd5b806336568abe146103d35780633f4ba83a146103f357806342180fb8146104085780634a1856de146104285780635249a7051461045857600080fd5b80632360407111610228578063236040711461032d578063248a9ca31461034d5780632f2ff15d1461037d578063331a891a1461039d57806333de61d2146103bd57600080fd5b806301ffc9a71461027057806304421823146102a557806309fce356146102d55780630d668087146102f7578063119b980d1461030d57600080fd5b3661026b57005b600080fd5b34801561027c57600080fd5b5061029061028b3660046137a2565b6107aa565b60405190151581526020015b60405180910390f35b3480156102b157600080fd5b506102c760008051602061455b83398151915281565b60405190815260200161029c565b3480156102e157600080fd5b506102f56102f03660046136a3565b610813565b005b34801561030357600080fd5b506102c760d35481565b34801561031957600080fd5b506102f56103283660046137cc565b61083b565b34801561033957600080fd5b506102f56103483660046135c5565b61097f565b34801561035957600080fd5b506102c7610368366004613764565b60009081526065602052604090206001015490565b34801561038957600080fd5b506102f561039836600461377d565b6109bb565b3480156103a957600080fd5b506102f56103b8366004613764565b6109e1565b3480156103c957600080fd5b506102c760d95481565b3480156103df57600080fd5b506102f56103ee36600461377d565b610b28565b3480156103ff57600080fd5b506102f5610bb3565b34801561041457600080fd5b506102f5610423366004613764565b610bd7565b34801561043457600080fd5b506102c7610443366004613764565b60ca6020526000908152604090206001015481565b34801561046457600080fd5b506102f561047336600461366e565b610bf6565b34801561048457600080fd5b5060975460ff16610290565b34801561049c57600080fd5b506102f56104ab366004613764565b610c7b565b6102f5610c9a565b3480156104c457600080fd5b506102c760008051602061457b83398151915281565b3480156104e657600080fd5b5060cd546104fa90600160a060020a031681565b604051600160a060020a03909116815260200161029c565b34801561051e57600080fd5b506102f5610da2565b34801561053357600080fd5b506102f56105423660046135e2565b610dc3565b34801561055357600080fd5b506102f5610e0b565b34801561056857600080fd5b506102f56105773660046135c5565b610f63565b34801561058857600080fd5b5061029061059736600461377d565b610fa4565b3480156105a857600080fd5b506102c760d15481565b6102f56105c036600461361b565b610fcf565b3480156105d157600080fd5b506102f56105e0366004613764565b6113d7565b3480156105f157600080fd5b506102c760d45481565b34801561060757600080fd5b506102c7600081565b34801561061c57600080fd5b506102f561062b366004613807565b6113f6565b34801561063c57600080fd5b506104fa61064b3660046135c5565b60cc60205260009081526040902054600160a060020a031681565b34801561067257600080fd5b506102c760cb5481565b34801561068857600080fd5b506102c760d25481565b34801561069e57600080fd5b506106a761147c565b60405161029c9190613d3b565b3480156106c057600080fd5b506102f56106cf36600461377d565b6114de565b3480156106e057600080fd5b506102c760ce5481565b3480156106f657600080fd5b5061070a610705366004613764565b611504565b60405161029c9190613ed2565b6102f56107253660046135c5565b6115c0565b34801561073657600080fd5b506104fa610745366004613764565b61186d565b34801561075657600080fd5b5060d0546104fa90600160a060020a031681565b34801561077657600080fd5b506102f5610785366004613764565b611897565b34801561079657600080fd5b506102f56107a5366004613764565b611aca565b6000600160e060020a031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061080d57507f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a03198316145b92915050565b60008051602061457b83398151915261082c8133611ae9565b6108368383611b50565b505050565b60008051602061455b8339815191526108548133611ae9565b60975460ff16156108835760405160e560020a62461bcd02815260040161087a90613e3e565b60405180910390fd5b6108906020830183614005565b602001357f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b60405160405180910390a26108d96108d06020840184614005565b60200135611c66565b60d15460d0546108f3918491600160a060020a0316611ccb565b61097b6109036020840184614005565b610911906040810190613f54565b808060200260200160405190810160405280939291908181526020016000905b8282101561095d5761094e60608302860136819003810190613959565b81526020019060010190610931565b50505050508380602001906109729190614005565b6020013561213f565b5050565b60008051602061457b8339815191526109988133611ae9565b5060cf8054600160a060020a031916600160a060020a0392909216919091179055565b6000828152606560205260409020600101546109d78133611ae9565b6108368383612202565b60008051602061457b8339815191526109fa8133611ae9565b60975460ff16610a4f5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161087a565b60cb54821015610aca5760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e7449640000000000000000000000000000000000000000000000000000606482015260840161087a565b600082815260ca602052604090206001015415610b1657600082815260ca6020526040812090610afa828261333c565b5060006001919091015581610b0e8161448b565b925050610aca565b610b2160018361422a565b60d4555050565b600160a060020a0381163314610ba95760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c660000000000000000000000000000000000606482015260840161087a565b61097b8282612288565b60008051602061457b833981519152610bcc8133611ae9565b610bd46122ef565b50565b60008051602061457b833981519152610bf08133611ae9565b5060d255565b60008051602061457b833981519152610c0f8133611ae9565b815160005b81811015610c755760cc6000858381518110610c3257610c32614505565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610c6d8161448b565b915050610c14565b50505050565b60008051602061457b833981519152610c948133611ae9565b5060ce55565b610cb260008051602061455b83398151915233610fa4565b610d485760ce543414610d0a5760405160e560020a62461bcd02815260206004820152601b60248201527f53656e742076616c7565206973206e6f7420657175616c206665650000000000604482015260640161087a565b60cf5460ce54604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015610d46573d6000803e3d6000fd5b505b60d58054906000610d588361448b565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c9604051610d8c9190613d9b565b60405180910390a2610da060c9600061333c565b565b60008051602061457b833981519152610dbb8133611ae9565b610bd461238e565b60008051602061457b833981519152610ddc8133611ae9565b50600160a060020a03918216600090815260cc602052604090208054600160a060020a03191691909216179055565b60975460ff1615610e315760405160e560020a62461bcd02815260040161087a90613e3e565b60cb545b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610ec357600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610e69565b5050505081526020016001820154815250509050806020015160001480610eed5750428160200151115b15610ef8575060cb55565b8051610f03906123e9565b600082815260ca6020526040812090610f1c828261333c565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610f5b8161448b565b915050610e35565b60008051602061457b833981519152610f7c8133611ae9565b50600160a060020a0316600090815260cc602052604090208054600160a060020a0319169055565b6000918252606560209081526040808420600160a060020a0393909316845291905290205460ff1690565b60008115611064576000805260cc6020527f435daec636ce435a90bde0aeec309a303a359a854c5a51b7d6a5a941d6db609454600160a060020a0386811691161461105f5760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e00604482015260640161087a565b6110d0565b50600160a060020a03808516600090815260cc602052604090205416806110d05760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e20616464726573730000000000000000000000604482015260640161087a565b600083116111235760405160e560020a62461bcd02815260206004820152601160248201527f43616e6e6f742077697468647261772030000000000000000000000000000000604482015260640161087a565b60ce5434146111775760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d20666565000000000000000000000000000000604482015260640161087a565b60cf54604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156111b0573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101849052600160a060020a038616906323b872dd90606401602060405180830381600087803b15801561121857600080fd5b505af115801561122c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112509190613707565b61129f5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e7300000000000000000000000000604482015260640161087a565b6040805160608082018352600160a060020a0384811680845288821660208086019182528587018a815260c98054600181018255600091909152965160039097027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054988716600160a060020a0319998a1617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2984018054918716919098161790965594517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55460ce548651918252928b1694810194909452938301939093528101859052608081019190915233907f396a477f1cc45749b4f1db2dfdf2ca466f53c3b26ab0b5452c2aaaf7f5ac9c439060a00160405180910390a26113d061267d565b5050505050565b60008051602061457b8339815191526113f08133611ae9565b5060d355565b600054610100900460ff168061140f575060005460ff16155b61142e5760405160e560020a62461bcd02815260040161087a90613e75565b600054610100900460ff16158015611450576000805461ffff19166101011790555b611459856126f5565b61146484848461282e565b80156113d0576000805461ff00191690555050505050565b606060d78054806020026020016040519081016040528092919081815260200182805480156114d457602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116114b6575b5050505050905090565b6000828152606560205260409020600101546114fa8133611ae9565b6108368383612288565b604080518082019091526060815260006020820152600082815260ca60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b828210156115a757600084815260209081902060408051606081018252600386029092018054600160a060020a0390811684526001808301549091168486015260029091015491830191909152908352909201910161154d565b5050505081526020016001820154815250509050919050565b60cd54600160a060020a03908116600090815260cc6020526040902054168061162e5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e20616464726573730000000000000000000000604482015260640161087a565b60ce5434116116825760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c7565203c3d20666565000000000000000000000000000000604482015260640161087a565b60cf5460ce54604051600160a060020a039092169181156108fc0291906000818181858888f193505050501580156116be573d6000803e3d6000fd5b50600060ce54346116cf919061422a565b905060cd60009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b15801561172457600080fd5b505af1158015611738573d6000803e3d6000fd5b50506040805160608082018352600160a060020a038881168084528a821660208086019182528587018b815260c980546001810182556000918252975160039098027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054998816600160a060020a03199a8b1617905593517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d29850180549190971698169790971790945592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55460ce5486519182529281019490945293830193909352810186905260808101919091523393507f396a477f1cc45749b4f1db2dfdf2ca466f53c3b26ab0b5452c2aaaf7f5ac9c43925060a001905060405180910390a261083661267d565b60d7818154811061187d57600080fd5b600091825260209091200154600160a060020a0316905081565b60975460ff16156118bd5760405160e560020a62461bcd02815260040161087a90613e3e565b60cb5481146119115760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e7400000000604482015260640161087a565b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561199f57600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101611945565b50505050815260200160018201548152505090506000816020015111611a0a5760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e736665727320776974682074686973206964604482015260640161087a565b42816020015110611a605760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f7420796574207061737365640000000000604482015260640161087a565b8051611a6b906123e9565b600082815260ca6020526040812090611a84828261333c565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2611ac38260016140f6565b60cb555050565b60008051602061457b833981519152611ae38133611ae9565b5060d155565b611af38282610fa4565b61097b57611b0b81600160a060020a0316601461294d565b611b1683602061294d565b604051602001611b27929190613cba565b60408051601f198184030181529082905260e560020a62461bcd02825261087a91600401613e0b565b8051825114611bca5760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d6500606482015260840161087a565b815160005b81811015610c7557828181518110611be957611be9614505565b602002602001015160cc6000868481518110611c0757611c07614505565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611c5e9061448b565b915050611bcf565b60d460008154611c759061448b565b91829055508114610bd45760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f72646572000000000000000000000000604482015260640161087a565b60008080611cee611cdf6020880188614005565b611ce89061426a565b85612b3a565b905080611cfb8780613f04565b611d0b60808a0160608b01613975565b67ffffffffffffffff16818110611d2457611d24614505565b9050602002810190611d369190613fe4565b6080013514611d8a5760405160e560020a62461bcd02815260206004820181905260248201527f5472616e73666572206576656e742076616c69646174696f6e206661696c6564604482015260640161087a565b84611d9b6080880160608901613975565b67ffffffffffffffff16611daf8880613f04565b611dba92915061422a565b1015611e0b5760405160e560020a62461bcd02815260206004820152601860248201527f4e6f7420656e6f7567682073616665747920626c6f636b730000000000000000604482015260640161087a565b60005b611e188780613f04565b90508110156121345736611e2c8880613f04565b83818110611e3c57611e3c614505565b9050602002810190611e4e9190613fe4565b9050611e6261012082016101008301613975565b67ffffffffffffffff161561206e57835b611e8561012083016101008401613975565b67ffffffffffffffff1681101561204e576000611ea560408b018b613f04565b83818110611eb557611eb5614505565b9050602002810190611ec7919061401b565b611ed090614344565b60d754909150600090611ee59060029061410e565b611ef09060016140f6565b905060005b826020015151811015611f3a57611f2883602001518281518110611f1b57611f1b614505565b6020026020010151612c2f565b80611f328161448b565b915050611ef5565b50815160d85460d7805460408051602080840282018101909252828152611fad9594600160a060020a03169390929091830182828015611fa357602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311611f85575b5050505050612d6b565b955085611fba8c80613f04565b611fc4848961422a565b818110611fd357611fd3614505565b9050602002810190611fe59190613fe4565b60800135146120395760405160e560020a62461bcd02815260206004820152601560248201527f57726f6e67205653207265636569707420686173680000000000000000000000604482015260640161087a565b505080806120469061448b565b915050611e73565b5061206161012082016101008301613975565b67ffffffffffffffff1693505b84156120ca57848160400135146120ca5760405160e560020a62461bcd02815260206004820152601160248201527f57726f6e6720706172656e742068617368000000000000000000000000000000604482015260640161087a565b6120d381612e21565b94506120e761012082016101008301613975565b67ffffffffffffffff1615801590612117575061210a6080890160608a01613975565b67ffffffffffffffff1682105b1561212157600094505b508061212c8161448b565b915050611e0e565b50505060d955505050565b60d35461214c90426140f6565b600082815260ca60205260408120600101919091555b825181101561083657600082815260ca60205260409020835184908390811061218d5761218d614505565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a03938416178255938301519481018054909416949091169390931790915560400151600290910155806121fa8161448b565b915050612162565b61220c8282610fa4565b61097b576000828152606560209081526040808320600160a060020a03851684529091529020805460ff191660011790556122443390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6122928282610fa4565b1561097b576000828152606560209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff166123445760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161087a565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60975460ff16156123b45760405160e560020a62461bcd02815260040161087a90613e3e565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586123713390565b60005b815181101561097b576000600160a060020a031682828151811061241257612412614505565b602002602001015160000151600160a060020a0316141561252e5760cd548251600160a060020a0390911690632e1a7d4d9084908490811061245657612456614505565b6020026020010151604001516040518263ffffffff1660e060020a02815260040161248391815260200190565b600060405180830381600087803b15801561249d57600080fd5b505af11580156124b1573d6000803e3d6000fd5b505050508181815181106124c7576124c7614505565b602002602001015160200151600160a060020a03166108fc8383815181106124f1576124f1614505565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015612528573d6000803e3d6000fd5b5061266b565b81818151811061254057612540614505565b602002602001015160000151600160a060020a031663a9059cbb83838151811061256c5761256c614505565b60200260200101516020015184848151811061258a5761258a614505565b6020026020010151604001516040518363ffffffff1660e060020a0281526004016125ca929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b1580156125e457600080fd5b505af11580156125f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061261c9190613707565b61266b5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e7300000000000000000000000000604482015260640161087a565b806126758161448b565b9150506123ec565b600060d2544261268d919061410e565b905060d6548114610bd45760d580549060006126a88361448b565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c96040516126dc9190613d9b565b60405180910390a26126f060c9600061333c565b60d655565b600054610100900460ff168061270e575060005460ff16155b61272d5760405160e560020a62461bcd02815260040161087a90613e75565b600054610100900460ff1615801561274f576000805461ffff19166101011790555b61275a600033612ee4565b61277660008051602061455b8339815191528360400151612ee4565b61279260008051602061457b8339815191528360200151612ee4565b6127a482608001518360a00151611b50565b606082015160cd8054600160a060020a03928316600160a060020a031991821617909155835160d0805491841691831691909117905560c084015160ce5560e084015160cf805491909316911617905561014082015160d15561010082015160d25561012082015160d355600160cb81905560d555801561097b576000805461ff00191690555050565b600054610100900460ff1680612847575060005460ff16155b6128665760405160e560020a62461bcd02815260040161087a90613e75565b600054610100900460ff16158015612888576000805461ffff19166101011790555b60008451116129025760405160e560020a62461bcd02815260206004820152603260248201527f4c656e677468206f66205f696e697469616c56616c696461746f7273206d757360448201527f7420626520626967676572207468616e20300000000000000000000000000000606482015260840161087a565b83516129159060d790602087019061335d565b5060d88054600160a060020a031916600160a060020a03851617905560d98290558015610c75576000805461ff001916905550505050565b6060600061295c8360026141b9565b6129679060026140f6565b67ffffffffffffffff81111561297f5761297f61451e565b6040519080825280601f01601f1916602001820160405280156129a9576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129e0576129e0614505565b6020010190600160f860020a031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a2b57612a2b614505565b6020010190600160f860020a031916908160001a9053506000612a4f8460026141b9565b612a5a9060016140f6565b90505b6001811115612ae1577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612a9b57612a9b614505565b1a60f860020a02828281518110612ab457612ab4614505565b6020010190600160f860020a031916908160001a905350601090940493612ada81614474565b9050612a5d565b508315612b335760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161087a565b9392505050565b6000808360000151600081518110612b5457612b54614505565b6020026020010151838560000151600181518110612b7457612b74614505565b6020026020010151612b898760200151612eee565b875180516002908110612b9e57612b9e614505565b60200260200101518860400151604051602001612bbb9190613d88565b6040516020818303038152906040528960000151600381518110612be157612be1614505565b6020026020010151604051602001612bff9796959493929190613bd8565b604051602081830303815290604052805190602001209050612c278460000151826004613056565b949350505050565b6000816020015160070b1215612d1957600060018260200151600019612c559190614122565b612c5f91906141d8565b60070b905060d7600160d780549050612c78919061422a565b81548110612c8857612c88614505565b60009182526020909120015460d78054600160a060020a039092169183908110612cb457612cb4614505565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555060d7805480612cf357612cf36144ec565b60008281526020902081016000199081018054600160a060020a03191690550190555050565b5160d780546001810182556000919091527f8a012a6de2943a5aa4d77acf5e695d4456760a3f1f30a5d6dc2079599187a071018054600160a060020a031916600160a060020a03909216919091179055565b60008084600081518110612d8157612d81614505565b60200260200101518486600181518110612d9d57612d9d614505565b602002602001015185604051602001612db69190613d3b565b60405160208183030381529060405288600281518110612dd857612dd8614505565b6020026020010151604051602001612df4959493929190613b59565b604051602081830303815290604052805190602001209050612e1885826003613056565b95945050505050565b6000806000612e2f84613106565b60d78054929450909250600091612e5f612e4f60e0890160c08a016137a2565b60e060020a900463ffffffff1690565b612e6991906144a6565b81548110612e7957612e79614505565b600091825260209091200154600160a060020a03169050612edc8184612ea260e0890189613f9d565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061325492505050565b509392505050565b61097b8282612202565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b6020811015612f8557818181518110612f3757612f37614505565b60209101015160f860020a90819004027fff000000000000000000000000000000000000000000000000000000000000001615612f7357612f85565b80612f7d8161448b565b915050612f1c565b6000612f9282602061422a565b67ffffffffffffffff811115612faa57612faa61451e565b6040519080825280601f01601f191660200182016040528015612fd4576020820181803683370190505b50905060005b815181101561304d578383612fee8161448b565b94508151811061300057613000614505565b602001015160f860020a900460f860020a0282828151811061302457613024614505565b6020010190600160f860020a031916908160001a905350806130458161448b565b915050612fda565b50949350505050565b60006060825b85518110156130fc5785818151811061307757613077614505565b6020026020010151858783600161308e91906140f6565b8151811061309e5761309e614505565b60200260200101516040516020016130b893929190613c83565b604051602081830303815290604052915060208251116130e0576130db82614241565b6130e8565b815160208301205b94506130f56002826140f6565b905061305c565b5092949350505050565b600080807fa000000000000000000000000000000000000000000000000000000000000000604085013561313d6060870187613f9d565b608088013561314f60a08a018a613f9d565b60405160200161316597969594939291906139fc565b60408051601f1981840301815291815290915061318790850160208601613724565b81604051602001613199929190613a59565b60408051601f198184030181529190528051602091820120906131be90860186613724565b827f84000000000000000000000000000000000000000000000000000000000000006131f060e0890160c08a016137a2565b7fb84100000000000000000000000000000000000000000000000000000000000061321e60e08b018b613f9d565b6040516020016132349796959493929190613a9f565b604051602081830303815290604052805190602001209250925050915091565b60208101516040820151606083015160001a601b81101561327357601b015b60408051600081526020810180835287905260ff8316918101919091526060810184905260808101839052600160a060020a0387169060019060a0016020604051602081039080840390855afa1580156132d1573d6000803e3d6000fd5b50505060206040510351600160a060020a0316146133345760405160e560020a62461bcd02815260206004820152601560248201527f4661696c656420746f20766572696679207369676e0000000000000000000000604482015260640161087a565b505050505050565b5080546000825560030290600052602060002090810190610bd491906133c2565b8280548282559060005260206000209081019282156133b2579160200282015b828111156133b25782518254600160a060020a031916600160a060020a0390911617825560209092019160019091019061337d565b506133be9291506133f5565b5090565b5b808211156133be578054600160a060020a031990811682556001820180549091169055600060028201556003016133c3565b5b808211156133be57600081556001016133f6565b803561341581614537565b919050565b600082601f83011261342b57600080fd5b8135602061344061343b836140d2565b6140a1565b828152818101908583018385028701840188101561345d57600080fd5b60005b8581101561348557813561347381614537565b84529284019290840190600101613460565b5090979650505050505050565b6000601f83818401126134a457600080fd5b823560206134b461343b836140d2565b82815281810190868301838502880184018910156134d157600080fd5b60005b8581101561356957813567ffffffffffffffff808211156134f457600080fd5b818b0191508b603f83011261350857600080fd5b8682013560408282111561351e5761351e61451e565b61352f828c01601f19168a016140a1565b92508183528d8183860101111561354557600080fd5b818185018a85013750600090820188015285525092840192908401906001016134d4565b509098975050505050505050565b60006060828403121561358957600080fd5b613591614031565b9050813561359e81614537565b815260208201356135ae81614537565b806020830152506040820135604082015292915050565b6000602082840312156135d757600080fd5b8135612b3381614537565b600080604083850312156135f557600080fd5b823561360081614537565b9150602083013561361081614537565b809150509250929050565b6000806000806080858703121561363157600080fd5b843561363c81614537565b9350602085013561364c81614537565b92506040850135915060608501356136638161454c565b939692955090935050565b60006020828403121561368057600080fd5b813567ffffffffffffffff81111561369757600080fd5b612c278482850161341a565b600080604083850312156136b657600080fd5b823567ffffffffffffffff808211156136ce57600080fd5b6136da8683870161341a565b935060208501359150808211156136f057600080fd5b506136fd8582860161341a565b9150509250929050565b60006020828403121561371957600080fd5b8151612b338161454c565b60006020828403121561373657600080fd5b81357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612b3357600080fd5b60006020828403121561377657600080fd5b5035919050565b6000806040838503121561379057600080fd5b82359150602083013561361081614537565b6000602082840312156137b457600080fd5b8135600160e060020a031981168114612b3357600080fd5b6000602082840312156137de57600080fd5b813567ffffffffffffffff8111156137f557600080fd5b820160808185031215612b3357600080fd5b6000806000806080858703121561381d57600080fd5b843567ffffffffffffffff8082111561383557600080fd5b90860190610160828903121561384a57600080fd5b61385261405a565b61385b8361340a565b81526138696020840161340a565b602082015261387a6040840161340a565b604082015261388b6060840161340a565b60608201526080830135828111156138a257600080fd5b6138ae8a82860161341a565b60808301525060a0830135828111156138c657600080fd5b6138d28a82860161341a565b60a08301525060c083013560c08201526138ee60e0840161340a565b60e08201526101008381013590820152610120808401359082015261014092830135928101929092529094506020860135908082111561392d57600080fd5b5061393a8782880161341a565b9350506139496040860161340a565b9396929550929360600135925050565b60006060828403121561396b57600080fd5b612b338383613577565b60006020828403121561398757600080fd5b813567ffffffffffffffff81168114612b3357600080fd5b600081518084526020808501945080840160005b838110156139f15781518051600160a060020a03908116895284820151168489015260409081015190880152606090960195908201906001016139b3565b509495945050505050565b7fff0000000000000000000000000000000000000000000000000000000000000088168152866001820152848660218301378481016021810185905260009083856041830137600093016041019283525090979650505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316815260008251613a91816003850160208701614448565b919091016003019392505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198816815260008751613ad7816003850160208c01614448565b7fff000000000000000000000000000000000000000000000000000000000000008816600391840191820152600160e060020a0319871660048201527fffff000000000000000000000000000000000000000000000000000000000000861660088201528385600a83013760009301600a019283525090979650505050505050565b60008651613b6b818460208b01614448565b600160a060020a0387166c01000000000000000000000000029083019081528551613b9d816014840160208a01614448565b8551910190613bb3816014840160208901614448565b8451910190613bc9816014840160208801614448565b01601401979650505050505050565b600088516020613beb8285838e01614448565b81840191506c01000000000000000000000000600160a060020a038b1602825260148951613c1e81838601858e01614448565b8951930192613c3281838601858d01614448565b8851930192613c4681838601858c01614448565b8751930192613c5a81838601858b01614448565b8651930192613c6e81838601858a01614448565b929092019091019a9950505050505050505050565b60008451613c95818460208901614448565b82018481528351613cad816020808501908801614448565b0160200195945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613cf2816017850160208801614448565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613d2f816028840160208801614448565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b81811015613d7c578351600160a060020a031683529284019291840191600101613d57565b50909695505050505050565b602081526000612b33602083018461399f565b60006020808301818452808554808352604092508286019150866000528360002060005b82811015613dfe578154600160a060020a0390811685526001808401549091168786015260028301548686015260609094019360039092019101613dbf565b5091979650505050505050565b6020815260008251806020840152613e2a816040850160208701614448565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b602081526000825160406020840152613eee606084018261399f565b9050602084015160408401528091505092915050565b6000808335601e19843603018112613f1b57600080fd5b83018035915067ffffffffffffffff821115613f3657600080fd5b6020908101925081023603821315613f4d57600080fd5b9250929050565b6000808335601e19843603018112613f6b57600080fd5b83018035915067ffffffffffffffff821115613f8657600080fd5b6020019150606081023603821315613f4d57600080fd5b6000808335601e19843603018112613fb457600080fd5b83018035915067ffffffffffffffff821115613fcf57600080fd5b602001915036819003821315613f4d57600080fd5b6000823561011e19833603018112613ffb57600080fd5b9190910192915050565b60008235605e19833603018112613ffb57600080fd5b60008235603e19833603018112613ffb57600080fd5b6040516060810167ffffffffffffffff811182821017156140545761405461451e565b60405290565b604051610160810167ffffffffffffffff811182821017156140545761405461451e565b6040805190810167ffffffffffffffff811182821017156140545761405461451e565b604051601f8201601f1916810167ffffffffffffffff811182821017156140ca576140ca61451e565b604052919050565b600067ffffffffffffffff8211156140ec576140ec61451e565b5060209081020190565b60008219821115614109576141096144ba565b500190565b60008261411d5761411d6144d3565b500490565b60008160070b8360070b677fffffffffffffff600082136000841383830485118282161615614153576141536144ba565b677fffffffffffffff196000851282811687830587121615614177576141776144ba565b60008712925085820587128484161615614193576141936144ba565b858505871281841616156141a9576141a96144ba565b5050509290910295945050505050565b60008160001904831182151516156141d3576141d36144ba565b500290565b60008160070b8360070b6000811281677fffffffffffffff1901831281151615614204576142046144ba565b81677fffffffffffffff018313811615614220576142206144ba565b5090039392505050565b60008282101561423c5761423c6144ba565b500390565b80516020808301519190811015614264578060200360080260020a600003821691505b50919050565b6000606080833603121561427d57600080fd5b614285614031565b833567ffffffffffffffff8082111561429d57600080fd5b6142a936838801613492565b83526020915081860135828401526040860135818111156142c957600080fd5b8601905036601f8201126142dc57600080fd5b80356142ea61343b826140d2565b818152838101908385013688850286018701111561430757600080fd5b600094505b838510156143325761431e3682613577565b83526001949094019391850191870161430c565b50604086015250929695505050505050565b6000604080833603121561435757600080fd5b61435f61407e565b833567ffffffffffffffff8082111561437757600080fd5b61438336838801613492565b835260209150818601358181111561439a57600080fd5b8601905036601f8201126143ad57600080fd5b80356143bb61343b826140d2565b81815283810190838501368885028601870111156143d857600080fd5b600094505b83851015614435578781360312156143f457600080fd5b6143fc61407e565b813561440781614537565b815281870135600781900b811461441d57600080fd5b818801528352600194909401939185019187016143dd565b5093850193909352509195945050505050565b60005b8381101561446357818101518382015260200161444b565b83811115610c755750506000910152565b600081614483576144836144ba565b506000190190565b600060001982141561449f5761449f6144ba565b5060010190565b6000826144b5576144b56144d3565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603160045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610bd457600080fd5b8015158114610bd457600080fdfe077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220ce5494b34cc67d65f15854ed426de14960207a5246fdfe482d513afca7f55f7664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 609,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 858,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 474,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 565,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6811,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "queue",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_struct(Transfer)7726_storage)dyn_storage"
      },
      {
        "astId": 6816,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lockedTransfers",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(LockedTransfers)7743_storage)"
      },
      {
        "astId": 6818,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "oldestLockedEventId",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 6822,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6824,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 6826,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "fee",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 6828,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "207",
        "type": "t_address_payable"
      },
      {
        "astId": 6830,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "sideBridgeAddress",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 6832,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "minSafetyBlocks",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 6834,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "timeframeSeconds",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 6836,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lockTime",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 6838,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "inputEventId",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 6840,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "outputEventId",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 6842,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lastTimeframe",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 2181,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "validatorSet",
        "offset": 0,
        "slot": "215",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2183,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "validatorSetAddress",
        "offset": 0,
        "slot": "216",
        "type": "t_address"
      },
      {
        "astId": 2185,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lastProcessedBlock",
        "offset": 0,
        "slot": "217",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Transfer)7726_storage)dyn_storage": {
        "base": "t_struct(Transfer)7726_storage",
        "encoding": "dynamic_array",
        "label": "struct CommonStructs.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedTransfers)7743_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonStructs.LockedTransfers)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedTransfers)7743_storage"
      },
      "t_struct(LockedTransfers)7743_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.LockedTransfers",
        "members": [
          {
            "astId": 7740,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "transfers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transfer)7726_storage)dyn_storage"
          },
          {
            "astId": 7742,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transfer)7726_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.Transfer",
        "members": [
          {
            "astId": 7721,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7723,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7725,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}