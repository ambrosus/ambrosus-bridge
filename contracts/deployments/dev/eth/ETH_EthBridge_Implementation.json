{
  "address": "0x871c1F199bD17F1cbed559DE974a7F1568b6E1Ea",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "queue",
          "type": "tuple[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEE_PROVIDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WATCHDOG_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bridgeFeeRecipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeBridgeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockTime_",
          "type": "uint256"
        }
      ],
      "name": "changeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSafetyBlocks_",
          "type": "uint256"
        }
      ],
      "name": "changeMinSafetyBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signatureFeeCheckNumber_",
          "type": "uint256"
        }
      ],
      "name": "changeSignatureFeeCheckNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframeSeconds_",
          "type": "uint256"
        }
      ],
      "name": "changeTimeframeSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeTransferFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "getLockedTransfers",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonStructs.Transfer[]",
              "name": "transfers",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.LockedTransfers",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "grantRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sideBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "watchdogsAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address",
              "name": "feeProviderAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokenThisAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokenSideAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "transferFeeRecipient",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "bridgeFeeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeframeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSafetyBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.ConstructorArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isQueueEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeframe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSafetyBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestLockedEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "outputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "removeLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "revokeRoles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "skipTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "transfers",
          "type": "tuple[]"
        }
      ],
      "name": "submitTransferUntrustless",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeframeSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenSideAddress",
          "type": "address"
        }
      ],
      "name": "tokensAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenSideAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensAddBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        }
      ],
      "name": "tokensRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensRemoveBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferFeeRecipient",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "unlockTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_watchdogs",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_fee_provider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oldDefaultAdmin",
          "type": "address"
        }
      ],
      "name": "upgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unwrapSide",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "feeSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "transferFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "feeSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "transferFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        }
      ],
      "name": "wrapWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf8ccdf91d76afac68c0fd6f3b891af986e8c9ec6ed81d52f46b797a47601e1a7",
  "receipt": {
    "to": null,
    "from": "0xD693a3cc5686e74Ca2e72e8120A2F2013B8eE66E",
    "contractAddress": "0x871c1F199bD17F1cbed559DE974a7F1568b6E1Ea",
    "transactionIndex": 24,
    "gasUsed": "3033619",
    "logsBloom": "0x
    "blockHash": "0x31c43ba05c2f15e4df3059c8bd5fb8b7a4718fec2239429e775d13e3c89ffb62",
    "transactionHash": "0xf8ccdf91d76afac68c0fd6f3b891af986e8c9ec6ed81d52f46b797a47601e1a7",
    "logs": [],
    "blockNumber": 7921351,
    "cumulativeGasUsed": "5730259",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "14835e48c656ebed02c4fc9389a12566",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"queue\",\"type\":\"tuple[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_PROVIDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WATCHDOG_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeFeeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeBridgeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks_\",\"type\":\"uint256\"}],\"name\":\"changeMinSafetyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureFeeCheckNumber_\",\"type\":\"uint256\"}],\"name\":\"changeSignatureFeeCheckNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds_\",\"type\":\"uint256\"}],\"name\":\"changeTimeframeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeTransferFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getLockedTransfers\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.LockedTransfers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"grantRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"watchdogsAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"feeProviderAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"transferFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"bridgeFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueueEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeframe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSafetyBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestLockedEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"outputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"removeLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"revokeRoles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"skipTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"name\":\"submitTransferUntrustless\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSideAddress\",\"type\":\"address\"}],\"name\":\"tokensAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensAddBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"}],\"name\":\"tokensRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensRemoveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeeRecipient\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"unlockTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_watchdogs\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_fee_provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldDefaultAdmin\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrapSide\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"feeSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"feeSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"wrapWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"withdraw(address,address,uint256,bool,bytes,uint256,uint256)\":{\"params\":{\"bridgeFee\":\"Amount (in native coins), payed as bridge earnings\",\"feeSignature\":\"Signature signed by relay that confirms that the fee values are valid\",\"transferFee\":\"Amount (in native coins), payed to compensate gas fees in side network\"}},\"wrapWithdraw(address,bytes,uint256,uint256)\":{\"params\":{\"bridgeFee\":\"Amount (in native coins), payed as bridge earnings\",\"feeSignature\":\"Signature signed by relay that confirms that the fee values are valid\",\"toAddress\":\"Address in side network that will receive the tokens\",\"transferFee\":\"Amount (in native coins), payed to compensate gas fees in side network\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/networks/ETH_EthBridge.sol\":\"ETH_EthBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/checks/CheckUntrustless2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\n\\n\\ncontract CheckUntrustless2 {\\n    // this contract do nothing, but i think it's required to inheritance from it\\n    // todo check this\\n    uint256[15] private ___gap;\\n}\\n\",\"keccak256\":\"0xff7351b4e6b3628cd20511c65aa12dfb19b76472ee18ee06397879c1000d562d\",\"license\":\"MIT\"},\"contracts/checks/SignatureCheck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nfunction ecdsaRecover(bytes32 messageHash, bytes memory signature) pure returns(address) {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n        r := mload(add(signature, 32))\\n        s := mload(add(signature, 64))\\n        v := byte(0, mload(add(signature, 96)))\\n        if lt(v, 27) {v := add(v, 27)}\\n    }\\n    return ecrecover(messageHash, v, r, s);\\n}\\n\",\"keccak256\":\"0x16e553d27ac4c9c49f8487c5df1fd51b3afbffa9557be22ca031f05d82739ba7\",\"license\":\"MIT\"},\"contracts/common/CommonBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./CommonStructs.sol\\\";\\nimport \\\"../tokens/IWrapper.sol\\\";\\nimport \\\"../checks/SignatureCheck.sol\\\";\\n\\n\\ncontract CommonBridge is Initializable, AccessControlUpgradeable, PausableUpgradeable {\\n    // DEFAULT_ADMIN_ROLE can grants and revokes all roles below; Set to multisig (proxy contract address)\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");  // can change tokens; unpause contract; change params like lockTime, minSafetyBlocks, ...\\n    bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");  // can submit transfers\\n    bytes32 public constant WATCHDOG_ROLE = keccak256(\\\"WATCHDOG_ROLE\\\");  // can pause contract\\n    bytes32 public constant FEE_PROVIDER_ROLE = keccak256(\\\"FEE_PROVIDER_ROLE\\\");  // fee signatures must be signed by this role\\n\\n    // Signature contains timestamp divided by SIGNATURE_FEE_TIMESTAMP; SIGNATURE_FEE_TIMESTAMP should be the same on relay;\\n    uint private constant SIGNATURE_FEE_TIMESTAMP = 1800;  // 30 min\\n    // Signature will be valid for `SIGNATURE_FEE_TIMESTAMP` * `signatureFeeCheckNumber` seconds after creation\\n    uint internal signatureFeeCheckNumber;\\n\\n\\n    // queue of Transfers to be pushed in another network\\n    CommonStructs.Transfer[] queue;\\n\\n    // locked transfers from another network\\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\\n    // head index of lockedTransfers 'queue' mapping\\n    uint public oldestLockedEventId;\\n\\n\\n    // this network to side network token addresses mapping\\n    mapping(address => address) public tokenAddresses;\\n    // token that implement `IWrapper` interface and used to wrap native coin\\n    address public wrapperAddress;\\n\\n    // addresses that will receive fees\\n    address payable public transferFeeRecipient;\\n    address payable public bridgeFeeRecipient;\\n\\n    address public sideBridgeAddress;  // transfer events from side networks must be created by this address\\n    uint public minSafetyBlocks;  // proof must contains at least `minSafetyBlocks` blocks after block with transfer\\n    uint public timeframeSeconds;  // `withdrawFinish` func will be produce Transfer event no more often than `timeframeSeconds`\\n    uint public lockTime;  // transfers received from side networks can be unlocked after `lockTime` seconds\\n\\n    uint public inputEventId; // last processed event from side network\\n    uint public outputEventId;  // last created event in this network. start from 1 coz 0 consider already processed\\n\\n    uint public lastTimeframe; // timestamp / `timeframeSeconds` of latest withdraw\\n\\n\\n    event Withdraw(address indexed from, uint eventId, address tokenFrom, address tokenTo, uint amount,\\n        uint transferFeeAmount, uint bridgeFeeAmount);\\n    event Transfer(uint indexed eventId, CommonStructs.Transfer[] queue);\\n    event TransferSubmit(uint indexed eventId);\\n    event TransferFinish(uint indexed eventId);\\n\\n    function __CommonBridge_init(CommonStructs.ConstructorArgs calldata args) internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, address(this));\\n        _setupRole(ADMIN_ROLE, msg.sender);\\n        _setupRole(RELAY_ROLE, args.relayAddress);\\n        _setupRoles(WATCHDOG_ROLE, args.watchdogsAddresses);\\n        _setupRole(FEE_PROVIDER_ROLE, args.feeProviderAddress);\\n\\n        // initialise tokenAddresses with start values\\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\\n        wrapperAddress = args.wrappingTokenAddress;\\n\\n        sideBridgeAddress = args.sideBridgeAddress;\\n        transferFeeRecipient = args.transferFeeRecipient;\\n        bridgeFeeRecipient = args.bridgeFeeRecipient;\\n        minSafetyBlocks = args.minSafetyBlocks;\\n        timeframeSeconds = args.timeframeSeconds;\\n        lockTime = args.lockTime;\\n\\n        // 1, coz eventId 0 considered already processed\\n        oldestLockedEventId = 1;\\n        outputEventId = 1;\\n\\n        signatureFeeCheckNumber = 3;\\n\\n        lastTimeframe = block.timestamp / timeframeSeconds;\\n    }\\n\\n\\n    // `wrapWithdraw` function used for wrap some amount of native coins and send it to side network;\\n    /// @dev Amount to wrap is calculated by subtracting fees from msg.value; Use `wrapperAddress` token to wrap;\\n\\n    /// @param toAddress Address in side network that will receive the tokens\\n    /// @param transferFee Amount (in native coins), payed to compensate gas fees in side network\\n    /// @param bridgeFee Amount (in native coins), payed as bridge earnings\\n    /// @param feeSignature Signature signed by relay that confirms that the fee values are valid\\n    function wrapWithdraw(address toAddress,\\n        bytes calldata feeSignature, uint transferFee, uint bridgeFee\\n    ) public payable {\\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\\n        require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value > transferFee + bridgeFee, \\\"Sent value <= fee\\\");\\n\\n        uint amount = msg.value - transferFee - bridgeFee;\\n        feeCheck(wrapperAddress, feeSignature, transferFee, bridgeFee, amount);\\n        transferFeeRecipient.transfer(transferFee);\\n        bridgeFeeRecipient.transfer(bridgeFee);\\n\\n        IWrapper(wrapperAddress).deposit{value : amount}();\\n\\n        //\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, address(0), tokenSideAddress, amount, transferFee, bridgeFee);\\n\\n        withdrawFinish();\\n    }\\n\\n    // `withdraw` function used for sending tokens from this network to side network;\\n    /// @param tokenThisAddress Address of token [that will be transferred] in current network\\n    /// @param toAddress Address in side network that will receive the tokens\\n    /// @param amount Amount of tokens to be sent\\n    /** @param unwrapSide If true, user on side network will receive native network coin instead of ERC20 token.\\n     Transferred token MUST be wrapper of side network native coin (ex: WETH, if side net is Ethereum)\\n     `tokenAddresses[0x0] == tokenThisAddress` means that `tokenThisAddress` is thisNet analogue of wrapper token in sideNet\\n    */\\n    /// @param transferFee Amount (in native coins), payed to compensate gas fees in side network\\n    /// @param bridgeFee Amount (in native coins), payed as bridge earnings\\n    /// @param feeSignature Signature signed by relay that confirms that the fee values are valid\\n    function withdraw(\\n        address tokenThisAddress, address toAddress, uint amount, bool unwrapSide,\\n        bytes calldata feeSignature, uint transferFee, uint bridgeFee\\n    ) payable public {\\n        address tokenSideAddress;\\n        if (unwrapSide) {\\n            require(tokenAddresses[address(0)] == tokenThisAddress, \\\"Token not point to native token\\\");\\n            // tokenSideAddress will be 0x0000000000000000000000000000000000000000 - for native token\\n        } else {\\n            tokenSideAddress = tokenAddresses[tokenThisAddress];\\n            require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n        }\\n\\n        require(msg.value == transferFee + bridgeFee, \\\"Sent value != fee\\\");\\n\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        feeCheck(tokenThisAddress, feeSignature, transferFee, bridgeFee, amount);\\n        transferFeeRecipient.transfer(transferFee);\\n        bridgeFeeRecipient.transfer(bridgeFee);\\n\\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \\\"Fail transfer coins\\\");\\n\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, tokenThisAddress, tokenSideAddress, amount, transferFee, bridgeFee);\\n\\n        withdrawFinish();\\n    }\\n\\n    // can be called to force emit `Transfer` event, without waiting for withdraw in next timeframe\\n    function triggerTransfers() public {\\n        require(queue.length != 0, \\\"Queue is empty\\\");\\n\\n        emit Transfer(outputEventId++, queue);\\n        delete queue;\\n    }\\n\\n\\n    // after `lockTime` period, transfers can be unlocked\\n    function unlockTransfers(uint eventId) public whenNotPaused {\\n        require(eventId == oldestLockedEventId, \\\"can unlock only oldest event\\\");\\n\\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n        require(transfersLocked.endTimestamp > 0, \\\"no locked transfers with this id\\\");\\n        require(transfersLocked.endTimestamp < block.timestamp, \\\"lockTime has not yet passed\\\");\\n\\n        proceedTransfers(transfersLocked.transfers);\\n\\n        delete lockedTransfers[eventId];\\n        emit TransferFinish(eventId);\\n\\n        oldestLockedEventId = eventId + 1;\\n    }\\n\\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\\n    function unlockTransfersBatch() public whenNotPaused {\\n        uint eventId = oldestLockedEventId;\\n        for (;; eventId++) {\\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\\n\\n            proceedTransfers(transfersLocked.transfers);\\n\\n            delete lockedTransfers[eventId];\\n            emit TransferFinish(eventId);\\n        }\\n        oldestLockedEventId = eventId;\\n    }\\n\\n    // delete transfers with passed eventId **and all after it**\\n    function removeLockedTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(eventId >= oldestLockedEventId, \\\"eventId must be >= oldestLockedEventId\\\");  // can't undo unlocked :(\\n        require(eventId <= inputEventId, \\\"eventId must be <= inputEventId\\\");\\n\\n        // now waiting for submitting a new transfer with `eventId` id\\n        inputEventId = eventId - 1;\\n\\n        for (; lockedTransfers[eventId].endTimestamp != 0; eventId++)\\n            delete lockedTransfers[eventId];\\n\\n    }\\n\\n    // pretend like bridge already receive and process all transfers up to `eventId` id\\n    // BIG WARNING: CAN'T BE UNDONE coz of security reasons\\n    function skipTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(eventId >= oldestLockedEventId, \\\"eventId must be >= oldestLockedEventId\\\"); // can't undo unlocked :(\\n\\n        inputEventId = eventId - 1; // now waiting for submitting a new transfer with `eventId` id\\n        oldestLockedEventId = eventId;  // and no need to unlock previous transfers\\n    }\\n\\n\\n    // views\\n\\n    // returns locked transfers from another network\\n    function getLockedTransfers(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\\n        return lockedTransfers[eventId];\\n    }\\n\\n\\n    function isQueueEmpty() public view returns (bool) {\\n        return queue.length == 0;\\n    }\\n\\n\\n    // admin setters\\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\\n        minSafetyBlocks = minSafetyBlocks_;\\n    }\\n\\n    function changeTransferFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        transferFeeRecipient = feeRecipient_;\\n    }\\n\\n    function changeBridgeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        bridgeFeeRecipient = feeRecipient_;\\n    }\\n\\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\\n        lastTimeframe = (lastTimeframe * timeframeSeconds) / timeframeSeconds_;\\n        timeframeSeconds = timeframeSeconds_;\\n    }\\n\\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\\n        lockTime = lockTime_;\\n    }\\n\\n    function changeSignatureFeeCheckNumber(uint signatureFeeCheckNumber_) public onlyRole(ADMIN_ROLE) {\\n        signatureFeeCheckNumber = signatureFeeCheckNumber_;\\n    }\\n\\n    // token addressed mapping\\n\\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\\n    }\\n\\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\\n        delete tokenAddresses[tokenThisAddress];\\n    }\\n\\n    function tokensAddBatch(address[] calldata tokenThisAddresses, address[] calldata tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\\n    }\\n\\n    function _tokensAddBatch(address[] calldata tokenThisAddresses, address[] calldata tokenSideAddresses) private {\\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \\\"sizes of tokenThisAddresses and tokenSideAddresses must be same\\\");\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\\n    }\\n\\n    function tokensRemoveBatch(address[] calldata tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            delete tokenAddresses[tokenThisAddresses[i]];\\n    }\\n\\n    // pause\\n\\n    function pause() public onlyRole(WATCHDOG_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // roles\\n\\n    function grantRoles(bytes32 role, address[] calldata accounts) public onlyRole(getRoleAdmin(role)) {\\n        // check permission to grant role via onlyRole(getRoleAdmin(role))\\n        _setupRoles(role, accounts);\\n    }\\n    function revokeRoles(bytes32 role, address[] calldata accounts) public {\\n        // revokeRole will check for permissions\\n        for (uint i = 0; i < accounts.length; i++)\\n            revokeRole(role, accounts[i]);\\n    }\\n    function _setupRoles(bytes32 role, address[] calldata accounts) internal {\\n        // no permissions check at all\\n        for (uint i = 0; i < accounts.length; i++)\\n            _setupRole(role, accounts[i]);\\n    }\\n\\n    // internal\\n\\n    // submitted transfers saves in `lockedTransfers` for `lockTime` period\\n    function lockTransfers(CommonStructs.Transfer[] calldata events, uint eventId) internal {\\n        lockedTransfers[eventId].endTimestamp = block.timestamp + lockTime;\\n        for (uint i = 0; i < events.length; i++)\\n            lockedTransfers[eventId].transfers.push(events[i]);\\n    }\\n\\n\\n    // sends money according to the information in the Transfer structure\\n    // if transfer.tokenAddress == 0x0, then it's transfer of `wrapperAddress` token with auto-unwrap to native coin\\n    function proceedTransfers(CommonStructs.Transfer[] memory transfers) internal {\\n        for (uint i = 0; i < transfers.length; i++) {\\n\\n            if (transfers[i].tokenAddress == address(0)) {// native token\\n                IWrapper(wrapperAddress).withdraw(transfers[i].amount);\\n                payable(transfers[i].toAddress).transfer(transfers[i].amount);\\n            } else {// ERC20 token\\n                require(\\n                    IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount),\\n                    \\\"Fail transfer coins\\\");\\n            }\\n\\n        }\\n    }\\n\\n    // used by `withdraw` and `wrapWithdraw` functions;\\n    // emit `Transfer` event with current queue if timeframe was changed;\\n    function withdrawFinish() internal {\\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\\n        if (nowTimeframe != lastTimeframe) {\\n            emit Transfer(outputEventId++, queue);\\n            delete queue;\\n\\n            lastTimeframe = nowTimeframe;\\n        }\\n    }\\n\\n    // encode message with received values and current timestamp;\\n    // check that signature is same message signed by address with RELAY_ROLE;\\n    // make `signatureFeeCheckNumber` attempts, each time decrementing timestampEpoch (workaround for old signature)\\n    function feeCheck(address token, bytes calldata signature, uint transferFee, uint bridgeFee, uint amount) internal view {\\n        bytes32 messageHash;\\n        address signer;\\n        uint timestampEpoch = block.timestamp / SIGNATURE_FEE_TIMESTAMP;\\n\\n        for (uint i = 0; i < signatureFeeCheckNumber; i++) {\\n            messageHash = keccak256(abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    keccak256(abi.encodePacked(token, timestampEpoch, transferFee, bridgeFee, amount))\\n                ));\\n\\n            signer = ecdsaRecover(messageHash, signature);\\n            if (hasRole(FEE_PROVIDER_ROLE, signer))\\n                return;\\n            timestampEpoch--;\\n        }\\n        revert(\\\"Signature check failed\\\");\\n    }\\n\\n    function checkEventId(uint eventId) internal {\\n        require(eventId == ++inputEventId, \\\"EventId out of order\\\");\\n    }\\n\\n    receive() external payable {}  // need to receive native token from wrapper contract\\n\\n    uint256[15] private __gap;\\n}\\n\",\"keccak256\":\"0x74846658822e44c4fc71b2764a31d90bad77af3b492a2a4a5a512f7a41d9b489\",\"license\":\"MIT\"},\"contracts/common/CommonStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary CommonStructs {\\n    struct Transfer {\\n        address tokenAddress;\\n        address toAddress;\\n        uint amount;\\n    }\\n\\n    struct TransferProof {\\n        bytes[] receiptProof;\\n        uint eventId;\\n        Transfer[] transfers;\\n    }\\n\\n    struct LockedTransfers {\\n        Transfer[] transfers;\\n        uint endTimestamp;\\n    }\\n\\n    struct ConstructorArgs {\\n        address sideBridgeAddress; address relayAddress;\\n        address[] watchdogsAddresses; address feeProviderAddress;\\n        address wrappingTokenAddress;\\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\\n        address payable transferFeeRecipient; address payable bridgeFeeRecipient;\\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0x0294bbc461102c4f4108d6f0163ce8158d5af7c5a6ff29971f01afdec7b38cf3\",\"license\":\"MIT\"},\"contracts/networks/ETH_EthBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonBridge.sol\\\";\\nimport \\\"../checks/CheckUntrustless2.sol\\\";\\n\\n\\ncontract ETH_EthBridge is CommonBridge, CheckUntrustless2 {\\n\\n    function initialize(\\n        CommonStructs.ConstructorArgs calldata args\\n    ) public initializer {\\n        __CommonBridge_init(args);\\n    }\\n\\n    function upgrade(\\n        address[] calldata _watchdogs,\\n        address _fee_provider,\\n        address oldDefaultAdmin\\n    ) public {\\n        require(msg.sender == address(this), \\\"This method require multisig\\\");\\n\\n        // new roles for untrustless mpc\\n        _setupRoles(WATCHDOG_ROLE, _watchdogs);\\n        _setupRole(FEE_PROVIDER_ROLE, _fee_provider);\\n\\n        // add DEFAULT_ADMIN_ROLE to multisig\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        // revoke DEFAULT_ADMIN_ROLE from deployer\\n        revokeRole(DEFAULT_ADMIN_ROLE, oldDefaultAdmin);\\n    }\\n\\n    function submitTransferUntrustless(uint eventId, CommonStructs.Transfer[] calldata transfers) public onlyRole(RELAY_ROLE) whenNotPaused {\\n        checkEventId(eventId);\\n        emit TransferSubmit(eventId);\\n        lockTransfers(transfers, eventId);\\n    }\\n}\\n\",\"keccak256\":\"0x491228bedd295cc8947c19d4439ca275f9a3c3a809f42473376e25f891a3a81e\",\"license\":\"MIT\"},\"contracts/tokens/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWrapper {\\n    event Deposit(address indexed dst, uint amount);\\n    event Withdrawal(address indexed src, uint amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n}\\n\",\"keccak256\":\"0xbe5bc17241b9a14b78e18e4562e2a4c02e2b941fae0f1a896bbd795e49af136e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613603806100206000396000f3fe6080604052600436106102ec5760003560e060020a90048063853890ae11610194578063ba8bbbe0116100e0578063e31be08711610099578063f700558711610073578063f7005587146108d6578063f862b7eb146108f6578063f8b7443314610916578063fd5d2ef31461092957600080fd5b8063e31be08714610869578063ec9d4d3c14610896578063f33fe10f146108b657600080fd5b8063ba8bbbe0146107bb578063baeebe75146107d1578063cf3317d3146107e7578063d3b89f4914610807578063d547741f14610829578063deb9a3a21461084957600080fd5b8063924cf6e01161014d578063a217fddf11610127578063a217fddf1461072e578063a9b1cf0b14610743578063b6d3385e14610765578063b87330e91461079b57600080fd5b8063924cf6e0146106e257806396cf5227146106f857806399b5bb641461071857600080fd5b8063853890ae1461064457806386d7679e146106645780638ac1f86f1461067a5780638e5df9c71461068f57806391c5bc0a146106af57806391d14854146106c257600080fd5b8063390d5388116102535780635249a7051161020c578063746b5c42116101e6578063746b5c42146105d857806375b238fc146105ed5780637df8b8021461060f5780638456cb591461062f57600080fd5b80635249a705146105805780635a5f55bf146105a05780635c975abb146105c057600080fd5b8063390d5388146104bb5780633928b296146104db5780633f4ba83a146104fb57806342180fb8146105105780634a1856de146105305780635119b0ef1461056057600080fd5b8063297c2677116102a5578063297c2677146103f75780632bbba8471461040d5780632f2ff15d14610423578063304561bb14610443578063331a891a1461047b57806336568abe1461049b57600080fd5b806301ffc9a7146102f8578063044218231461032d57806309fce3561461036f5780630d66808714610391578063196f0f62146103a7578063248a9ca3146103c757600080fd5b366102f357005b600080fd5b34801561030457600080fd5b50610318610313366004612fc2565b610949565b60405190151581526020015b60405180910390f35b34801561033957600080fd5b506103617f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b604051908152602001610324565b34801561037b57600080fd5b5061038f61038a366004612eaf565b6109dc565b005b34801561039d57600080fd5b5061036160d45481565b3480156103b357600080fd5b5061038f6103c2366004612f76565b610a08565b3480156103d357600080fd5b506103616103e2366004612f38565b60009081526065602052604090206001015490565b34801561040357600080fd5b5061036160d65481565b34801561041957600080fd5b5060ca5415610318565b34801561042f57600080fd5b5061038f61043e366004612f51565b610a56565b34801561044f57600080fd5b5060cf5461046390600160a060020a031681565b604051600160a060020a039091168152602001610324565b34801561048757600080fd5b5061038f610496366004612f38565b610a81565b3480156104a757600080fd5b5061038f6104b6366004612f51565b610ba1565b3480156104c757600080fd5b5060d05461046390600160a060020a031681565b3480156104e757600080fd5b5061038f6104f6366004612cb4565b610c2c565b34801561050757600080fd5b5061038f610c68565b34801561051c57600080fd5b5061038f61052b366004612f38565b610c8c565b34801561053c57600080fd5b5061036161054b366004612f38565b60cb6020526000908152604090206001015481565b34801561056c57600080fd5b5061038f61057b36600461303d565b610cc9565b34801561058c57600080fd5b5061038f61059b366004612e05565b610d59565b3480156105ac57600080fd5b5061038f6105bb366004613001565b610de2565b3480156105cc57600080fd5b5060975460ff16610318565b3480156105e457600080fd5b5061038f610e5a565b3480156105f957600080fd5b506103616000805160206135ae83398151915281565b34801561061b57600080fd5b5060ce5461046390600160a060020a031681565b34801561063b57600080fd5b5061038f610f06565b34801561065057600080fd5b5061038f61065f366004612cd1565b610f27565b34801561067057600080fd5b5061036160d75481565b34801561068657600080fd5b5061038f610f6f565b34801561069b57600080fd5b5061038f6106aa366004612cb4565b6110c7565b61038f6106bd366004612d9e565b611108565b3480156106ce57600080fd5b506103186106dd366004612f51565b611438565b3480156106ee57600080fd5b5061036160d25481565b34801561070457600080fd5b5061038f610713366004612f38565b611463565b34801561072457600080fd5b5061036160d55481565b34801561073a57600080fd5b50610361600081565b34801561074f57600080fd5b5061036160008051602061356e83398151915281565b34801561077157600080fd5b50610463610780366004612cb4565b60cd60205260009081526040902054600160a060020a031681565b3480156107a757600080fd5b5061038f6107b6366004612cb4565b611482565b3480156107c757600080fd5b5061036160cc5481565b3480156107dd57600080fd5b5061036160d35481565b3480156107f357600080fd5b5061038f610802366004612f38565b6114be565b34801561081357600080fd5b5061036160008051602061358e83398151915281565b34801561083557600080fd5b5061038f610844366004612f51565b611535565b34801561085557600080fd5b5061038f610864366004612f76565b61155b565b34801561087557600080fd5b50610889610884366004612f38565b611582565b6040516103249190613308565b3480156108a257600080fd5b5061038f6108b1366004612e47565b61163e565b3480156108c257600080fd5b5060d15461046390600160a060020a031681565b3480156108e257600080fd5b5061038f6108f1366004612f38565b6116d7565b34801561090257600080fd5b5061038f610911366004612f38565b6116f6565b61038f610924366004612d0a565b611929565b34801561093557600080fd5b5061038f610944366004612f38565b611d89565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b0000000000000000000000000000000000000000000000000000000014806109d657507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b6000805160206135ae8339815191526109f58133611da8565b610a0185858585611e0f565b5050505050565b60005b81811015610a5057610a3e84848484818110610a2957610a296134b9565b90506020020160208101906108449190612cb4565b80610a4881613485565b915050610a0b565b50505050565b600082815260656020526040902060010154610a728133611da8565b610a7c8383611f30565b505050565b6000805160206135ae833981519152610a9a8133611da8565b60975460ff16610ac85760405160e560020a62461bcd028152600401610abf906131e0565b60405180910390fd5b60cc54821015610aed5760405160e560020a62461bcd028152600401610abf906132ab565b60d554821115610b425760405160e560020a62461bcd02815260206004820152601f60248201527f6576656e744964206d757374206265203c3d20696e7075744576656e744964006044820152606401610abf565b610b4d60018361342b565b60d5555b600082815260cb602052604090206001015415610b9d57600082815260cb6020526040812090610b818282612bd4565b5060006001919091015581610b9581613485565b925050610b51565b5050565b600160a060020a0381163314610c225760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610abf565b610b9d8282611fb6565b6000805160206135ae833981519152610c458133611da8565b5060d08054600160a060020a031916600160a060020a0392909216919091179055565b6000805160206135ae833981519152610c818133611da8565b610c8961201d565b50565b6000805160206135ae833981519152610ca58133611da8565b8160d35460d754610cb6919061340c565b610cc091906133e7565b60d7555060d355565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7610cf48133611da8565b60975460ff1615610d1a5760405160e560020a62461bcd028152600401610abf90613217565b610d238461208c565b60405184907f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b90600090a2610a508383866120f1565b6000805160206135ae833981519152610d728133611da8565b8160005b81811015610a015760cd6000868684818110610d9457610d946134b9565b9050602002016020810190610da99190612cb4565b600160a060020a0316815260208101919091526040016000208054600160a060020a031916905580610dda81613485565b915050610d76565b600054610100900460ff1680610dfb575060005460ff16155b610e1a5760405160e560020a62461bcd028152600401610abf9061324e565b600054610100900460ff16158015610e3c576000805461ffff19166101011790555b610e458261217f565b8015610b9d576000805461ff00191690555050565b60ca54610eac5760405160e560020a62461bcd02815260206004820152600e60248201527f517565756520697320656d7074790000000000000000000000000000000000006044820152606401610abf565b60d68054906000610ebc83613485565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260ca604051610ef0919061313d565b60405180910390a2610f0460ca6000612bd4565b565b60008051602061356e833981519152610f1f8133611da8565b610c896123ab565b6000805160206135ae833981519152610f408133611da8565b50600160a060020a03918216600090815260cd602052604090208054600160a060020a03191691909216179055565b60975460ff1615610f955760405160e560020a62461bcd028152600401610abf90613217565b60cc545b600081815260cb60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561102757600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610fcd565b50505050815260200160018201548152505090508060200151600014806110515750428160200151115b1561105c575060cc55565b805161106790612406565b600082815260cb60205260408120906110808282612bd4565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a250806110bf81613485565b915050610f99565b6000805160206135ae8339815191526110e08133611da8565b50600160a060020a0316600090815260cd602052604090208054600160a060020a0319169055565b60ce54600160a060020a03908116600090815260cd602052604090205416806111765760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e206164647265737300000000000000000000006044820152606401610abf565b61118082846133cf565b34116111d15760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c7565203c3d206665650000000000000000000000000000006044820152606401610abf565b6000826111de853461342b565b6111e8919061342b565b60ce5490915061120590600160a060020a0316878787878661269a565b60cf54604051600160a060020a039091169085156108fc029086906000818181858888f1935050505015801561123f573d6000803e3d6000fd5b5060d054604051600160a060020a039091169084156108fc029085906000818181858888f1935050505015801561127a573d6000803e3d6000fd5b5060ce60009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156112ce57600080fd5b505af11580156112e2573d6000803e3d6000fd5b505060408051606081018252600160a060020a0380881682528c81166020830190815282840188815260ca80546001810182556000918252945160039095027f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee181018054968616600160a060020a031997881617905592517f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee2840180549190951695169490941790925590517f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee39091015560d65491513395507f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f444945061141f9350879087908b908b90958652600160a060020a0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b60405180910390a261142f61282e565b50505050505050565b6000918252606560209081526040808420600160a060020a0393909316845291905290205460ff1690565b6000805160206135ae83398151915261147c8133611da8565b5060d455565b6000805160206135ae83398151915261149b8133611da8565b5060cf8054600160a060020a031916600160a060020a0392909216919091179055565b6000805160206135ae8339815191526114d78133611da8565b60975460ff166114fc5760405160e560020a62461bcd028152600401610abf906131e0565b60cc548210156115215760405160e560020a62461bcd028152600401610abf906132ab565b61152c60018361342b565b60d5555060cc55565b6000828152606560205260409020600101546115518133611da8565b610a7c8383611fb6565b6000838152606560205260409020600101546115778133611da8565b610a508484846128a6565b604080518082019091526060815260006020820152600082815260cb60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b8282101561162557600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016115cb565b5050505081526020016001820154815250509050919050565b3330146116905760405160e560020a62461bcd02815260206004820152601c60248201527f54686973206d6574686f642072657175697265206d756c7469736967000000006044820152606401610abf565b6116a960008051602061356e83398151915285856128a6565b6116c160008051602061358e833981519152836128ee565b6116cc6000336128ee565b610a50600082611535565b6000805160206135ae8339815191526116f08133611da8565b5060c955565b60975460ff161561171c5760405160e560020a62461bcd028152600401610abf90613217565b60cc5481146117705760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e74000000006044820152606401610abf565b600081815260cb60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b828210156117fe57600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016117a4565b505050508152602001600182015481525050905060008160200151116118695760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e7366657273207769746820746869732069646044820152606401610abf565b428160200151106118bf5760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f74207965742070617373656400000000006044820152606401610abf565b80516118ca90612406565b600082815260cb60205260408120906118e38282612bd4565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a26119228260016133cf565b60cc555050565b600085156119be576000805260cd6020527fcd565b10a72538d86f6d352f37ebc5dff31587960b12c0afe00fd03947a6932a54600160a060020a038a81169116146119b95760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e006044820152606401610abf565b611a2a565b50600160a060020a03808916600090815260cd60205260409020541680611a2a5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e206164647265737300000000000000000000006044820152606401610abf565b611a3482846133cf565b3414611a855760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d206665650000000000000000000000000000006044820152606401610abf565b60008711611ad85760405160e560020a62461bcd02815260206004820152601160248201527f43616e6e6f7420776974686472617720300000000000000000000000000000006044820152606401610abf565b611ae689868686868c61269a565b60cf54604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015611b20573d6000803e3d6000fd5b5060d054604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611b5b573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101889052600160a060020a038a16906323b872dd90606401602060405180830381600087803b158015611bc357600080fd5b505af1158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb9190612f1b565b611c4a5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e73000000000000000000000000006044820152606401610abf565b6040805160608082018352600160a060020a038481168084528c821660208086019182528587018e815260ca8054600181018255600091909152965160039097027f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee181018054988716600160a060020a0319998a1617905592517f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee284018054918716919098161790965594517f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee39091015560d6548551908152918e16938201939093529283019190915281018890526080810184905260a0810183905233907f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f4449060c00160405180910390a2611d7e61282e565b505050505050505050565b6000805160206135ae833981519152611da28133611da8565b5060d255565b611db28282611438565b610b9d57611dca81600160a060020a031660146128f8565b611dd58360206128f8565b604051602001611de69291906130bc565b60408051601f198184030181529082905260e560020a62461bcd028252610abf916004016131ad565b828114611e875760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d65006064820152608401610abf565b8260005b81811015611f2857838382818110611ea557611ea56134b9565b9050602002016020810190611eba9190612cb4565b60cd6000888885818110611ed057611ed06134b9565b9050602002016020810190611ee59190612cb4565b600160a060020a03908116825260208201929092526040016000208054600160a060020a0319169290911691909117905580611f2081613485565b915050611e8b565b505050505050565b611f3a8282611438565b610b9d576000828152606560209081526040808320600160a060020a03851684529091529020805460ff19166001179055611f723390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611fc08282611438565b15610b9d576000828152606560209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff166120425760405160e560020a62461bcd028152600401610abf906131e0565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60d56000815461209b90613485565b91829055508114610c895760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f726465720000000000000000000000006044820152606401610abf565b60d4546120fe90426133cf565b600082815260cb60205260408120600101919091555b82811015610a5057600082815260cb6020526040902084848381811061213c5761213c6134b9565b83546001810185556000948552602090942060609091029290920192600302909101905061216a82826134eb565b5050808061217790613485565b915050612114565b600054610100900460ff1680612198575060005460ff16155b6121b75760405160e560020a62461bcd028152600401610abf9061324e565b600054610100900460ff161580156121d9576000805461ffff19166101011790555b6121e46000306128ee565b6121fc6000805160206135ae833981519152336128ee565b6122357f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d76122306040850160208601612cb4565b6128ee565b61225960008051602061356e8339815191526122546040850185613386565b6128a6565b61227b60008051602061358e8339815191526122306080850160608601612cb4565b61229d61228b60a0840184613386565b61229860c0860186613386565b611e0f565b6122ad60a0830160808401612cb4565b60ce8054600160a060020a031916600160a060020a03929092169190911790556122da6020830183612cb4565b60d18054600160a060020a031916600160a060020a039290921691909117905561230b610100830160e08401612cb4565b60cf8054600160a060020a031916600160a060020a039290921691909117905561233d61012083016101008401612cb4565b60d08054600160a060020a031916600160a060020a039290921691909117905561016082013560d25561012082013560d381905561014083013560d455600160cc81905560d655600360c95561239390426133e7565b60d7558015610b9d576000805461ff00191690555050565b60975460ff16156123d15760405160e560020a62461bcd028152600401610abf90613217565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861206f3390565b60005b8151811015610b9d576000600160a060020a031682828151811061242f5761242f6134b9565b602002602001015160000151600160a060020a0316141561254b5760ce548251600160a060020a0390911690632e1a7d4d90849084908110612473576124736134b9565b6020026020010151604001516040518263ffffffff1660e060020a0281526004016124a091815260200190565b600060405180830381600087803b1580156124ba57600080fd5b505af11580156124ce573d6000803e3d6000fd5b505050508181815181106124e4576124e46134b9565b602002602001015160200151600160a060020a03166108fc83838151811061250e5761250e6134b9565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015612545573d6000803e3d6000fd5b50612688565b81818151811061255d5761255d6134b9565b602002602001015160000151600160a060020a031663a9059cbb838381518110612589576125896134b9565b6020026020010151602001518484815181106125a7576125a76134b9565b6020026020010151604001516040518363ffffffff1660e060020a0281526004016125e7929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b15801561260157600080fd5b505af1158015612615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126399190612f1b565b6126885760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e73000000000000000000000000006044820152606401610abf565b8061269281613485565b915050612409565b600080806126aa610708426133e7565b905060005b60c9548110156127e2576040516c01000000000000000000000000600160a060020a038c160260208201526034810183905260548101889052607481018790526094810186905260b40160408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c0160405160208183030381529060405280519060200120935061279a848a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b4992505050565b92506127b460008051602061358e83398151915284611438565b156127c25750505050611f28565b816127cc8161346e565b92505080806127da90613485565b9150506126af565b5060405160e560020a62461bcd02815260206004820152601660248201527f5369676e617475726520636865636b206661696c6564000000000000000000006044820152606401610abf565b600060d3544261283e91906133e7565b905060d7548114610c895760d6805490600061285983613485565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260ca60405161288d919061313d565b60405180910390a26128a160ca6000612bd4565b60d755565b60005b81811015610a50576128dc848484848181106128c7576128c76134b9565b90506020020160208101906122309190612cb4565b806128e681613485565b9150506128a9565b610b9d8282611f30565b6060600061290783600261340c565b6129129060026133cf565b67ffffffffffffffff81111561292a5761292a6134d2565b6040519080825280601f01601f191660200182016040528015612954576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061298b5761298b6134b9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106129ee576129ee6134b9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612a2a84600261340c565b612a359060016133cf565b90505b6001811115612af0577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612a7657612a766134b9565b1a7f010000000000000000000000000000000000000000000000000000000000000002828281518110612aab57612aab6134b9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601090940493612ae98161346e565b9050612a38565b508315612b425760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610abf565b9392505050565b6020810151604082015160608301516000929190831a601b811015612b6c57601b015b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015612bbf573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b5080546000825560030290600052602060002090810190610c8991905b80821115612c23578054600160a060020a03199081168255600182018054909116905560006002820155600301612bf1565b5090565b60008083601f840112612c3957600080fd5b50813567ffffffffffffffff811115612c5157600080fd5b6020830191508360208083028501011115612c6b57600080fd5b9250929050565b60008083601f840112612c8457600080fd5b50813567ffffffffffffffff811115612c9c57600080fd5b602083019150836020828501011115612c6b57600080fd5b600060208284031215612cc657600080fd5b8135612b428161354a565b60008060408385031215612ce457600080fd5b8235612cef8161354a565b91506020830135612cff8161354a565b809150509250929050565b60008060008060008060008060e0898b031215612d2657600080fd5b8835612d318161354a565b97506020890135612d418161354a565b9650604089013595506060890135612d588161355f565b9450608089013567ffffffffffffffff811115612d7457600080fd5b612d808b828c01612c72565b999c989b5096999598969760a08701359660c0013595509350505050565b600080600080600060808688031215612db657600080fd5b8535612dc18161354a565b9450602086013567ffffffffffffffff811115612ddd57600080fd5b612de988828901612c72565b9699909850959660408101359660609091013595509350505050565b60008060208385031215612e1857600080fd5b823567ffffffffffffffff811115612e2f57600080fd5b612e3b85828601612c27565b90969095509350505050565b60008060008060608587031215612e5d57600080fd5b843567ffffffffffffffff811115612e7457600080fd5b612e8087828801612c27565b9095509350506020850135612e948161354a565b91506040850135612ea48161354a565b939692955090935050565b60008060008060408587031215612ec557600080fd5b843567ffffffffffffffff80821115612edd57600080fd5b612ee988838901612c27565b90965094506020870135915080821115612f0257600080fd5b50612f0f87828801612c27565b95989497509550505050565b600060208284031215612f2d57600080fd5b8151612b428161355f565b600060208284031215612f4a57600080fd5b5035919050565b60008060408385031215612f6457600080fd5b823591506020830135612cff8161354a565b600080600060408486031215612f8b57600080fd5b83359250602084013567ffffffffffffffff811115612fa957600080fd5b612fb586828701612c27565b9497909650939450505050565b600060208284031215612fd457600080fd5b81357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612b4257600080fd5b60006020828403121561301357600080fd5b813567ffffffffffffffff81111561302a57600080fd5b82016101808185031215612b4257600080fd5b60008060006040848603121561305257600080fd5b83359250602084013567ffffffffffffffff8082111561307157600080fd5b818601915086601f83011261308557600080fd5b81358181111561309457600080fd5b8760206060830285010111156130a957600080fd5b6020830194508093505050509250925092565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516130f4816017850160208801613442565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613131816028840160208801613442565b01602801949350505050565b60006020808301818452808554808352604092508286019150866000528360002060005b828110156131a0578154600160a060020a0390811685526001808401549091168786015260028301548686015260609094019360039092019101613161565b5091979650505050505050565b60208152600082518060208401526131cc816040850160208701613442565b601f01601f19169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526026908201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560408201527f76656e7449640000000000000000000000000000000000000000000000000000606082015260800190565b6000602080835260608084018551604080858801528282518085526080890191508684019450600093505b808410156133705784518051600160a060020a03908116845288820151168884015283015183830152938601936001939093019290850190613333565b5094909701519590960194909452509392505050565b6000808335601e1984360301811261339d57600080fd5b83018035915067ffffffffffffffff8211156133b857600080fd5b6020908101925081023603821315612c6b57600080fd5b600082198211156133e2576133e26134a0565b500190565b6000826134075760e060020a634e487b7102600052601260045260246000fd5b500490565b6000816000190483118215151615613426576134266134a0565b500290565b60008282101561343d5761343d6134a0565b500390565b60005b8381101561345d578181015183820152602001613445565b83811115610a505750506000910152565b60008161347d5761347d6134a0565b506000190190565b6000600019821415613499576134996134a0565b5060010190565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b81356134f68161354a565b8154600160a060020a031916600160a060020a03821617825550602082013561351e8161354a565b600182018054600160a060020a031916600160a060020a03831617905550604082013560028201555050565b600160a060020a0381168114610c8957600080fd5b8015158114610c8957600080fdfeb7f2fcb7a10916921b74b9baa8ea85f89b12ab12f6ededa160998f8b20e65f95516d5e7ed3e60a6b2804c1554cd94bc2eb576e44b192a0e069d4c527589a887ea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122021ae13fe42025722238345005395f6989376a7128dd63e4ffce1ff036d69905464736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102ec5760003560e060020a90048063853890ae11610194578063ba8bbbe0116100e0578063e31be08711610099578063f700558711610073578063f7005587146108d6578063f862b7eb146108f6578063f8b7443314610916578063fd5d2ef31461092957600080fd5b8063e31be08714610869578063ec9d4d3c14610896578063f33fe10f146108b657600080fd5b8063ba8bbbe0146107bb578063baeebe75146107d1578063cf3317d3146107e7578063d3b89f4914610807578063d547741f14610829578063deb9a3a21461084957600080fd5b8063924cf6e01161014d578063a217fddf11610127578063a217fddf1461072e578063a9b1cf0b14610743578063b6d3385e14610765578063b87330e91461079b57600080fd5b8063924cf6e0146106e257806396cf5227146106f857806399b5bb641461071857600080fd5b8063853890ae1461064457806386d7679e146106645780638ac1f86f1461067a5780638e5df9c71461068f57806391c5bc0a146106af57806391d14854146106c257600080fd5b8063390d5388116102535780635249a7051161020c578063746b5c42116101e6578063746b5c42146105d857806375b238fc146105ed5780637df8b8021461060f5780638456cb591461062f57600080fd5b80635249a705146105805780635a5f55bf146105a05780635c975abb146105c057600080fd5b8063390d5388146104bb5780633928b296146104db5780633f4ba83a146104fb57806342180fb8146105105780634a1856de146105305780635119b0ef1461056057600080fd5b8063297c2677116102a5578063297c2677146103f75780632bbba8471461040d5780632f2ff15d14610423578063304561bb14610443578063331a891a1461047b57806336568abe1461049b57600080fd5b806301ffc9a7146102f8578063044218231461032d57806309fce3561461036f5780630d66808714610391578063196f0f62146103a7578063248a9ca3146103c757600080fd5b366102f357005b600080fd5b34801561030457600080fd5b50610318610313366004612fc2565b610949565b60405190151581526020015b60405180910390f35b34801561033957600080fd5b506103617f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b604051908152602001610324565b34801561037b57600080fd5b5061038f61038a366004612eaf565b6109dc565b005b34801561039d57600080fd5b5061036160d45481565b3480156103b357600080fd5b5061038f6103c2366004612f76565b610a08565b3480156103d357600080fd5b506103616103e2366004612f38565b60009081526065602052604090206001015490565b34801561040357600080fd5b5061036160d65481565b34801561041957600080fd5b5060ca5415610318565b34801561042f57600080fd5b5061038f61043e366004612f51565b610a56565b34801561044f57600080fd5b5060cf5461046390600160a060020a031681565b604051600160a060020a039091168152602001610324565b34801561048757600080fd5b5061038f610496366004612f38565b610a81565b3480156104a757600080fd5b5061038f6104b6366004612f51565b610ba1565b3480156104c757600080fd5b5060d05461046390600160a060020a031681565b3480156104e757600080fd5b5061038f6104f6366004612cb4565b610c2c565b34801561050757600080fd5b5061038f610c68565b34801561051c57600080fd5b5061038f61052b366004612f38565b610c8c565b34801561053c57600080fd5b5061036161054b366004612f38565b60cb6020526000908152604090206001015481565b34801561056c57600080fd5b5061038f61057b36600461303d565b610cc9565b34801561058c57600080fd5b5061038f61059b366004612e05565b610d59565b3480156105ac57600080fd5b5061038f6105bb366004613001565b610de2565b3480156105cc57600080fd5b5060975460ff16610318565b3480156105e457600080fd5b5061038f610e5a565b3480156105f957600080fd5b506103616000805160206135ae83398151915281565b34801561061b57600080fd5b5060ce5461046390600160a060020a031681565b34801561063b57600080fd5b5061038f610f06565b34801561065057600080fd5b5061038f61065f366004612cd1565b610f27565b34801561067057600080fd5b5061036160d75481565b34801561068657600080fd5b5061038f610f6f565b34801561069b57600080fd5b5061038f6106aa366004612cb4565b6110c7565b61038f6106bd366004612d9e565b611108565b3480156106ce57600080fd5b506103186106dd366004612f51565b611438565b3480156106ee57600080fd5b5061036160d25481565b34801561070457600080fd5b5061038f610713366004612f38565b611463565b34801561072457600080fd5b5061036160d55481565b34801561073a57600080fd5b50610361600081565b34801561074f57600080fd5b5061036160008051602061356e83398151915281565b34801561077157600080fd5b50610463610780366004612cb4565b60cd60205260009081526040902054600160a060020a031681565b3480156107a757600080fd5b5061038f6107b6366004612cb4565b611482565b3480156107c757600080fd5b5061036160cc5481565b3480156107dd57600080fd5b5061036160d35481565b3480156107f357600080fd5b5061038f610802366004612f38565b6114be565b34801561081357600080fd5b5061036160008051602061358e83398151915281565b34801561083557600080fd5b5061038f610844366004612f51565b611535565b34801561085557600080fd5b5061038f610864366004612f76565b61155b565b34801561087557600080fd5b50610889610884366004612f38565b611582565b6040516103249190613308565b3480156108a257600080fd5b5061038f6108b1366004612e47565b61163e565b3480156108c257600080fd5b5060d15461046390600160a060020a031681565b3480156108e257600080fd5b5061038f6108f1366004612f38565b6116d7565b34801561090257600080fd5b5061038f610911366004612f38565b6116f6565b61038f610924366004612d0a565b611929565b34801561093557600080fd5b5061038f610944366004612f38565b611d89565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b0000000000000000000000000000000000000000000000000000000014806109d657507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b6000805160206135ae8339815191526109f58133611da8565b610a0185858585611e0f565b5050505050565b60005b81811015610a5057610a3e84848484818110610a2957610a296134b9565b90506020020160208101906108449190612cb4565b80610a4881613485565b915050610a0b565b50505050565b600082815260656020526040902060010154610a728133611da8565b610a7c8383611f30565b505050565b6000805160206135ae833981519152610a9a8133611da8565b60975460ff16610ac85760405160e560020a62461bcd028152600401610abf906131e0565b60405180910390fd5b60cc54821015610aed5760405160e560020a62461bcd028152600401610abf906132ab565b60d554821115610b425760405160e560020a62461bcd02815260206004820152601f60248201527f6576656e744964206d757374206265203c3d20696e7075744576656e744964006044820152606401610abf565b610b4d60018361342b565b60d5555b600082815260cb602052604090206001015415610b9d57600082815260cb6020526040812090610b818282612bd4565b5060006001919091015581610b9581613485565b925050610b51565b5050565b600160a060020a0381163314610c225760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610abf565b610b9d8282611fb6565b6000805160206135ae833981519152610c458133611da8565b5060d08054600160a060020a031916600160a060020a0392909216919091179055565b6000805160206135ae833981519152610c818133611da8565b610c8961201d565b50565b6000805160206135ae833981519152610ca58133611da8565b8160d35460d754610cb6919061340c565b610cc091906133e7565b60d7555060d355565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7610cf48133611da8565b60975460ff1615610d1a5760405160e560020a62461bcd028152600401610abf90613217565b610d238461208c565b60405184907f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b90600090a2610a508383866120f1565b6000805160206135ae833981519152610d728133611da8565b8160005b81811015610a015760cd6000868684818110610d9457610d946134b9565b9050602002016020810190610da99190612cb4565b600160a060020a0316815260208101919091526040016000208054600160a060020a031916905580610dda81613485565b915050610d76565b600054610100900460ff1680610dfb575060005460ff16155b610e1a5760405160e560020a62461bcd028152600401610abf9061324e565b600054610100900460ff16158015610e3c576000805461ffff19166101011790555b610e458261217f565b8015610b9d576000805461ff00191690555050565b60ca54610eac5760405160e560020a62461bcd02815260206004820152600e60248201527f517565756520697320656d7074790000000000000000000000000000000000006044820152606401610abf565b60d68054906000610ebc83613485565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260ca604051610ef0919061313d565b60405180910390a2610f0460ca6000612bd4565b565b60008051602061356e833981519152610f1f8133611da8565b610c896123ab565b6000805160206135ae833981519152610f408133611da8565b50600160a060020a03918216600090815260cd602052604090208054600160a060020a03191691909216179055565b60975460ff1615610f955760405160e560020a62461bcd028152600401610abf90613217565b60cc545b600081815260cb60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561102757600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610fcd565b50505050815260200160018201548152505090508060200151600014806110515750428160200151115b1561105c575060cc55565b805161106790612406565b600082815260cb60205260408120906110808282612bd4565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a250806110bf81613485565b915050610f99565b6000805160206135ae8339815191526110e08133611da8565b50600160a060020a0316600090815260cd602052604090208054600160a060020a0319169055565b60ce54600160a060020a03908116600090815260cd602052604090205416806111765760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e206164647265737300000000000000000000006044820152606401610abf565b61118082846133cf565b34116111d15760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c7565203c3d206665650000000000000000000000000000006044820152606401610abf565b6000826111de853461342b565b6111e8919061342b565b60ce5490915061120590600160a060020a0316878787878661269a565b60cf54604051600160a060020a039091169085156108fc029086906000818181858888f1935050505015801561123f573d6000803e3d6000fd5b5060d054604051600160a060020a039091169084156108fc029085906000818181858888f1935050505015801561127a573d6000803e3d6000fd5b5060ce60009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156112ce57600080fd5b505af11580156112e2573d6000803e3d6000fd5b505060408051606081018252600160a060020a0380881682528c81166020830190815282840188815260ca80546001810182556000918252945160039095027f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee181018054968616600160a060020a031997881617905592517f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee2840180549190951695169490941790925590517f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee39091015560d65491513395507f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f444945061141f9350879087908b908b90958652600160a060020a0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b60405180910390a261142f61282e565b50505050505050565b6000918252606560209081526040808420600160a060020a0393909316845291905290205460ff1690565b6000805160206135ae83398151915261147c8133611da8565b5060d455565b6000805160206135ae83398151915261149b8133611da8565b5060cf8054600160a060020a031916600160a060020a0392909216919091179055565b6000805160206135ae8339815191526114d78133611da8565b60975460ff166114fc5760405160e560020a62461bcd028152600401610abf906131e0565b60cc548210156115215760405160e560020a62461bcd028152600401610abf906132ab565b61152c60018361342b565b60d5555060cc55565b6000828152606560205260409020600101546115518133611da8565b610a7c8383611fb6565b6000838152606560205260409020600101546115778133611da8565b610a508484846128a6565b604080518082019091526060815260006020820152600082815260cb60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b8282101561162557600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016115cb565b5050505081526020016001820154815250509050919050565b3330146116905760405160e560020a62461bcd02815260206004820152601c60248201527f54686973206d6574686f642072657175697265206d756c7469736967000000006044820152606401610abf565b6116a960008051602061356e83398151915285856128a6565b6116c160008051602061358e833981519152836128ee565b6116cc6000336128ee565b610a50600082611535565b6000805160206135ae8339815191526116f08133611da8565b5060c955565b60975460ff161561171c5760405160e560020a62461bcd028152600401610abf90613217565b60cc5481146117705760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e74000000006044820152606401610abf565b600081815260cb60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b828210156117fe57600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016117a4565b505050508152602001600182015481525050905060008160200151116118695760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e7366657273207769746820746869732069646044820152606401610abf565b428160200151106118bf5760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f74207965742070617373656400000000006044820152606401610abf565b80516118ca90612406565b600082815260cb60205260408120906118e38282612bd4565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a26119228260016133cf565b60cc555050565b600085156119be576000805260cd6020527fcd565b10a72538d86f6d352f37ebc5dff31587960b12c0afe00fd03947a6932a54600160a060020a038a81169116146119b95760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e006044820152606401610abf565b611a2a565b50600160a060020a03808916600090815260cd60205260409020541680611a2a5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e206164647265737300000000000000000000006044820152606401610abf565b611a3482846133cf565b3414611a855760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d206665650000000000000000000000000000006044820152606401610abf565b60008711611ad85760405160e560020a62461bcd02815260206004820152601160248201527f43616e6e6f7420776974686472617720300000000000000000000000000000006044820152606401610abf565b611ae689868686868c61269a565b60cf54604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015611b20573d6000803e3d6000fd5b5060d054604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611b5b573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101889052600160a060020a038a16906323b872dd90606401602060405180830381600087803b158015611bc357600080fd5b505af1158015611bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfb9190612f1b565b611c4a5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e73000000000000000000000000006044820152606401610abf565b6040805160608082018352600160a060020a038481168084528c821660208086019182528587018e815260ca8054600181018255600091909152965160039097027f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee181018054988716600160a060020a0319998a1617905592517f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee284018054918716919098161790965594517f42d72674974f694b5f5159593243114d38a5c39c89d6b62fee061ff523240ee39091015560d6548551908152918e16938201939093529283019190915281018890526080810184905260a0810183905233907f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f4449060c00160405180910390a2611d7e61282e565b505050505050505050565b6000805160206135ae833981519152611da28133611da8565b5060d255565b611db28282611438565b610b9d57611dca81600160a060020a031660146128f8565b611dd58360206128f8565b604051602001611de69291906130bc565b60408051601f198184030181529082905260e560020a62461bcd028252610abf916004016131ad565b828114611e875760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d65006064820152608401610abf565b8260005b81811015611f2857838382818110611ea557611ea56134b9565b9050602002016020810190611eba9190612cb4565b60cd6000888885818110611ed057611ed06134b9565b9050602002016020810190611ee59190612cb4565b600160a060020a03908116825260208201929092526040016000208054600160a060020a0319169290911691909117905580611f2081613485565b915050611e8b565b505050505050565b611f3a8282611438565b610b9d576000828152606560209081526040808320600160a060020a03851684529091529020805460ff19166001179055611f723390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611fc08282611438565b15610b9d576000828152606560209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff166120425760405160e560020a62461bcd028152600401610abf906131e0565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60d56000815461209b90613485565b91829055508114610c895760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f726465720000000000000000000000006044820152606401610abf565b60d4546120fe90426133cf565b600082815260cb60205260408120600101919091555b82811015610a5057600082815260cb6020526040902084848381811061213c5761213c6134b9565b83546001810185556000948552602090942060609091029290920192600302909101905061216a82826134eb565b5050808061217790613485565b915050612114565b600054610100900460ff1680612198575060005460ff16155b6121b75760405160e560020a62461bcd028152600401610abf9061324e565b600054610100900460ff161580156121d9576000805461ffff19166101011790555b6121e46000306128ee565b6121fc6000805160206135ae833981519152336128ee565b6122357f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d76122306040850160208601612cb4565b6128ee565b61225960008051602061356e8339815191526122546040850185613386565b6128a6565b61227b60008051602061358e8339815191526122306080850160608601612cb4565b61229d61228b60a0840184613386565b61229860c0860186613386565b611e0f565b6122ad60a0830160808401612cb4565b60ce8054600160a060020a031916600160a060020a03929092169190911790556122da6020830183612cb4565b60d18054600160a060020a031916600160a060020a039290921691909117905561230b610100830160e08401612cb4565b60cf8054600160a060020a031916600160a060020a039290921691909117905561233d61012083016101008401612cb4565b60d08054600160a060020a031916600160a060020a039290921691909117905561016082013560d25561012082013560d381905561014083013560d455600160cc81905560d655600360c95561239390426133e7565b60d7558015610b9d576000805461ff00191690555050565b60975460ff16156123d15760405160e560020a62461bcd028152600401610abf90613217565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861206f3390565b60005b8151811015610b9d576000600160a060020a031682828151811061242f5761242f6134b9565b602002602001015160000151600160a060020a0316141561254b5760ce548251600160a060020a0390911690632e1a7d4d90849084908110612473576124736134b9565b6020026020010151604001516040518263ffffffff1660e060020a0281526004016124a091815260200190565b600060405180830381600087803b1580156124ba57600080fd5b505af11580156124ce573d6000803e3d6000fd5b505050508181815181106124e4576124e46134b9565b602002602001015160200151600160a060020a03166108fc83838151811061250e5761250e6134b9565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015612545573d6000803e3d6000fd5b50612688565b81818151811061255d5761255d6134b9565b602002602001015160000151600160a060020a031663a9059cbb838381518110612589576125896134b9565b6020026020010151602001518484815181106125a7576125a76134b9565b6020026020010151604001516040518363ffffffff1660e060020a0281526004016125e7929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b15801561260157600080fd5b505af1158015612615573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126399190612f1b565b6126885760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e73000000000000000000000000006044820152606401610abf565b8061269281613485565b915050612409565b600080806126aa610708426133e7565b905060005b60c9548110156127e2576040516c01000000000000000000000000600160a060020a038c160260208201526034810183905260548101889052607481018790526094810186905260b40160408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c0160405160208183030381529060405280519060200120935061279a848a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b4992505050565b92506127b460008051602061358e83398151915284611438565b156127c25750505050611f28565b816127cc8161346e565b92505080806127da90613485565b9150506126af565b5060405160e560020a62461bcd02815260206004820152601660248201527f5369676e617475726520636865636b206661696c6564000000000000000000006044820152606401610abf565b600060d3544261283e91906133e7565b905060d7548114610c895760d6805490600061285983613485565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260ca60405161288d919061313d565b60405180910390a26128a160ca6000612bd4565b60d755565b60005b81811015610a50576128dc848484848181106128c7576128c76134b9565b90506020020160208101906122309190612cb4565b806128e681613485565b9150506128a9565b610b9d8282611f30565b6060600061290783600261340c565b6129129060026133cf565b67ffffffffffffffff81111561292a5761292a6134d2565b6040519080825280601f01601f191660200182016040528015612954576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061298b5761298b6134b9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106129ee576129ee6134b9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612a2a84600261340c565b612a359060016133cf565b90505b6001811115612af0577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612a7657612a766134b9565b1a7f010000000000000000000000000000000000000000000000000000000000000002828281518110612aab57612aab6134b9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601090940493612ae98161346e565b9050612a38565b508315612b425760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610abf565b9392505050565b6020810151604082015160608301516000929190831a601b811015612b6c57601b015b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015612bbf573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b5080546000825560030290600052602060002090810190610c8991905b80821115612c23578054600160a060020a03199081168255600182018054909116905560006002820155600301612bf1565b5090565b60008083601f840112612c3957600080fd5b50813567ffffffffffffffff811115612c5157600080fd5b6020830191508360208083028501011115612c6b57600080fd5b9250929050565b60008083601f840112612c8457600080fd5b50813567ffffffffffffffff811115612c9c57600080fd5b602083019150836020828501011115612c6b57600080fd5b600060208284031215612cc657600080fd5b8135612b428161354a565b60008060408385031215612ce457600080fd5b8235612cef8161354a565b91506020830135612cff8161354a565b809150509250929050565b60008060008060008060008060e0898b031215612d2657600080fd5b8835612d318161354a565b97506020890135612d418161354a565b9650604089013595506060890135612d588161355f565b9450608089013567ffffffffffffffff811115612d7457600080fd5b612d808b828c01612c72565b999c989b5096999598969760a08701359660c0013595509350505050565b600080600080600060808688031215612db657600080fd5b8535612dc18161354a565b9450602086013567ffffffffffffffff811115612ddd57600080fd5b612de988828901612c72565b9699909850959660408101359660609091013595509350505050565b60008060208385031215612e1857600080fd5b823567ffffffffffffffff811115612e2f57600080fd5b612e3b85828601612c27565b90969095509350505050565b60008060008060608587031215612e5d57600080fd5b843567ffffffffffffffff811115612e7457600080fd5b612e8087828801612c27565b9095509350506020850135612e948161354a565b91506040850135612ea48161354a565b939692955090935050565b60008060008060408587031215612ec557600080fd5b843567ffffffffffffffff80821115612edd57600080fd5b612ee988838901612c27565b90965094506020870135915080821115612f0257600080fd5b50612f0f87828801612c27565b95989497509550505050565b600060208284031215612f2d57600080fd5b8151612b428161355f565b600060208284031215612f4a57600080fd5b5035919050565b60008060408385031215612f6457600080fd5b823591506020830135612cff8161354a565b600080600060408486031215612f8b57600080fd5b83359250602084013567ffffffffffffffff811115612fa957600080fd5b612fb586828701612c27565b9497909650939450505050565b600060208284031215612fd457600080fd5b81357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612b4257600080fd5b60006020828403121561301357600080fd5b813567ffffffffffffffff81111561302a57600080fd5b82016101808185031215612b4257600080fd5b60008060006040848603121561305257600080fd5b83359250602084013567ffffffffffffffff8082111561307157600080fd5b818601915086601f83011261308557600080fd5b81358181111561309457600080fd5b8760206060830285010111156130a957600080fd5b6020830194508093505050509250925092565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516130f4816017850160208801613442565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613131816028840160208801613442565b01602801949350505050565b60006020808301818452808554808352604092508286019150866000528360002060005b828110156131a0578154600160a060020a0390811685526001808401549091168786015260028301548686015260609094019360039092019101613161565b5091979650505050505050565b60208152600082518060208401526131cc816040850160208701613442565b601f01601f19169190910160400192915050565b60208082526014908201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604082015260600190565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208082526026908201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560408201527f76656e7449640000000000000000000000000000000000000000000000000000606082015260800190565b6000602080835260608084018551604080858801528282518085526080890191508684019450600093505b808410156133705784518051600160a060020a03908116845288820151168884015283015183830152938601936001939093019290850190613333565b5094909701519590960194909452509392505050565b6000808335601e1984360301811261339d57600080fd5b83018035915067ffffffffffffffff8211156133b857600080fd5b6020908101925081023603821315612c6b57600080fd5b600082198211156133e2576133e26134a0565b500190565b6000826134075760e060020a634e487b7102600052601260045260246000fd5b500490565b6000816000190483118215151615613426576134266134a0565b500290565b60008282101561343d5761343d6134a0565b500390565b60005b8381101561345d578181015183820152602001613445565b83811115610a505750506000910152565b60008161347d5761347d6134a0565b506000190190565b6000600019821415613499576134996134a0565b5060010190565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b81356134f68161354a565b8154600160a060020a031916600160a060020a03821617825550602082013561351e8161354a565b600182018054600160a060020a031916600160a060020a03831617905550604082013560028201555050565b600160a060020a0381168114610c8957600080fd5b8015158114610c8957600080fdfeb7f2fcb7a10916921b74b9baa8ea85f89b12ab12f6ededa160998f8b20e65f95516d5e7ed3e60a6b2804c1554cd94bc2eb576e44b192a0e069d4c527589a887ea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a264697066735822122021ae13fe42025722238345005395f6989376a7128dd63e4ffce1ff036d69905464736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "withdraw(address,address,uint256,bool,bytes,uint256,uint256)": {
        "params": {
          "bridgeFee": "Amount (in native coins), payed as bridge earnings",
          "feeSignature": "Signature signed by relay that confirms that the fee values are valid",
          "transferFee": "Amount (in native coins), payed to compensate gas fees in side network"
        }
      },
      "wrapWithdraw(address,bytes,uint256,uint256)": {
        "params": {
          "bridgeFee": "Amount (in native coins), payed as bridge earnings",
          "feeSignature": "Signature signed by relay that confirms that the fee values are valid",
          "toAddress": "Address in side network that will receive the tokens",
          "transferFee": "Amount (in native coins), payed to compensate gas fees in side network"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 609,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 858,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 474,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 565,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6726,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "signatureFeeCheckNumber",
        "offset": 0,
        "slot": "201",
        "type": "t_uint256"
      },
      {
        "astId": 6730,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "queue",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_struct(Transfer)7932_storage)dyn_storage"
      },
      {
        "astId": 6735,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lockedTransfers",
        "offset": 0,
        "slot": "203",
        "type": "t_mapping(t_uint256,t_struct(LockedTransfers)7949_storage)"
      },
      {
        "astId": 6737,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "oldestLockedEventId",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 6741,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "205",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6743,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "206",
        "type": "t_address"
      },
      {
        "astId": 6745,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "transferFeeRecipient",
        "offset": 0,
        "slot": "207",
        "type": "t_address_payable"
      },
      {
        "astId": 6747,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "bridgeFeeRecipient",
        "offset": 0,
        "slot": "208",
        "type": "t_address_payable"
      },
      {
        "astId": 6749,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "sideBridgeAddress",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 6751,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "minSafetyBlocks",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 6753,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "timeframeSeconds",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 6755,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lockTime",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 6757,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "inputEventId",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 6759,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "outputEventId",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 6761,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lastTimeframe",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 7922,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "216",
        "type": "t_array(t_uint256)15_storage"
      },
      {
        "astId": 6656,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "___gap",
        "offset": 0,
        "slot": "231",
        "type": "t_array(t_uint256)15_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Transfer)7932_storage)dyn_storage": {
        "base": "t_struct(Transfer)7932_storage",
        "encoding": "dynamic_array",
        "label": "struct CommonStructs.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)15_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[15]",
        "numberOfBytes": "480"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedTransfers)7949_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonStructs.LockedTransfers)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedTransfers)7949_storage"
      },
      "t_struct(LockedTransfers)7949_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.LockedTransfers",
        "members": [
          {
            "astId": 7946,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "transfers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transfer)7932_storage)dyn_storage"
          },
          {
            "astId": 7948,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transfer)7932_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.Transfer",
        "members": [
          {
            "astId": 7927,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7929,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7931,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}