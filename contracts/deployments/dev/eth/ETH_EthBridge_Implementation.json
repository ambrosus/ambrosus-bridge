{
  "address": "0x944867B67cB2C28302C26df12B8aA01cb32F53Dc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "queue",
          "type": "tuple[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeBridgeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockTime_",
          "type": "uint256"
        }
      ],
      "name": "changeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSafetyBlocks_",
          "type": "uint256"
        }
      ],
      "name": "changeMinSafetyBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signatureFeeCheckNumber_",
          "type": "uint256"
        }
      ],
      "name": "changeSignatureFeeCheckNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframeSeconds_",
          "type": "uint256"
        }
      ],
      "name": "changeTimeframeSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeTransferFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "getLockedTransfers",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonStructs.Transfer[]",
              "name": "transfers",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.LockedTransfers",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getValidatorSet",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sideBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokenThisAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokenSideAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "transferFeeRecipient",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "bridgeFeeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeframeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSafetyBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.ConstructorArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "initialValidators",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "validatorSetAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "lastProcessedBlock",
          "type": "bytes32"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isQueueEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProcessedBlock",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeframe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSafetyBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestLockedEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "removeLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes3",
                  "name": "p0Seal",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes3",
                  "name": "p0Bare",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "receiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes4",
                  "name": "step",
                  "type": "bytes4"
                },
                {
                  "internalType": "bytes",
                  "name": "signature",
                  "type": "bytes"
                },
                {
                  "internalType": "uint64",
                  "name": "finalizedVs",
                  "type": "uint64"
                }
              ],
              "internalType": "struct CheckAura.BlockAura[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receiptProof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "eventId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receiptProof",
                  "type": "bytes[]"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "deltaAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "int64",
                      "name": "deltaIndex",
                      "type": "int64"
                    }
                  ],
                  "internalType": "struct CheckAura.ValidatorSetChange[]",
                  "name": "changes",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CheckAura.ValidatorSetProof[]",
              "name": "vsChanges",
              "type": "tuple[]"
            },
            {
              "internalType": "uint64",
              "name": "transferEventBlock",
              "type": "uint64"
            }
          ],
          "internalType": "struct CheckAura.AuraProof",
          "name": "auraProof",
          "type": "tuple"
        }
      ],
      "name": "submitTransferAura",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeframeSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenSideAddress",
          "type": "address"
        }
      ],
      "name": "tokensAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenSideAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensAddBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        }
      ],
      "name": "tokensRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensRemoveBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "unlockTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validatorSet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unwrapSide",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "transferFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "transferFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        }
      ],
      "name": "wrapWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x187367c02c9194013d043287b8eb4b852348197cba3debeb73340fcb32fd8784",
  "receipt": {
    "to": null,
    "from": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
    "contractAddress": "0x944867B67cB2C28302C26df12B8aA01cb32F53Dc",
    "transactionIndex": 0,
    "gasUsed": "4101790",
    "logsBloom": "0x
    "blockHash": "0x2f6c8c6f1b75a9f2b46def87770b208f6bd2034436fbeb502faf003d2159dbbb",
    "transactionHash": "0x187367c02c9194013d043287b8eb4b852348197cba3debeb73340fcb32fd8784",
    "logs": [],
    "blockNumber": 1204378,
    "cumulativeGasUsed": "4101790",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ec2a577f75e1a23fe3c3313ef7d4d4b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"queue\",\"type\":\"tuple[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeBridgeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks_\",\"type\":\"uint256\"}],\"name\":\"changeMinSafetyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureFeeCheckNumber_\",\"type\":\"uint256\"}],\"name\":\"changeSignatureFeeCheckNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds_\",\"type\":\"uint256\"}],\"name\":\"changeTimeframeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeTransferFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getLockedTransfers\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.LockedTransfers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorSet\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"transferFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"bridgeFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"initialValidators\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"validatorSetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"lastProcessedBlock\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueueEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProcessedBlock\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeframe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSafetyBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestLockedEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"removeLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"p0Seal\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"p0Bare\",\"type\":\"bytes3\"},{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"step\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"finalizedVs\",\"type\":\"uint64\"}],\"internalType\":\"struct CheckAura.BlockAura[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receiptProof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receiptProof\",\"type\":\"bytes[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"deltaAddress\",\"type\":\"address\"},{\"internalType\":\"int64\",\"name\":\"deltaIndex\",\"type\":\"int64\"}],\"internalType\":\"struct CheckAura.ValidatorSetChange[]\",\"name\":\"changes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CheckAura.ValidatorSetProof[]\",\"name\":\"vsChanges\",\"type\":\"tuple[]\"},{\"internalType\":\"uint64\",\"name\":\"transferEventBlock\",\"type\":\"uint64\"}],\"internalType\":\"struct CheckAura.AuraProof\",\"name\":\"auraProof\",\"type\":\"tuple\"}],\"name\":\"submitTransferAura\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSideAddress\",\"type\":\"address\"}],\"name\":\"tokensAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensAddBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"}],\"name\":\"tokensRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensRemoveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"unlockTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorSet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrapSide\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"wrapWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/networks/ETH_EthBridge.sol\":\"ETH_EthBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/checks/CheckAura.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./CheckReceiptsProof.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SignatureCheck.sol\\\";\\n\\n\\n\\ncontract CheckAura is Initializable {\\n    bytes1 constant PARENT_HASH_PREFIX = 0xA0;\\n    bytes1 constant STEP_PREFIX = 0x84;\\n    bytes2 constant SIGNATURE_PREFIX = 0xB841;\\n\\n    address[] public validatorSet;\\n    address validatorSetAddress;\\n    bytes32 public lastProcessedBlock;\\n\\n\\n    struct BlockAura {\\n        bytes3 p0Seal;\\n        bytes3 p0Bare;\\n\\n        bytes32 parentHash;\\n        bytes p2;\\n        bytes32 receiptHash;\\n        bytes p3;\\n\\n        bytes4 step;\\n        bytes signature;  // todo maybe pass s r v values?\\n\\n        uint64 finalizedVs;\\n    }\\n\\n\\n    struct ValidatorSetChange {\\n        address deltaAddress;\\n        int64 deltaIndex; // < 0 ? remove : add\\n    }\\n\\n    struct ValidatorSetProof {\\n        bytes[] receiptProof;\\n        ValidatorSetChange[] changes;\\n    }\\n\\n    struct AuraProof {\\n        BlockAura[] blocks;\\n        CommonStructs.TransferProof transfer;\\n        ValidatorSetProof[] vsChanges;\\n        uint64 transferEventBlock;\\n    }\\n\\n\\n    function __CheckAura_init(\\n        address[] memory initialValidators_,\\n        address validatorSetAddress_,\\n        bytes32 lastProcessedBlock_\\n    ) internal initializer {\\n        require(initialValidators_.length > 0, \\\"Length of _initialValidators must be bigger than 0\\\");\\n\\n        validatorSet = initialValidators_;\\n        validatorSetAddress = validatorSetAddress_;\\n        lastProcessedBlock = lastProcessedBlock_;\\n\\n    }\\n\\n    function checkAura_(AuraProof calldata auraProof, uint minSafetyBlocks, address sideBridgeAddress) internal {\\n\\n        bytes32 parentHash;\\n\\n        bytes32 receiptHash = calcTransferReceiptsHash(auraProof.transfer, sideBridgeAddress);\\n        require(auraProof.blocks[auraProof.transferEventBlock].receiptHash == receiptHash, \\\"Transfer event validation failed\\\");\\n        require(auraProof.blocks.length - auraProof.transferEventBlock >= minSafetyBlocks, \\\"Not enough safety blocks\\\");\\n\\n\\n        for (uint i = 0; i < auraProof.blocks.length; i++) {\\n            BlockAura calldata block_ = auraProof.blocks[i];\\n\\n            if (block_.finalizedVs != 0) {// 0 means no events should be finalized, so indexes are shifted by 1\\n                // vs changes in that block\\n                ValidatorSetProof memory vsProof = auraProof.vsChanges[block_.finalizedVs - 1];\\n\\n                // how many block after event validatorSet should be finalized\\n                uint txsBeforeFinalize = validatorSet.length / 2 + 1;\\n\\n                // apply vs changes\\n                for (uint k = 0; k < vsProof.changes.length; k++)\\n                    applyVsChange(vsProof.changes[k]);\\n\\n                // check proof\\n                receiptHash = calcValidatorSetReceiptHash(vsProof.receiptProof, validatorSetAddress, validatorSet);\\n\\n                // event_block = finalized_block - txsBeforeFinalize\\n                require(auraProof.blocks[i - txsBeforeFinalize].receiptHash == receiptHash, \\\"Wrong VS receipt hash\\\");\\n\\n            }\\n\\n            if (parentHash != bytes32(0))\\n                require(block_.parentHash == parentHash, \\\"Wrong parent hash\\\");\\n\\n            parentHash = checkBlock(block_);\\n\\n            // after proceed vs change event next block in auraProof.blocks can have any parentHash\\n            // (skipping some blocks) but only if it's not the safety blocks for transfer event\\n            if (block_.finalizedVs != 0 && i < auraProof.transferEventBlock)\\n                parentHash = bytes32(0);\\n\\n        }\\n\\n        lastProcessedBlock = parentHash;\\n    }\\n\\n    function getValidatorSet() public view returns (address[] memory) {\\n        return validatorSet;\\n    }\\n\\n    function applyVsChange(ValidatorSetChange memory vsEvent) internal {\\n        if (vsEvent.deltaIndex < 0) {\\n            uint index = uint(int(vsEvent.deltaIndex * (- 1) - 1));\\n            validatorSet[index] = validatorSet[validatorSet.length - 1];\\n            validatorSet.pop();\\n        }\\n        else {\\n            uint index = uint(int((vsEvent.deltaIndex)));\\n\\n            // logic if validatorSet contract will be updated\\n            // validatorSet.push(validatorSet[index]);\\n            // validatorSet[index] = vsEvent.deltaAddress;\\n\\n            // old (current) validatorSet contract logic\\n            validatorSet.push(vsEvent.deltaAddress);\\n        }\\n    }\\n\\n    function checkBlock(BlockAura calldata block_) internal view returns (bytes32) {\\n        (bytes32 bareHash, bytes32 sealHash) = calcBlockHash(block_);\\n\\n        address validator = validatorSet[bytesToUint(block_.step) % validatorSet.length];\\n        require(ecdsaRecover(bareHash, block_.signature) == validator, \\\"Failed to verify sign\\\");\\n\\n        return sealHash;\\n    }\\n\\n    function calcBlockHash(BlockAura calldata block_) internal pure returns (bytes32, bytes32) {\\n        bytes memory commonRlp = abi.encodePacked(PARENT_HASH_PREFIX, block_.parentHash, block_.p2, block_.receiptHash, block_.p3);\\n        return (\\n        // hash without seal (bare), for signature check\\n        keccak256(abi.encodePacked(block_.p0Bare, commonRlp)),\\n        // hash with seal, for prev_hash check\\n        keccak256(abi.encodePacked(block_.p0Seal, commonRlp, STEP_PREFIX, block_.step, SIGNATURE_PREFIX, block_.signature))\\n        );\\n    }\\n\\n\\n    function calcValidatorSetReceiptHash(bytes[] memory receipt_proof, address validatorSetAddress, address[] memory vSet) private pure returns (bytes32) {\\n        bytes32 el = keccak256(abi.encodePacked(\\n                receipt_proof[0],\\n                validatorSetAddress,\\n                receipt_proof[1],\\n                abi.encode(vSet),\\n                receipt_proof[2]\\n            ));\\n        return calcReceiptsHash(receipt_proof, el, 3);\\n    }\\n\\n    function bytesToUint(bytes4 b) internal pure returns (uint){\\n        return uint(uint32(b));\\n    }\\n\\n    uint256[15] private ___gap;\\n}\\n\",\"keccak256\":\"0x55d63e3ac954c2ea29247a97d0570c3e7ef05d78b059f9974f781fd060983487\",\"license\":\"MIT\"},\"contracts/checks/CheckReceiptsProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\n\\n\\n// check readme for focs\\nfunction calcReceiptsHash(bytes[] memory proof, bytes32 el, uint proofStart) pure returns (bytes32) {\\n    bytes memory s;\\n\\n    for (uint i = proofStart; i < proof.length; i += 2) {\\n        s = abi.encodePacked(proof[i], el, proof[i + 1]);\\n        el = (s.length > 32) ? keccak256(s) : bytes32(s);\\n    }\\n\\n    return el;\\n}\\n\\n\\nfunction calcTransferReceiptsHash(CommonStructs.TransferProof memory p, address eventContractAddress) pure returns (bytes32) {\\n    bytes32 el = keccak256(abi.encodePacked(\\n            p.receiptProof[0],\\n            eventContractAddress,\\n            p.receiptProof[1],\\n            toBinary(p.eventId),\\n            p.receiptProof[2],\\n            abi.encode(p.transfers),\\n            p.receiptProof[3]\\n        ));\\n    return calcReceiptsHash(p.receiptProof, el, 4);\\n    // start from proof[4]\\n}\\n\\n\\nfunction toBinary(uint _x) pure returns (bytes memory) {\\n    bytes memory b = new bytes(32);\\n    assembly {\\n        mstore(add(b, 32), _x)\\n    }\\n    uint i;\\n    for (i = 0; i < 32; i++) {\\n        if (b[i] != 0) {\\n            break;\\n        }\\n    }\\n    bytes memory res = new bytes(32 - i);\\n    for (uint j = 0; j < res.length; j++) {\\n        res[j] = b[i++];\\n    }\\n    return res;\\n}\\n\",\"keccak256\":\"0x862ceb1c0c84eafa3895ba004095c77a23a97723596a719b52c0e405d48e593a\",\"license\":\"MIT\"},\"contracts/checks/SignatureCheck.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nfunction ecdsaRecover(bytes32 messageHash, bytes memory signature) pure returns(address) {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n        r := mload(add(signature, 32))\\n        s := mload(add(signature, 64))\\n        v := byte(0, mload(add(signature, 96)))\\n        if lt(v, 27) {v := add(v, 27)}\\n    }\\n    return ecrecover(messageHash, v, r, s);\\n}\",\"keccak256\":\"0xf2fc94ba778fd8bf82abbe6df91b229b14b31aa1585a49a5ad8d4ee00af76423\"},\"contracts/common/CommonBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./CommonStructs.sol\\\";\\nimport \\\"../tokens/IWrapper.sol\\\";\\nimport \\\"../checks/SignatureCheck.sol\\\";\\n\\n\\ncontract CommonBridge is Initializable, AccessControlUpgradeable, PausableUpgradeable {\\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n\\n    uint private constant SIGNATURE_FEE_TIMESTAMP = 1800;  // 30 min\\n\\n    // queue to be pushed in another network\\n    CommonStructs.Transfer[] queue;\\n\\n    // locked transfers from another network\\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\\n    uint public oldestLockedEventId;  // head index of lockedTransfers 'queue' mapping\\n\\n\\n    // this network to side network token addresses mapping\\n    mapping(address => address) public tokenAddresses;\\n    address public wrapperAddress;\\n\\n    address payable transferFeeRecipient;\\n    address payable bridgeFeeRecipient;\\n\\n    address public sideBridgeAddress;\\n    uint public minSafetyBlocks;\\n    uint public timeframeSeconds;\\n    uint public lockTime;\\n\\n    uint public inputEventId; // last processed event from side network\\n    uint outputEventId;  // last created event in this network. start from 1 coz 0 consider already processed\\n\\n    uint public lastTimeframe; // timestamp / timeframeSeconds of latest withdraw\\n\\n    uint internal signatureFeeCheckNumber;\\n\\n    event Withdraw(address indexed from, uint eventId, address tokenFrom, address tokenTo, uint amount,\\n                   uint transferFeeAmount, uint bridgeFeeAmount);\\n    event Transfer(uint indexed eventId, CommonStructs.Transfer[] queue);\\n    event TransferSubmit(uint indexed eventId);\\n    event TransferFinish(uint indexed eventId);\\n\\n    function __CommonBridge_init(CommonStructs.ConstructorArgs memory args) internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(RELAY_ROLE, args.relayAddress);\\n        _setupRole(ADMIN_ROLE, args.adminAddress);\\n\\n        // initialise tokenAddresses with start values\\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\\n        wrapperAddress = args.wrappingTokenAddress;\\n\\n        sideBridgeAddress = args.sideBridgeAddress;\\n        transferFeeRecipient = args.transferFeeRecipient;\\n        bridgeFeeRecipient = args.bridgeFeeRecipient;\\n        minSafetyBlocks = args.minSafetyBlocks;\\n        timeframeSeconds = args.timeframeSeconds;\\n        lockTime = args.lockTime;\\n\\n        oldestLockedEventId = 1;\\n        outputEventId = 1;\\n\\n        signatureFeeCheckNumber = 3;\\n    }\\n\\n    function wrapWithdraw(address toAddress, bytes calldata signature, uint transferFee, uint bridgeFee) public payable {\\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\\n        require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value > transferFee + bridgeFee, \\\"Sent value <= fee\\\");\\n\\n        feeCheck(wrapperAddress, signature, transferFee, bridgeFee);\\n        transferFeeRecipient.transfer(transferFee);\\n        bridgeFeeRecipient.transfer(bridgeFee);\\n\\n        uint amount = msg.value - transferFee - bridgeFee;\\n        IWrapper(wrapperAddress).deposit{value : amount}();\\n\\n        //\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, address(0), tokenSideAddress, amount, transferFee, bridgeFee);\\n\\n        withdrawFinish();\\n    }\\n\\n    function withdraw(\\n        address tokenThisAddress,\\n        address toAddress,\\n        uint amount,\\n        bool unwrapSide,\\n        bytes calldata signature,\\n        uint transferFee,\\n        uint bridgeFee\\n    ) payable public {\\n        address tokenSideAddress;\\n        if (unwrapSide) {\\n            require(tokenAddresses[address(0)] == tokenThisAddress, \\\"Token not point to native token\\\");\\n            // tokenSideAddress will be 0x0000000000000000000000000000000000000000 - for native token\\n        } else {\\n            tokenSideAddress = tokenAddresses[tokenThisAddress];\\n            require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n        }\\n\\n        require(msg.value == transferFee + bridgeFee, \\\"Sent value != fee\\\");\\n\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        feeCheck(tokenThisAddress, signature, transferFee, bridgeFee);\\n        transferFeeRecipient.transfer(transferFee);\\n        bridgeFeeRecipient.transfer(bridgeFee);\\n\\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \\\"Fail transfer coins\\\");\\n\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, tokenThisAddress, tokenSideAddress, amount, transferFee, bridgeFee);\\n\\n        withdrawFinish();\\n    }\\n\\n\\n    function feeCheck(\\n        address token,\\n        bytes calldata signature,\\n        uint transferFee,\\n        uint bridgeFee\\n    ) internal {\\n        bytes32 messageHash;\\n        address signer;\\n        uint timestampEpoch = block.timestamp / SIGNATURE_FEE_TIMESTAMP;\\n\\n        for (uint i = 0; i < signatureFeeCheckNumber; i++) {\\n            messageHash = keccak256(abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    keccak256(abi.encodePacked(\\n                        token,\\n                        timestampEpoch,\\n                        transferFee,\\n                        bridgeFee\\n                    ))\\n                ));\\n\\n            signer = ecdsaRecover(messageHash, signature);\\n            if (hasRole(RELAY_ROLE, signer)) {\\n                return;\\n            } else {\\n                timestampEpoch--;\\n            }\\n        }\\n        revert(\\\"Signature check failed\\\");\\n    }\\n\\n    function triggerTransfers() public {\\n        require(queue.length != 0, \\\"Queue is empty\\\");\\n\\n        emit Transfer(outputEventId++, queue);\\n        delete queue;\\n    }\\n\\n    function withdrawFinish() internal {\\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\\n        if (nowTimeframe != lastTimeframe) {\\n            emit Transfer(outputEventId++, queue);\\n            delete queue;\\n\\n            lastTimeframe = nowTimeframe;\\n        }\\n    }\\n\\n\\n    // locked transfers from another network\\n    function getLockedTransfers(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\\n        return lockedTransfers[eventId];\\n    }\\n\\n\\n    function proceedTransfers(CommonStructs.Transfer[] memory transfers) internal {\\n        for (uint i = 0; i < transfers.length; i++) {\\n\\n            if (transfers[i].tokenAddress == address(0)) {// native token\\n                IWrapper(wrapperAddress).withdraw(transfers[i].amount);\\n                payable(transfers[i].toAddress).transfer(transfers[i].amount);\\n            } else {// ERC20 token\\n                require(\\n                    IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount),\\n                    \\\"Fail transfer coins\\\");\\n            }\\n\\n        }\\n    }\\n\\n\\n    // submitted transfers save here for `lockTime` period\\n    function lockTransfers(CommonStructs.Transfer[] memory events, uint eventId) internal {\\n        lockedTransfers[eventId].endTimestamp = block.timestamp + lockTime;\\n        for (uint i = 0; i < events.length; i++)\\n            lockedTransfers[eventId].transfers.push(events[i]);\\n    }\\n\\n    // after `lockTime` period, transfers can  be unlocked\\n    function unlockTransfers(uint eventId) public whenNotPaused {\\n        require(eventId == oldestLockedEventId, \\\"can unlock only oldest event\\\");\\n\\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n        require(transfersLocked.endTimestamp > 0, \\\"no locked transfers with this id\\\");\\n        require(transfersLocked.endTimestamp < block.timestamp, \\\"lockTime has not yet passed\\\");\\n\\n        proceedTransfers(transfersLocked.transfers);\\n\\n        delete lockedTransfers[eventId];\\n        emit TransferFinish(eventId);\\n\\n        oldestLockedEventId = eventId + 1;\\n    }\\n\\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\\n    function unlockTransfersBatch() public whenNotPaused {\\n        uint eventId = oldestLockedEventId;\\n        for (;; eventId++) {\\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\\n\\n            proceedTransfers(transfersLocked.transfers);\\n\\n            delete lockedTransfers[eventId];\\n            emit TransferFinish(eventId);\\n        }\\n        oldestLockedEventId = eventId;\\n    }\\n\\n    // delete transfers with passed eventId and all after it\\n    function removeLockedTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(eventId >= oldestLockedEventId, \\\"eventId must be >= oldestLockedEventId\\\");\\n        for (; lockedTransfers[eventId].endTimestamp != 0; eventId++)\\n            delete lockedTransfers[eventId];\\n        inputEventId = eventId-1; // pretend like we don't receive that event\\n    }\\n\\n    function isQueueEmpty() public view returns (bool) {\\n        return queue.length == 0;\\n    }\\n\\n\\n    // admin setters\\n\\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\\n        minSafetyBlocks = minSafetyBlocks_;\\n    }\\n\\n    function changeTransferFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        transferFeeRecipient = feeRecipient_;\\n    }\\n\\n    function changeBridgeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        bridgeFeeRecipient = feeRecipient_;\\n    }\\n\\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\\n        timeframeSeconds = timeframeSeconds_;\\n    }\\n\\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\\n        lockTime = lockTime_;\\n    }\\n\\n    function changeSignatureFeeCheckNumber(uint signatureFeeCheckNumber_) public onlyRole(ADMIN_ROLE) {\\n        signatureFeeCheckNumber = signatureFeeCheckNumber_;\\n    }\\n\\n    // token addressed mapping\\n\\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\\n    }\\n\\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\\n        delete tokenAddresses[tokenThisAddress];\\n    }\\n\\n    function tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\\n    }\\n\\n    function _tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) private {\\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \\\"sizes of tokenThisAddresses and tokenSideAddresses must be same\\\");\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\\n    }\\n\\n    function tokensRemoveBatch(address[] memory tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            delete tokenAddresses[tokenThisAddresses[i]];\\n    }\\n\\n    // pause\\n\\n    function pause() public onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // internal\\n\\n    function checkEventId(uint eventId) internal {\\n        require(eventId == ++inputEventId, \\\"EventId out of order\\\");\\n    }\\n\\n    receive() external payable {}  // need to receive native token from wrapper contract\\n\\n    uint256[15] private __gap;\\n}\\n\",\"keccak256\":\"0x28fbebe65ce599455db6ee81b7d94cf47368e06e7610aee796869c68cb41d08f\",\"license\":\"MIT\"},\"contracts/common/CommonStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary CommonStructs {\\n    struct Transfer {\\n        address tokenAddress;\\n        address toAddress;\\n        uint amount;\\n    }\\n\\n    struct TransferProof {\\n        bytes[] receiptProof;\\n        uint eventId;\\n        Transfer[] transfers;\\n    }\\n\\n    struct LockedTransfers {\\n        Transfer[] transfers;\\n        uint endTimestamp;\\n    }\\n\\n    struct ConstructorArgs {\\n        address sideBridgeAddress; address adminAddress;\\n        address relayAddress; address wrappingTokenAddress;\\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\\n        address payable transferFeeRecipient; address payable bridgeFeeRecipient;\\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0x28d5af974ae78442cecd33b7fa3d09ad44a0776a91ba35d02ef4751d66251d5c\",\"license\":\"MIT\"},\"contracts/networks/ETH_EthBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonBridge.sol\\\";\\nimport \\\"../checks/CheckAura.sol\\\";\\n\\n\\ncontract ETH_EthBridge is CommonBridge, CheckAura {\\n\\n    function initialize(\\n        CommonStructs.ConstructorArgs memory args,\\n        address[] memory initialValidators,\\n        address validatorSetAddress,\\n        bytes32 lastProcessedBlock\\n    ) public initializer {\\n        __CommonBridge_init(args);\\n        __CheckAura_init(initialValidators, validatorSetAddress, lastProcessedBlock);\\n    }\\n\\n    function submitTransferAura(AuraProof calldata auraProof) public onlyRole(RELAY_ROLE) whenNotPaused {\\n        emit TransferSubmit(auraProof.transfer.eventId);\\n        checkEventId(auraProof.transfer.eventId);\\n        checkAura_(auraProof, minSafetyBlocks, sideBridgeAddress);\\n        lockTransfers(auraProof.transfer.transfers, auraProof.transfer.eventId);\\n    }\\n}\\n\",\"keccak256\":\"0xb683bf3549d420105fe5edb9cb0f10509cdbe7bf00dff16ec62ad3d71242b48b\",\"license\":\"MIT\"},\"contracts/tokens/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWrapper {\\n    event Deposit(address indexed dst, uint amount);\\n    event Withdrawal(address indexed src, uint amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n}\\n\",\"keccak256\":\"0xbe5bc17241b9a14b78e18e4562e2a4c02e2b941fae0f1a896bbd795e49af136e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614964806100206000396000f3fe60806040526004361061027a5760003560e060020a90048063853890ae11610153578063b87330e9116100c5578063e64808f31161007e578063e64808f314610750578063f33fe10f14610770578063f700558714610790578063f862b7eb146107b0578063f8b74433146107d0578063fd5d2ef3146107e357600080fd5b8063b87330e914610695578063ba8bbbe0146106b5578063baeebe75146106cb578063cf331250146106e1578063d547741f14610703578063e31be0871461072357600080fd5b806391d148541161011757806391d14854146105de578063924cf6e0146105fe57806396cf52271461061457806399b5bb6414610634578063a217fddf1461064a578063b6d3385e1461065f57600080fd5b8063853890ae1461056057806386d7679e146105805780638ac1f86f146105965780638e5df9c7146105ab57806391c5bc0a146105cb57600080fd5b806336568abe116101ec5780635249a705116101b05780635249a705146104a45780635c975abb146104c4578063746b5c42146104dc57806375b238fc146104f15780637df8b802146105135780638456cb591461054b57600080fd5b806336568abe146103ff5780633928b2961461041f5780633f4ba83a1461043f57806342180fb8146104545780634a1856de1461047457600080fd5b806312c5efb81161023e57806312c5efb814610343578063248a9ca3146103635780632bbba847146103935780632f2ff15d146103a9578063331a891a146103c957806333de61d2146103e957600080fd5b806301ffc9a71461028657806304421823146102bb57806309fce356146102eb5780630d6680871461030d578063119b980d1461032357600080fd5b3661028157005b600080fd5b34801561029257600080fd5b506102a66102a1366004613b0d565b610803565b60405190151581526020015b60405180910390f35b3480156102c757600080fd5b506102dd6000805160206148ef83398151915281565b6040519081526020016102b2565b3480156102f757600080fd5b5061030b610306366004613a0e565b61086c565b005b34801561031957600080fd5b506102dd60d35481565b34801561032f57600080fd5b5061030b61033e366004613b37565b610894565b34801561034f57600080fd5b5061030b61035e366004613b72565b6109d8565b34801561036f57600080fd5b506102dd61037e366004613acf565b60009081526065602052604090206001015490565b34801561039f57600080fd5b5060c954156102a6565b3480156103b557600080fd5b5061030b6103c4366004613ae8565b610a5f565b3480156103d557600080fd5b5061030b6103e4366004613acf565b610a85565b3480156103f557600080fd5b506102dd60e95481565b34801561040b57600080fd5b5061030b61041a366004613ae8565b610bcc565b34801561042b57600080fd5b5061030b61043a366004613888565b610c57565b34801561044b57600080fd5b5061030b610c93565b34801561046057600080fd5b5061030b61046f366004613acf565b610cb7565b34801561048057600080fd5b506102dd61048f366004613acf565b60ca6020526000908152604090206001015481565b3480156104b057600080fd5b5061030b6104bf3660046139d9565b610cd6565b3480156104d057600080fd5b5060975460ff166102a6565b3480156104e857600080fd5b5061030b610d5b565b3480156104fd57600080fd5b506102dd60008051602061490f83398151915281565b34801561051f57600080fd5b5060cd5461053390600160a060020a031681565b604051600160a060020a0390911681526020016102b2565b34801561055757600080fd5b5061030b610e07565b34801561056c57600080fd5b5061030b61057b3660046138a5565b610e28565b34801561058c57600080fd5b506102dd60d65481565b3480156105a257600080fd5b5061030b610e70565b3480156105b757600080fd5b5061030b6105c6366004613888565b610fc8565b61030b6105d9366004613972565b611009565b3480156105ea57600080fd5b506102a66105f9366004613ae8565b611337565b34801561060a57600080fd5b506102dd60d15481565b34801561062057600080fd5b5061030b61062f366004613acf565b611362565b34801561064057600080fd5b506102dd60d45481565b34801561065657600080fd5b506102dd600081565b34801561066b57600080fd5b5061053361067a366004613888565b60cc60205260009081526040902054600160a060020a031681565b3480156106a157600080fd5b5061030b6106b0366004613888565b611381565b3480156106c157600080fd5b506102dd60cb5481565b3480156106d757600080fd5b506102dd60d25481565b3480156106ed57600080fd5b506106f66113bd565b6040516102b291906140ad565b34801561070f57600080fd5b5061030b61071e366004613ae8565b61141f565b34801561072f57600080fd5b5061074361073e366004613acf565b611445565b6040516102b29190614244565b34801561075c57600080fd5b5061053361076b366004613acf565b611501565b34801561077c57600080fd5b5060d05461053390600160a060020a031681565b34801561079c57600080fd5b5061030b6107ab366004613acf565b61152b565b3480156107bc57600080fd5b5061030b6107cb366004613acf565b61154a565b61030b6107de3660046138de565b61177d565b3480156107ef57600080fd5b5061030b6107fe366004613acf565b611bdc565b6000600160e060020a031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061086657507f01ffc9a700000000000000000000000000000000000000000000000000000000600160e060020a03198316145b92915050565b60008051602061490f8339815191526108858133611bfb565b61088f8383611c62565b505050565b6000805160206148ef8339815191526108ad8133611bfb565b60975460ff16156108dc5760405160e560020a62461bcd0281526004016108d3906141b0565b60405180910390fd5b6108e96020830183614370565b602001357f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b60405160405180910390a26109326109296020840184614370565b60200135611d78565b60d15460d05461094c918491600160a060020a0316611ddd565b6109d461095c6020840184614370565b61096a9060408101906142bf565b808060200260200160405190810160405280939291908181526020016000905b828210156109b6576109a760608302860136819003810190613ccb565b8152602001906001019061098a565b50505050508380602001906109cb9190614370565b6020013561221f565b5050565b600054610100900460ff16806109f1575060005460ff16155b610a105760405160e560020a62461bcd0281526004016108d3906141e7565b600054610100900460ff16158015610a32576000805461ffff19166101011790555b610a3b856122e2565b610a4684848461242d565b8015610a58576000805461ff00191690555b5050505050565b600082815260656020526040902060010154610a7b8133611bfb565b61088f838361254c565b60008051602061490f833981519152610a9e8133611bfb565b60975460ff16610af35760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108d3565b60cb54821015610b6e5760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e744964000000000000000000000000000000000000000000000000000060648201526084016108d3565b600082815260ca602052604090206001015415610bba57600082815260ca6020526040812090610b9e82826135b6565b5060006001919091015581610bb28161481f565b925050610b6e565b610bc5600183614595565b60d4555050565b600160a060020a0381163314610c4d5760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108d3565b6109d482826125d2565b60008051602061490f833981519152610c708133611bfb565b5060cf8054600160a060020a031916600160a060020a0392909216919091179055565b60008051602061490f833981519152610cac8133611bfb565b610cb4612639565b50565b60008051602061490f833981519152610cd08133611bfb565b5060d255565b60008051602061490f833981519152610cef8133611bfb565b815160005b81811015610d555760cc6000858381518110610d1257610d12614899565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610d4d8161481f565b915050610cf4565b50505050565b60c954610dad5760405160e560020a62461bcd02815260206004820152600e60248201527f517565756520697320656d70747900000000000000000000000000000000000060448201526064016108d3565b60d58054906000610dbd8361481f565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c9604051610df1919061410d565b60405180910390a2610e0560c960006135b6565b565b60008051602061490f833981519152610e208133611bfb565b610cb46126d8565b60008051602061490f833981519152610e418133611bfb565b50600160a060020a03918216600090815260cc602052604090208054600160a060020a03191691909216179055565b60975460ff1615610e965760405160e560020a62461bcd0281526004016108d3906141b0565b60cb545b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610f2857600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610ece565b5050505081526020016001820154815250509050806020015160001480610f525750428160200151115b15610f5d575060cb55565b8051610f6890612733565b600082815260ca6020526040812090610f8182826135b6565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610fc08161481f565b915050610e9a565b60008051602061490f833981519152610fe18133611bfb565b50600160a060020a0316600090815260cc602052604090208054600160a060020a0319169055565b60cd54600160a060020a03908116600090815260cc602052604090205416806110775760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108d3565b6110818284614461565b34116110d25760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c7565203c3d2066656500000000000000000000000000000060448201526064016108d3565b60cd546110eb90600160a060020a0316868686866129c7565b60ce54604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015611125573d6000803e3d6000fd5b5060cf54604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611160573d6000803e3d6000fd5b5060008261116e8534614595565b6111789190614595565b905060cd60009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156111cd57600080fd5b505af11580156111e1573d6000803e3d6000fd5b505060408051606081018252600160a060020a0380881682528c81166020830190815282840188815260c980546001810182556000918252945160039095027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054968616600160a060020a031997881617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d29840180549190951695169490941790925590517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55491513395507f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f444945061131e9350879087908b908b90958652600160a060020a0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b60405180910390a261132e612b53565b50505050505050565b6000918252606560209081526040808420600160a060020a0393909316845291905290205460ff1690565b60008051602061490f83398151915261137b8133611bfb565b5060d355565b60008051602061490f83398151915261139a8133611bfb565b5060ce8054600160a060020a031916600160a060020a0392909216919091179055565b606060e780548060200260200160405190810160405280929190818152602001828054801561141557602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116113f7575b5050505050905090565b60008281526065602052604090206001015461143b8133611bfb565b61088f83836125d2565b604080518082019091526060815260006020820152600082815260ca60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b828210156114e857600084815260209081902060408051606081018252600386029092018054600160a060020a0390811684526001808301549091168486015260029091015491830191909152908352909201910161148e565b5050505081526020016001820154815250509050919050565b60e7818154811061151157600080fd5b600091825260209091200154600160a060020a0316905081565b60008051602061490f8339815191526115448133611bfb565b5060d755565b60975460ff16156115705760405160e560020a62461bcd0281526004016108d3906141b0565b60cb5481146115c45760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e740000000060448201526064016108d3565b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561165257600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016115f8565b505050508152602001600182015481525050905060008160200151116116bd5760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e73666572732077697468207468697320696460448201526064016108d3565b428160200151106117135760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f742079657420706173736564000000000060448201526064016108d3565b805161171e90612733565b600082815260ca602052604081209061173782826135b6565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2611776826001614461565b60cb555050565b60008515611812576000805260cc6020527f435daec636ce435a90bde0aeec309a303a359a854c5a51b7d6a5a941d6db609454600160a060020a038a811691161461180d5760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e0060448201526064016108d3565b61187e565b50600160a060020a03808916600090815260cc6020526040902054168061187e5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108d3565b6118888284614461565b34146118d95760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d2066656500000000000000000000000000000060448201526064016108d3565b6000871161192c5760405160e560020a62461bcd02815260206004820152601160248201527f43616e6e6f74207769746864726177203000000000000000000000000000000060448201526064016108d3565b61193989868686866129c7565b60ce54604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015611973573d6000803e3d6000fd5b5060cf54604051600160a060020a039091169083156108fc029084906000818181858888f193505050501580156119ae573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101889052600160a060020a038a16906323b872dd90606401602060405180830381600087803b158015611a1657600080fd5b505af1158015611a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4e9190613a72565b611a9d5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108d3565b6040805160608082018352600160a060020a038481168084528c821660208086019182528587018e815260c98054600181018255600091909152965160039097027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054988716600160a060020a0319998a1617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2984018054918716919098161790965594517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d5548551908152918e16938201939093529283019190915281018890526080810184905260a0810183905233907f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f4449060c00160405180910390a2611bd1612b53565b505050505050505050565b60008051602061490f833981519152611bf58133611bfb565b5060d155565b611c058282611337565b6109d457611c1d81600160a060020a03166014612bcb565b611c28836020612bcb565b604051602001611c3992919061402c565b60408051601f198184030181529082905260e560020a62461bcd0282526108d39160040161417d565b8051825114611cdc5760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d650060648201526084016108d3565b815160005b81811015610d5557828181518110611cfb57611cfb614899565b602002602001015160cc6000868481518110611d1957611d19614899565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611d709061481f565b915050611ce1565b60d460008154611d879061481f565b91829055508114610cb45760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f7264657200000000000000000000000060448201526064016108d3565b600080611dff611df06020870187614370565b611df9906145fe565b84612db8565b905080611e0c8680614276565b611e1c6080890160608a01613ce7565b67ffffffffffffffff16818110611e3557611e35614899565b9050602002810190611e47919061434f565b6080013514611e9b5760405160e560020a62461bcd02815260206004820181905260248201527f5472616e73666572206576656e742076616c69646174696f6e206661696c656460448201526064016108d3565b83611eac6080870160608801613ce7565b67ffffffffffffffff16611ec08780614276565b611ecb929150614595565b1015611f1c5760405160e560020a62461bcd02815260206004820152601860248201527f4e6f7420656e6f7567682073616665747920626c6f636b73000000000000000060448201526064016108d3565b60005b611f298680614276565b90508110156122155736611f3d8780614276565b83818110611f4d57611f4d614899565b9050602002810190611f5f919061434f565b9050611f7361012082016101008301613ce7565b67ffffffffffffffff161561214f576000611f916040890189614276565b6001611fa561012086016101008701613ce7565b611faf91906145ac565b67ffffffffffffffff16818110611fc857611fc8614899565b9050602002810190611fda9190614386565b611fe3906146d8565b60e754909150600090611ff890600290614479565b612003906001614461565b905060005b82602001515181101561204d5761203b8360200151828151811061202e5761202e614899565b6020026020010151612ead565b806120458161481f565b915050612008565b50815160e85460e78054604080516020808402820181019092528281526120c09594600160a060020a031693909290918301828280156120b657602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311612098575b5050505050612fe9565b9450846120cd8a80614276565b6120d78488614595565b8181106120e6576120e6614899565b90506020028101906120f8919061434f565b608001351461214c5760405160e560020a62461bcd02815260206004820152601560248201527f57726f6e6720565320726563656970742068617368000000000000000000000060448201526064016108d3565b50505b83156121ab57838160400135146121ab5760405160e560020a62461bcd02815260206004820152601160248201527f57726f6e6720706172656e74206861736800000000000000000000000000000060448201526064016108d3565b6121b48161309f565b93506121c861012082016101008301613ce7565b67ffffffffffffffff16158015906121f857506121eb6080880160608901613ce7565b67ffffffffffffffff1682105b1561220257600093505b508061220d8161481f565b915050611f1f565b505060e955505050565b60d35461222c9042614461565b600082815260ca60205260408120600101919091555b825181101561088f57600082815260ca60205260409020835184908390811061226d5761226d614899565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a03938416178255938301519481018054909416949091169390931790915560400151600290910155806122da8161481f565b915050612242565b600054610100900460ff16806122fb575060005460ff16155b61231a5760405160e560020a62461bcd0281526004016108d3906141e7565b600054610100900460ff1615801561233c576000805461ffff19166101011790555b6123476000336131bb565b6123636000805160206148ef83398151915283604001516131bb565b61237f60008051602061490f83398151915283602001516131bb565b61239182608001518360a00151611c62565b606082015160cd8054600160a060020a03928316600160a060020a031991821617909155835160d0805491841691831691909117905560c084015160ce805491841691831691909117905560e084015160cf805491909316911617905561014082015160d15561010082015160d25561012082015160d355600160cb81905560d555600360d75580156109d4576000805461ff00191690555050565b600054610100900460ff1680612446575060005460ff16155b6124655760405160e560020a62461bcd0281526004016108d3906141e7565b600054610100900460ff16158015612487576000805461ffff19166101011790555b60008451116125015760405160e560020a62461bcd02815260206004820152603260248201527f4c656e677468206f66205f696e697469616c56616c696461746f7273206d757360448201527f7420626520626967676572207468616e2030000000000000000000000000000060648201526084016108d3565b83516125149060e79060208701906135d7565b5060e88054600160a060020a031916600160a060020a03851617905560e98290558015610d55576000805461ff001916905550505050565b6125568282611337565b6109d4576000828152606560209081526040808320600160a060020a03851684529091529020805460ff1916600117905561258e3390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6125dc8282611337565b156109d4576000828152606560209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff1661268e5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108d3565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60975460ff16156126fe5760405160e560020a62461bcd0281526004016108d3906141b0565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586126bb3390565b60005b81518110156109d4576000600160a060020a031682828151811061275c5761275c614899565b602002602001015160000151600160a060020a031614156128785760cd548251600160a060020a0390911690632e1a7d4d908490849081106127a0576127a0614899565b6020026020010151604001516040518263ffffffff1660e060020a0281526004016127cd91815260200190565b600060405180830381600087803b1580156127e757600080fd5b505af11580156127fb573d6000803e3d6000fd5b5050505081818151811061281157612811614899565b602002602001015160200151600160a060020a03166108fc83838151811061283b5761283b614899565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015612872573d6000803e3d6000fd5b506129b5565b81818151811061288a5761288a614899565b602002602001015160000151600160a060020a031663a9059cbb8383815181106128b6576128b6614899565b6020026020010151602001518484815181106128d4576128d4614899565b6020026020010151604001516040518363ffffffff1660e060020a028152600401612914929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b15801561292e57600080fd5b505af1158015612942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129669190613a72565b6129b55760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108d3565b806129bf8161481f565b915050612736565b600080806129d761070842614479565b905060005b60d754811015612b07576040516c01000000000000000000000000600160a060020a038b1602602082015260348101839052605481018790526074810186905260940160408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c01604051602081830303815290604052805190602001209350612ac08489898080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506131c592505050565b9250612ada6000805160206148ef83398151915284611337565b15612ae85750505050610a58565b81612af281614808565b92505080612aff8161481f565b9150506129dc565b5060405160e560020a62461bcd02815260206004820152601660248201527f5369676e617475726520636865636b206661696c65640000000000000000000060448201526064016108d3565b600060d25442612b639190614479565b905060d6548114610cb45760d58054906000612b7e8361481f565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c9604051612bb2919061410d565b60405180910390a2612bc660c960006135b6565b60d655565b60606000612bda836002614524565b612be5906002614461565b67ffffffffffffffff811115612bfd57612bfd6148b2565b6040519080825280601f01601f191660200182016040528015612c27576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612c5e57612c5e614899565b6020010190600160f860020a031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612ca957612ca9614899565b6020010190600160f860020a031916908160001a9053506000612ccd846002614524565b612cd8906001614461565b90505b6001811115612d5f577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612d1957612d19614899565b1a60f860020a02828281518110612d3257612d32614899565b6020010190600160f860020a031916908160001a905350601090940493612d5881614808565b9050612cdb565b508315612db15760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108d3565b9392505050565b6000808360000151600081518110612dd257612dd2614899565b6020026020010151838560000151600181518110612df257612df2614899565b6020026020010151612e078760200151613250565b875180516002908110612e1c57612e1c614899565b60200260200101518860400151604051602001612e3991906140fa565b6040516020818303038152906040528960000151600381518110612e5f57612e5f614899565b6020026020010151604051602001612e7d9796959493929190613f4a565b604051602081830303815290604052805190602001209050612ea584600001518260046133b8565b949350505050565b6000816020015160070b1215612f9757600060018260200151600019612ed3919061448d565b612edd9190614543565b60070b905060e7600160e780549050612ef69190614595565b81548110612f0657612f06614899565b60009182526020909120015460e78054600160a060020a039092169183908110612f3257612f32614899565b9060005260206000200160006101000a815481600160a060020a030219169083600160a060020a0316021790555060e7805480612f7157612f71614880565b60008281526020902081016000199081018054600160a060020a03191690550190555050565b5160e780546001810182556000919091527f6cb0db1d7354dfb4a1464318006df0643cafe2002a86a29ff8560f900fef28a1018054600160a060020a031916600160a060020a03909216919091179055565b60008084600081518110612fff57612fff614899565b6020026020010151848660018151811061301b5761301b614899565b60200260200101518560405160200161303491906140ad565b6040516020818303038152906040528860028151811061305657613056614899565b6020026020010151604051602001613072959493929190613ecb565b604051602081830303815290604052805190602001209050613096858260036133b8565b95945050505050565b60008060006130ad84613468565b60e780549294509092506000916130dd6130cd60e0890160c08a01613b0d565b60e060020a900463ffffffff1690565b6130e7919061483a565b815481106130f7576130f7614899565b600091825260209091200154600160a060020a031690508061315a8461312060e0890189614308565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506131c592505050565b600160a060020a0316146131b35760405160e560020a62461bcd02815260206004820152601560248201527f4661696c656420746f20766572696679207369676e000000000000000000000060448201526064016108d3565b509392505050565b6109d4828261254c565b6020810151604082015160608301516000929190831a601b8110156131e857601b015b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa15801561323b573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b60208110156132e75781818151811061329957613299614899565b60209101015160f860020a90819004027fff0000000000000000000000000000000000000000000000000000000000000016156132d5576132e7565b806132df8161481f565b91505061327e565b60006132f4826020614595565b67ffffffffffffffff81111561330c5761330c6148b2565b6040519080825280601f01601f191660200182016040528015613336576020820181803683370190505b50905060005b81518110156133af5783836133508161481f565b94508151811061336257613362614899565b602001015160f860020a900460f860020a0282828151811061338657613386614899565b6020010190600160f860020a031916908160001a905350806133a78161481f565b91505061333c565b50949350505050565b60006060825b855181101561345e578581815181106133d9576133d9614899565b602002602001015185878360016133f09190614461565b8151811061340057613400614899565b602002602001015160405160200161341a93929190613ff5565b604051602081830303815290604052915060208251116134425761343d826145d5565b61344a565b815160208301205b9450613457600282614461565b90506133be565b5092949350505050565b600080807fa000000000000000000000000000000000000000000000000000000000000000604085013561349f6060870187614308565b60808801356134b160a08a018a614308565b6040516020016134c79796959493929190613d6e565b60408051601f198184030181529181529091506134e990850160208601613a8f565b816040516020016134fb929190613dcb565b60408051601f1981840301815291905280516020918201209061352090860186613a8f565b827f840000000000000000000000000000000000000000000000000000000000000061355260e0890160c08a01613b0d565b7fb84100000000000000000000000000000000000000000000000000000000000061358060e08b018b614308565b6040516020016135969796959493929190613e11565b604051602081830303815290604052805190602001209250925050915091565b5080546000825560030290600052602060002090810190610cb4919061363c565b82805482825590600052602060002090810192821561362c579160200282015b8281111561362c5782518254600160a060020a031916600160a060020a039091161782556020909201916001909101906135f7565b5061363892915061366f565b5090565b5b80821115613638578054600160a060020a0319908116825560018201805490911690556000600282015560030161363d565b5b808211156136385760008155600101613670565b803561368f816148cb565b919050565b600082601f8301126136a557600080fd5b813560206136ba6136b58361443d565b61440c565b82815281810190858301838502870184018810156136d757600080fd5b60005b858110156136ff5781356136ed816148cb565b845292840192908401906001016136da565b5090979650505050505050565b6000601f838184011261371e57600080fd5b8235602061372e6136b58361443d565b828152818101908683018385028801840189101561374b57600080fd5b60005b858110156137e357813567ffffffffffffffff8082111561376e57600080fd5b818b0191508b603f83011261378257600080fd5b86820135604082821115613798576137986148b2565b6137a9828c01601f19168a0161440c565b92508183528d818386010111156137bf57600080fd5b818185018a850137506000908201880152855250928401929084019060010161374e565b509098975050505050505050565b60008083601f84011261380357600080fd5b50813567ffffffffffffffff81111561381b57600080fd5b60208301915083602082850101111561383357600080fd5b9250929050565b60006060828403121561384c57600080fd5b61385461439c565b90508135613861816148cb565b81526020820135613871816148cb565b806020830152506040820135604082015292915050565b60006020828403121561389a57600080fd5b8135612db1816148cb565b600080604083850312156138b857600080fd5b82356138c3816148cb565b915060208301356138d3816148cb565b809150509250929050565b60008060008060008060008060e0898b0312156138fa57600080fd5b8835613905816148cb565b97506020890135613915816148cb565b965060408901359550606089013561392c816148e0565b9450608089013567ffffffffffffffff81111561394857600080fd5b6139548b828c016137f1565b999c989b5096999598969760a08701359660c0013595509350505050565b60008060008060006080868803121561398a57600080fd5b8535613995816148cb565b9450602086013567ffffffffffffffff8111156139b157600080fd5b6139bd888289016137f1565b9699909850959660408101359660609091013595509350505050565b6000602082840312156139eb57600080fd5b813567ffffffffffffffff811115613a0257600080fd5b612ea584828501613694565b60008060408385031215613a2157600080fd5b823567ffffffffffffffff80821115613a3957600080fd5b613a4586838701613694565b93506020850135915080821115613a5b57600080fd5b50613a6885828601613694565b9150509250929050565b600060208284031215613a8457600080fd5b8151612db1816148e0565b600060208284031215613aa157600080fd5b81357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612db157600080fd5b600060208284031215613ae157600080fd5b5035919050565b60008060408385031215613afb57600080fd5b8235915060208301356138d3816148cb565b600060208284031215613b1f57600080fd5b8135600160e060020a031981168114612db157600080fd5b600060208284031215613b4957600080fd5b813567ffffffffffffffff811115613b6057600080fd5b820160808185031215612db157600080fd5b60008060008060808587031215613b8857600080fd5b843567ffffffffffffffff80821115613ba057600080fd5b908601906101608289031215613bb557600080fd5b613bbd6143c5565b613bc683613684565b8152613bd460208401613684565b6020820152613be560408401613684565b6040820152613bf660608401613684565b6060820152608083013582811115613c0d57600080fd5b613c198a828601613694565b60808301525060a083013582811115613c3157600080fd5b613c3d8a828601613694565b60a083015250613c4f60c08401613684565b60c0820152613c6060e08401613684565b60e082015261010083810135908201526101208084013590820152610140928301359281019290925290945060208601359080821115613c9f57600080fd5b50613cac87828801613694565b935050613cbb60408601613684565b9396929550929360600135925050565b600060608284031215613cdd57600080fd5b612db1838361383a565b600060208284031215613cf957600080fd5b813567ffffffffffffffff81168114612db157600080fd5b600081518084526020808501945080840160005b83811015613d635781518051600160a060020a0390811689528482015116848901526040908101519088015260609096019590820190600101613d25565b509495945050505050565b7fff0000000000000000000000000000000000000000000000000000000000000088168152866001820152848660218301378481016021810185905260009083856041830137600093016041019283525090979650505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316815260008251613e038160038501602087016147dc565b919091016003019392505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198816815260008751613e49816003850160208c016147dc565b7fff000000000000000000000000000000000000000000000000000000000000008816600391840191820152600160e060020a0319871660048201527fffff000000000000000000000000000000000000000000000000000000000000861660088201528385600a83013760009301600a019283525090979650505050505050565b60008651613edd818460208b016147dc565b600160a060020a0387166c01000000000000000000000000029083019081528551613f0f816014840160208a016147dc565b8551910190613f258160148401602089016147dc565b8451910190613f3b8160148401602088016147dc565b01601401979650505050505050565b600088516020613f5d8285838e016147dc565b81840191506c01000000000000000000000000600160a060020a038b1602825260148951613f9081838601858e016147dc565b8951930192613fa481838601858d016147dc565b8851930192613fb881838601858c016147dc565b8751930192613fcc81838601858b016147dc565b8651930192613fe081838601858a016147dc565b929092019091019a9950505050505050505050565b600084516140078184602089016147dc565b8201848152835161401f8160208085019088016147dc565b0160200195945050505050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516140648160178501602088016147dc565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516140a18160288401602088016147dc565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156140ee578351600160a060020a0316835292840192918401916001016140c9565b50909695505050505050565b602081526000612db16020830184613d11565b60006020808301818452808554808352604092508286019150866000528360002060005b82811015614170578154600160a060020a0390811685526001808401549091168786015260028301548686015260609094019360039092019101614131565b5091979650505050505050565b602081526000825180602084015261419c8160408501602087016147dc565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020815260008251604060208401526142606060840182613d11565b9050602084015160408401528091505092915050565b6000808335601e1984360301811261428d57600080fd5b83018035915067ffffffffffffffff8211156142a857600080fd5b602090810192508102360382131561383357600080fd5b6000808335601e198436030181126142d657600080fd5b83018035915067ffffffffffffffff8211156142f157600080fd5b602001915060608102360382131561383357600080fd5b6000808335601e1984360301811261431f57600080fd5b83018035915067ffffffffffffffff82111561433a57600080fd5b60200191503681900382131561383357600080fd5b6000823561011e1983360301811261436657600080fd5b9190910192915050565b60008235605e1983360301811261436657600080fd5b60008235603e1983360301811261436657600080fd5b6040516060810167ffffffffffffffff811182821017156143bf576143bf6148b2565b60405290565b604051610160810167ffffffffffffffff811182821017156143bf576143bf6148b2565b6040805190810167ffffffffffffffff811182821017156143bf576143bf6148b2565b604051601f8201601f1916810167ffffffffffffffff81118282101715614435576144356148b2565b604052919050565b600067ffffffffffffffff821115614457576144576148b2565b5060209081020190565b600082198211156144745761447461484e565b500190565b60008261448857614488614867565b500490565b60008160070b8360070b677fffffffffffffff6000821360008413838304851182821616156144be576144be61484e565b677fffffffffffffff1960008512828116878305871216156144e2576144e261484e565b600087129250858205871284841616156144fe576144fe61484e565b858505871281841616156145145761451461484e565b5050509290910295945050505050565b600081600019048311821515161561453e5761453e61484e565b500290565b60008160070b8360070b6000811281677fffffffffffffff190183128115161561456f5761456f61484e565b81677fffffffffffffff01831381161561458b5761458b61484e565b5090039392505050565b6000828210156145a7576145a761484e565b500390565b600067ffffffffffffffff838116908316818110156145cd576145cd61484e565b039392505050565b805160208083015191908110156145f8578060200360080260020a600003821691505b50919050565b6000606080833603121561461157600080fd5b61461961439c565b833567ffffffffffffffff8082111561463157600080fd5b61463d3683880161370c565b835260209150818601358284015260408601358181111561465d57600080fd5b8601905036601f82011261467057600080fd5b803561467e6136b58261443d565b818152838101908385013688850286018701111561469b57600080fd5b600094505b838510156146c6576146b2368261383a565b8352600194909401939185019187016146a0565b50604086015250929695505050505050565b600060408083360312156146eb57600080fd5b6146f36143e9565b833567ffffffffffffffff8082111561470b57600080fd5b6147173683880161370c565b835260209150818601358181111561472e57600080fd5b8601905036601f82011261474157600080fd5b803561474f6136b58261443d565b818152838101908385013688850286018701111561476c57600080fd5b600094505b838510156147c95787813603121561478857600080fd5b6147906143e9565b813561479b816148cb565b815281870135600781900b81146147b157600080fd5b81880152835260019490940193918501918701614771565b5093850193909352509195945050505050565b60005b838110156147f75781810151838201526020016147df565b83811115610d555750506000910152565b6000816148175761481761484e565b506000190190565b60006000198214156148335761483361484e565b5060010190565b60008261484957614849614867565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603160045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610cb457600080fd5b8015158114610cb457600080fdfe077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212203a7132573d559c51e6cc0e4f5acfdb0c76f8598114d25fe955e55e4904f7d00c64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 609,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 858,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 474,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 565,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6774,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "queue",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_struct(Transfer)7833_storage)dyn_storage"
      },
      {
        "astId": 6779,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lockedTransfers",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(LockedTransfers)7850_storage)"
      },
      {
        "astId": 6781,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "oldestLockedEventId",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 6785,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6787,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 6789,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "transferFeeRecipient",
        "offset": 0,
        "slot": "206",
        "type": "t_address_payable"
      },
      {
        "astId": 6791,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "bridgeFeeRecipient",
        "offset": 0,
        "slot": "207",
        "type": "t_address_payable"
      },
      {
        "astId": 6793,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "sideBridgeAddress",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 6795,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "minSafetyBlocks",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 6797,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "timeframeSeconds",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 6799,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lockTime",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 6801,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "inputEventId",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 6803,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "outputEventId",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 6805,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lastTimeframe",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 6807,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "signatureFeeCheckNumber",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 7823,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "216",
        "type": "t_array(t_uint256)15_storage"
      },
      {
        "astId": 2180,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "validatorSet",
        "offset": 0,
        "slot": "231",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2182,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "validatorSetAddress",
        "offset": 0,
        "slot": "232",
        "type": "t_address"
      },
      {
        "astId": 2184,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "lastProcessedBlock",
        "offset": 0,
        "slot": "233",
        "type": "t_bytes32"
      },
      {
        "astId": 2670,
        "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
        "label": "___gap",
        "offset": 0,
        "slot": "234",
        "type": "t_array(t_uint256)15_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Transfer)7833_storage)dyn_storage": {
        "base": "t_struct(Transfer)7833_storage",
        "encoding": "dynamic_array",
        "label": "struct CommonStructs.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)15_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[15]",
        "numberOfBytes": "480"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedTransfers)7850_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonStructs.LockedTransfers)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedTransfers)7850_storage"
      },
      "t_struct(LockedTransfers)7850_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.LockedTransfers",
        "members": [
          {
            "astId": 7847,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "transfers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transfer)7833_storage)dyn_storage"
          },
          {
            "astId": 7849,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transfer)7833_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.Transfer",
        "members": [
          {
            "astId": 7828,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7830,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7832,
            "contract": "contracts/networks/ETH_EthBridge.sol:ETH_EthBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}