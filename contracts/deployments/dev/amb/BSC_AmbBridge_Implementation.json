{
  "address": "0x04C94b69652E492C11bc719542E7Ddff9C2F0CF9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "queue",
          "type": "tuple[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeBridgeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockTime_",
          "type": "uint256"
        }
      ],
      "name": "changeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSafetyBlocks_",
          "type": "uint256"
        }
      ],
      "name": "changeMinSafetyBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signatureFeeCheckNumber_",
          "type": "uint256"
        }
      ],
      "name": "changeSignatureFeeCheckNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframeSeconds_",
          "type": "uint256"
        }
      ],
      "name": "changeTimeframeSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeTransferFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "getLockedTransfers",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonStructs.Transfer[]",
              "name": "transfers",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.LockedTransfers",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sideBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokenThisAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokenSideAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "transferFeeRecipient",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "bridgeFeeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeframeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSafetyBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.ConstructorArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "internalType": "address[]",
          "name": "initialValidators",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "initialEpoch",
          "type": "uint256"
        },
        {
          "internalType": "bytes1",
          "name": "chainId",
          "type": "bytes1"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isQueueEmpty",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeframe",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSafetyBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestLockedEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "removeLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sideBridgeAddress",
          "type": "address"
        }
      ],
      "name": "setSideBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes3",
                  "name": "p0Signed",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes3",
                  "name": "p0Unsigned",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p1",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "receiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "number",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p4Signed",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p4Unsigned",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "extraData",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p5",
                  "type": "bytes"
                }
              ],
              "internalType": "struct CheckPoSA.BlockPoSA[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receiptProof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "eventId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            },
            {
              "internalType": "uint64",
              "name": "transferEventBlock",
              "type": "uint64"
            }
          ],
          "internalType": "struct CheckPoSA.PoSAProof",
          "name": "posaProof",
          "type": "tuple"
        }
      ],
      "name": "submitTransferPoSA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeframeSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenSideAddress",
          "type": "address"
        }
      ],
      "name": "tokensAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenSideAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensAddBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        }
      ],
      "name": "tokensRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensRemoveBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "unlockTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unwrapSide",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "transferFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "transferFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        }
      ],
      "name": "wrapWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x2d5ce20a3e4404cbd55aeae3a9024e5c190a8fe7bf3df2ce7e7271651614f592",
  "receipt": {
    "to": null,
    "from": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
    "contractAddress": "0x04C94b69652E492C11bc719542E7Ddff9C2F0CF9",
    "transactionIndex": 0,
    "gasUsed": "4727138",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x6db481a20682045685f729084db83b9cd319e06ef38eee7b8d245e76ab33d67c",
    "transactionHash": "0x2d5ce20a3e4404cbd55aeae3a9024e5c190a8fe7bf3df2ce7e7271651614f592",
    "logs": [],
    "blockNumber": 367398,
    "cumulativeGasUsed": "4727138",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d4a9b2d57f870bd14069ec61ae9ecba0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"queue\",\"type\":\"tuple[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeBridgeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks_\",\"type\":\"uint256\"}],\"name\":\"changeMinSafetyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureFeeCheckNumber_\",\"type\":\"uint256\"}],\"name\":\"changeSignatureFeeCheckNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds_\",\"type\":\"uint256\"}],\"name\":\"changeTimeframeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeTransferFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getLockedTransfers\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.LockedTransfers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"transferFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"bridgeFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"address[]\",\"name\":\"initialValidators\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"initialEpoch\",\"type\":\"uint256\"},{\"internalType\":\"bytes1\",\"name\":\"chainId\",\"type\":\"bytes1\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isQueueEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeframe\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSafetyBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestLockedEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"removeLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideBridgeAddress\",\"type\":\"address\"}],\"name\":\"setSideBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"p0Signed\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"p0Unsigned\",\"type\":\"bytes3\"},{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p1\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"receiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"number\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4Signed\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4Unsigned\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p5\",\"type\":\"bytes\"}],\"internalType\":\"struct CheckPoSA.BlockPoSA[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receiptProof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"transferEventBlock\",\"type\":\"uint64\"}],\"internalType\":\"struct CheckPoSA.PoSAProof\",\"name\":\"posaProof\",\"type\":\"tuple\"}],\"name\":\"submitTransferPoSA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSideAddress\",\"type\":\"address\"}],\"name\":\"tokensAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensAddBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"}],\"name\":\"tokensRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensRemoveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"unlockTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrapSide\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"wrapWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/networks/BSC_AmbBridge.sol\":\"BSC_AmbBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/checks/CheckPoSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\nimport \\\"./CheckReceiptsProof.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./SignatureCheck.sol\\\";\\n\\n\\ncontract CheckPoSA is Initializable {\\n    uint256 private constant ADDRESS_LENGTH = 20;\\n    uint256 private constant EXTRA_VANITY_LENGTH = 32;\\n    uint256 private constant EXTRA_SEAL_LENGTH = 65;\\n    uint256 private constant EPOCH_LENGTH = 200;\\n    bytes1 constant PARENT_HASH_PREFIX = 0xA0;\\n\\n    mapping(uint => mapping(address => bool)) private allValidators;\\n    uint currentValidatorSet;\\n    uint currentValidatorSetSize;\\n\\n    bytes1 chainId;\\n\\n\\n    struct BlockPoSA {\\n        bytes3 p0Signed;\\n        bytes3 p0Unsigned;\\n\\n        bytes32 parentHash;\\n        bytes p1;\\n        bytes32 receiptHash;\\n        bytes p2;\\n        bytes number;\\n        bytes p3;\\n\\n        bytes p4Signed;\\n        bytes p4Unsigned;\\n        bytes extraData;\\n\\n        bytes p5;\\n    }\\n\\n    struct PoSAProof {\\n        BlockPoSA[] blocks;\\n        CommonStructs.TransferProof transfer;\\n        uint64 transferEventBlock;\\n    }\\n\\n\\n    function __CheckPoSA_init(\\n        address[] memory _initialValidators,\\n        uint _initialEpoch,\\n        bytes1 _chainId\\n    ) internal initializer {\\n        require(_initialValidators.length > 0, \\\"Length of _initialValidators must be bigger than 0\\\");\\n\\n        chainId = _chainId;\\n        currentValidatorSet = _initialEpoch;\\n        currentValidatorSetSize = _initialValidators.length;\\n\\n        for (uint i = 0; i < _initialValidators.length; i++) {\\n            allValidators[currentValidatorSet][_initialValidators[i]] = true;\\n        }\\n    }\\n\\n    function checkPoSA_(PoSAProof calldata posaProof, address sideBridgeAddress) internal {\\n        bytes32 bareHash;\\n        bytes32 sealHash;\\n        uint finalizeVsBlock;\\n        uint nextVsSize;\\n\\n        bytes32 receiptHash = calcTransferReceiptsHash(posaProof.transfer, sideBridgeAddress);\\n        require(posaProof.blocks[posaProof.transferEventBlock].receiptHash == receiptHash, \\\"Transfer event validation failed\\\");\\n\\n        for (uint i = 0; i < posaProof.blocks.length; i++) {\\n            BlockPoSA calldata block_ = posaProof.blocks[i];\\n            (bareHash, sealHash) = calcBlockHash(block_);\\n\\n            require(verifySignature(bareHash, getSignature(block_.extraData)), \\\"invalid signature\\\");\\n\\n\\n            uint blockNumber = bytesToUint(block_.number);\\n\\n            if (blockNumber % EPOCH_LENGTH == 0) {\\n                require(blockNumber / EPOCH_LENGTH == currentValidatorSet + 1, \\\"invalid epoch\\\");\\n\\n                nextVsSize = newValidatorSet(block_.extraData);\\n                finalizeVsBlock = blockNumber + currentValidatorSetSize / 2;\\n            }\\n            else if (blockNumber == finalizeVsBlock) {\\n                currentValidatorSet++;\\n                currentValidatorSetSize = nextVsSize;\\n            }\\n\\n            if (i + 1 != posaProof.blocks.length) {\\n                require(sealHash == posaProof.blocks[i + 1].parentHash, \\\"wrong parent hash\\\");\\n            }\\n        }\\n    }\\n\\n\\n    function calcBlockHash(BlockPoSA calldata block_) internal view returns (bytes32, bytes32) {\\n        bytes memory commonRlp = abi.encodePacked(PARENT_HASH_PREFIX, block_.parentHash, block_.p1, block_.receiptHash, block_.p2, block_.number, block_.p3);\\n        return (\\n        // hash without seal (bare), for signature check\\n        keccak256(abi.encodePacked(block_.p0Unsigned, chainId, commonRlp, block_.p4Unsigned, getExtraDataUnsigned(block_.extraData), block_.p5)),\\n        // hash with seal, for prev_hash check\\n        keccak256(abi.encodePacked(block_.p0Signed, commonRlp, block_.p4Signed, block_.extraData, block_.p5))\\n        );\\n    }\\n\\n    function getSignature(bytes calldata extraData) private pure returns (bytes memory) {\\n        uint start = extraData.length - EXTRA_SEAL_LENGTH;\\n        return extraData[start : start + EXTRA_SEAL_LENGTH];\\n    }\\n\\n    function getExtraDataUnsigned(bytes calldata extraData) private pure returns (bytes memory) {\\n        return extraData[0 : extraData.length - EXTRA_SEAL_LENGTH];\\n    }\\n\\n    function newValidatorSet(bytes calldata extraData) private returns(uint) {\\n        uint nextValidatorSet = currentValidatorSet + 1;\\n        uint endPos = extraData.length - EXTRA_SEAL_LENGTH;\\n\\n        uint nextValidatorSetSize;\\n        for (uint pos = EXTRA_VANITY_LENGTH; pos < endPos; pos += ADDRESS_LENGTH) {\\n            address validator = address(bytes20(extraData[pos : pos + ADDRESS_LENGTH]));\\n            allValidators[nextValidatorSet][validator] = true;\\n            nextValidatorSetSize++;\\n        }\\n\\n        return nextValidatorSetSize;\\n    }\\n\\n    function verifySignature(bytes32 hash, bytes memory signature) private view returns (bool) {\\n        address signer = ecdsaRecover(hash, signature);\\n        return allValidators[currentValidatorSet][signer];\\n    }\\n\\n    function bytesToUint(bytes memory b) private pure returns (uint){\\n        return uint(bytes32(b)) >> (256 - b.length * 8);\\n    }\\n}\\n\",\"keccak256\":\"0x5e8855e39911345e8d8eecd0a7ae6c9190afb647ab6dc9ce14f382ebf5f5a6f4\",\"license\":\"MIT\"},\"contracts/checks/CheckReceiptsProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\n\\n\\n// check readme for focs\\nfunction calcReceiptsHash(bytes[] memory proof, bytes32 el, uint proofStart) pure returns (bytes32) {\\n    bytes memory s;\\n\\n    for (uint i = proofStart; i < proof.length; i += 2) {\\n        s = abi.encodePacked(proof[i], el, proof[i + 1]);\\n        el = (s.length > 32) ? keccak256(s) : bytes32(s);\\n    }\\n\\n    return el;\\n}\\n\\n\\nfunction calcTransferReceiptsHash(CommonStructs.TransferProof memory p, address eventContractAddress) pure returns (bytes32) {\\n    bytes32 el = keccak256(abi.encodePacked(\\n            p.receiptProof[0],\\n            eventContractAddress,\\n            p.receiptProof[1],\\n            toBinary(p.eventId),\\n            p.receiptProof[2],\\n            abi.encode(p.transfers),\\n            p.receiptProof[3]\\n        ));\\n    return calcReceiptsHash(p.receiptProof, el, 4);\\n    // start from proof[4]\\n}\\n\\n\\nfunction toBinary(uint _x) pure returns (bytes memory) {\\n    bytes memory b = new bytes(32);\\n    assembly {\\n        mstore(add(b, 32), _x)\\n    }\\n    uint i;\\n    for (i = 0; i < 32; i++) {\\n        if (b[i] != 0) {\\n            break;\\n        }\\n    }\\n    bytes memory res = new bytes(32 - i);\\n    for (uint j = 0; j < res.length; j++) {\\n        res[j] = b[i++];\\n    }\\n    return res;\\n}\\n\",\"keccak256\":\"0x862ceb1c0c84eafa3895ba004095c77a23a97723596a719b52c0e405d48e593a\",\"license\":\"MIT\"},\"contracts/checks/SignatureCheck.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nfunction ecdsaRecover(bytes32 messageHash, bytes memory signature) pure returns(address) {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n        r := mload(add(signature, 32))\\n        s := mload(add(signature, 64))\\n        v := byte(0, mload(add(signature, 96)))\\n        if lt(v, 27) {v := add(v, 27)}\\n    }\\n    return ecrecover(messageHash, v, r, s);\\n}\",\"keccak256\":\"0xf2fc94ba778fd8bf82abbe6df91b229b14b31aa1585a49a5ad8d4ee00af76423\"},\"contracts/common/CommonBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./CommonStructs.sol\\\";\\nimport \\\"../tokens/IWrapper.sol\\\";\\nimport \\\"../checks/SignatureCheck.sol\\\";\\n\\n\\ncontract CommonBridge is Initializable, AccessControlUpgradeable, PausableUpgradeable {\\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n\\n    uint private constant SIGNATURE_FEE_TIMESTAMP = 1800;  // 30 min\\n\\n    // queue to be pushed in another network\\n    CommonStructs.Transfer[] queue;\\n\\n    // locked transfers from another network\\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\\n    uint public oldestLockedEventId;  // head index of lockedTransfers 'queue' mapping\\n\\n\\n    // this network to side network token addresses mapping\\n    mapping(address => address) public tokenAddresses;\\n    address public wrapperAddress;\\n\\n    address payable transferFeeRecipient;\\n    address payable bridgeFeeRecipient;\\n\\n    address public sideBridgeAddress;\\n    uint public minSafetyBlocks;\\n    uint public timeframeSeconds;\\n    uint public lockTime;\\n\\n    uint public inputEventId; // last processed event from side network\\n    uint outputEventId;  // last created event in this network. start from 1 coz 0 consider already processed\\n\\n    uint public lastTimeframe; // timestamp / timeframeSeconds of latest withdraw\\n\\n    uint internal signatureFeeCheckNumber;\\n\\n    event Withdraw(address indexed from, uint eventId, address tokenFrom, address tokenTo, uint amount,\\n                   uint transferFeeAmount, uint bridgeFeeAmount);\\n    event Transfer(uint indexed eventId, CommonStructs.Transfer[] queue);\\n    event TransferSubmit(uint indexed eventId);\\n    event TransferFinish(uint indexed eventId);\\n\\n    function __CommonBridge_init(CommonStructs.ConstructorArgs memory args) internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(RELAY_ROLE, args.relayAddress);\\n        _setupRole(ADMIN_ROLE, args.adminAddress);\\n\\n        // initialise tokenAddresses with start values\\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\\n        wrapperAddress = args.wrappingTokenAddress;\\n\\n        sideBridgeAddress = args.sideBridgeAddress;\\n        transferFeeRecipient = args.transferFeeRecipient;\\n        bridgeFeeRecipient = args.bridgeFeeRecipient;\\n        minSafetyBlocks = args.minSafetyBlocks;\\n        timeframeSeconds = args.timeframeSeconds;\\n        lockTime = args.lockTime;\\n\\n        oldestLockedEventId = 1;\\n        outputEventId = 1;\\n\\n        signatureFeeCheckNumber = 3;\\n\\n        lastTimeframe = block.timestamp / timeframeSeconds;\\n    }\\n\\n    function wrapWithdraw(address toAddress, bytes calldata signature, uint transferFee, uint bridgeFee) public payable {\\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\\n        require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value > transferFee + bridgeFee, \\\"Sent value <= fee\\\");\\n\\n        uint amount = msg.value - transferFee - bridgeFee;\\n        feeCheck(wrapperAddress, signature, transferFee, bridgeFee, amount);\\n        transferFeeRecipient.transfer(transferFee);\\n        bridgeFeeRecipient.transfer(bridgeFee);\\n\\n        IWrapper(wrapperAddress).deposit{value : amount}();\\n\\n        //\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, address(0), tokenSideAddress, amount, transferFee, bridgeFee);\\n\\n        withdrawFinish();\\n    }\\n\\n    function withdraw(\\n        address tokenThisAddress,\\n        address toAddress,\\n        uint amount,\\n        bool unwrapSide,\\n        bytes calldata signature,\\n        uint transferFee,\\n        uint bridgeFee\\n    ) payable public {\\n        address tokenSideAddress;\\n        if (unwrapSide) {\\n            require(tokenAddresses[address(0)] == tokenThisAddress, \\\"Token not point to native token\\\");\\n            // tokenSideAddress will be 0x0000000000000000000000000000000000000000 - for native token\\n        } else {\\n            tokenSideAddress = tokenAddresses[tokenThisAddress];\\n            require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n        }\\n\\n        require(msg.value == transferFee + bridgeFee, \\\"Sent value != fee\\\");\\n\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        feeCheck(tokenThisAddress, signature, transferFee, bridgeFee, amount);\\n        transferFeeRecipient.transfer(transferFee);\\n        bridgeFeeRecipient.transfer(bridgeFee);\\n\\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \\\"Fail transfer coins\\\");\\n\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, tokenThisAddress, tokenSideAddress, amount, transferFee, bridgeFee);\\n\\n        withdrawFinish();\\n    }\\n\\n\\n    function feeCheck(\\n        address token,\\n        bytes calldata signature,\\n        uint transferFee,\\n        uint bridgeFee,\\n        uint amount\\n    ) internal {\\n        bytes32 messageHash;\\n        address signer;\\n        uint timestampEpoch = block.timestamp / SIGNATURE_FEE_TIMESTAMP;\\n\\n        for (uint i = 0; i < signatureFeeCheckNumber; i++) {\\n            messageHash = keccak256(abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    keccak256(abi.encodePacked(\\n                        token,\\n                        timestampEpoch,\\n                        transferFee,\\n                        bridgeFee,\\n                        amount\\n                    ))\\n                ));\\n\\n            signer = ecdsaRecover(messageHash, signature);\\n            if (hasRole(RELAY_ROLE, signer)) {\\n                return;\\n            } else {\\n                timestampEpoch--;\\n            }\\n        }\\n        revert(\\\"Signature check failed\\\");\\n    }\\n\\n    function triggerTransfers() public {\\n        require(queue.length != 0, \\\"Queue is empty\\\");\\n\\n        emit Transfer(outputEventId++, queue);\\n        delete queue;\\n    }\\n\\n    function withdrawFinish() internal {\\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\\n        if (nowTimeframe != lastTimeframe) {\\n            emit Transfer(outputEventId++, queue);\\n            delete queue;\\n\\n            lastTimeframe = nowTimeframe;\\n        }\\n    }\\n\\n\\n    // locked transfers from another network\\n    function getLockedTransfers(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\\n        return lockedTransfers[eventId];\\n    }\\n\\n\\n    function proceedTransfers(CommonStructs.Transfer[] memory transfers) internal {\\n        for (uint i = 0; i < transfers.length; i++) {\\n\\n            if (transfers[i].tokenAddress == address(0)) {// native token\\n                IWrapper(wrapperAddress).withdraw(transfers[i].amount);\\n                payable(transfers[i].toAddress).transfer(transfers[i].amount);\\n            } else {// ERC20 token\\n                require(\\n                    IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount),\\n                    \\\"Fail transfer coins\\\");\\n            }\\n\\n        }\\n    }\\n\\n\\n    // submitted transfers save here for `lockTime` period\\n    function lockTransfers(CommonStructs.Transfer[] memory events, uint eventId) internal {\\n        lockedTransfers[eventId].endTimestamp = block.timestamp + lockTime;\\n        for (uint i = 0; i < events.length; i++)\\n            lockedTransfers[eventId].transfers.push(events[i]);\\n    }\\n\\n    // after `lockTime` period, transfers can  be unlocked\\n    function unlockTransfers(uint eventId) public whenNotPaused {\\n        require(eventId == oldestLockedEventId, \\\"can unlock only oldest event\\\");\\n\\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n        require(transfersLocked.endTimestamp > 0, \\\"no locked transfers with this id\\\");\\n        require(transfersLocked.endTimestamp < block.timestamp, \\\"lockTime has not yet passed\\\");\\n\\n        proceedTransfers(transfersLocked.transfers);\\n\\n        delete lockedTransfers[eventId];\\n        emit TransferFinish(eventId);\\n\\n        oldestLockedEventId = eventId + 1;\\n    }\\n\\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\\n    function unlockTransfersBatch() public whenNotPaused {\\n        uint eventId = oldestLockedEventId;\\n        for (;; eventId++) {\\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\\n\\n            proceedTransfers(transfersLocked.transfers);\\n\\n            delete lockedTransfers[eventId];\\n            emit TransferFinish(eventId);\\n        }\\n        oldestLockedEventId = eventId;\\n    }\\n\\n    // delete transfers with passed eventId and all after it\\n    function removeLockedTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(eventId >= oldestLockedEventId, \\\"eventId must be >= oldestLockedEventId\\\");\\n        for (; lockedTransfers[eventId].endTimestamp != 0; eventId++)\\n            delete lockedTransfers[eventId];\\n        inputEventId = eventId-1; // pretend like we don't receive that event\\n    }\\n\\n    function isQueueEmpty() public view returns (bool) {\\n        return queue.length == 0;\\n    }\\n\\n\\n    // admin setters\\n\\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\\n        minSafetyBlocks = minSafetyBlocks_;\\n    }\\n\\n    function changeTransferFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        transferFeeRecipient = feeRecipient_;\\n    }\\n\\n    function changeBridgeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        bridgeFeeRecipient = feeRecipient_;\\n    }\\n\\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\\n        lastTimeframe = (lastTimeframe * timeframeSeconds) / timeframeSeconds_;\\n        timeframeSeconds = timeframeSeconds_;\\n    }\\n\\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\\n        lockTime = lockTime_;\\n    }\\n\\n    function changeSignatureFeeCheckNumber(uint signatureFeeCheckNumber_) public onlyRole(ADMIN_ROLE) {\\n        signatureFeeCheckNumber = signatureFeeCheckNumber_;\\n    }\\n\\n    // token addressed mapping\\n\\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\\n    }\\n\\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\\n        delete tokenAddresses[tokenThisAddress];\\n    }\\n\\n    function tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\\n    }\\n\\n    function _tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) private {\\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \\\"sizes of tokenThisAddresses and tokenSideAddresses must be same\\\");\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\\n    }\\n\\n    function tokensRemoveBatch(address[] memory tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            delete tokenAddresses[tokenThisAddresses[i]];\\n    }\\n\\n    // pause\\n\\n    function pause() public onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // internal\\n\\n    function checkEventId(uint eventId) internal {\\n        require(eventId == ++inputEventId, \\\"EventId out of order\\\");\\n    }\\n\\n    receive() external payable {}  // need to receive native token from wrapper contract\\n\\n    uint256[15] private __gap;\\n}\\n\",\"keccak256\":\"0x2435de6f626d2d41cb14c46ccb52f859f1e7ad68c281d523a7285398555ea829\",\"license\":\"MIT\"},\"contracts/common/CommonStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary CommonStructs {\\n    struct Transfer {\\n        address tokenAddress;\\n        address toAddress;\\n        uint amount;\\n    }\\n\\n    struct TransferProof {\\n        bytes[] receiptProof;\\n        uint eventId;\\n        Transfer[] transfers;\\n    }\\n\\n    struct LockedTransfers {\\n        Transfer[] transfers;\\n        uint endTimestamp;\\n    }\\n\\n    struct ConstructorArgs {\\n        address sideBridgeAddress; address adminAddress;\\n        address relayAddress; address wrappingTokenAddress;\\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\\n        address payable transferFeeRecipient; address payable bridgeFeeRecipient;\\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0x28d5af974ae78442cecd33b7fa3d09ad44a0776a91ba35d02ef4751d66251d5c\",\"license\":\"MIT\"},\"contracts/networks/BSC_AmbBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonBridge.sol\\\";\\nimport \\\"../checks/CheckPoSA.sol\\\";\\n\\n\\ncontract BSC_AmbBridge is CommonBridge, CheckPoSA {\\n\\n    function initialize(\\n        CommonStructs.ConstructorArgs memory args,\\n        address[] memory initialValidators,\\n        uint initialEpoch,\\n        bytes1 chainId\\n    ) public initializer {\\n        __CommonBridge_init(args);\\n        __CheckPoSA_init(initialValidators, initialEpoch, chainId);\\n    }\\n\\n    function submitTransferPoSA(PoSAProof calldata posaProof) public onlyRole(RELAY_ROLE) whenNotPaused {\\n        emit TransferSubmit(posaProof.transfer.eventId);\\n        checkEventId(posaProof.transfer.eventId);\\n        checkPoSA_(posaProof, sideBridgeAddress);\\n        lockTransfers(posaProof.transfer.transfers, posaProof.transfer.eventId);\\n    }\\n\\n    function setSideBridge(address _sideBridgeAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(sideBridgeAddress == address(0), \\\"sideBridgeAddress already set\\\");\\n        sideBridgeAddress = _sideBridgeAddress;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x26c9b878641604bc647739a693a2095d17f8940513e09be14dba68693724682d\",\"license\":\"MIT\"},\"contracts/tokens/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWrapper {\\n    event Deposit(address indexed dst, uint amount);\\n    event Withdrawal(address indexed src, uint amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n}\\n\",\"keccak256\":\"0xbe5bc17241b9a14b78e18e4562e2a4c02e2b941fae0f1a896bbd795e49af136e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506144f3806100206000396000f3fe6080604052600436106102645760003560e060020a90048063853890ae11610148578063b6d3385e116100ba578063e31be0871161007e578063e31be087146106f5578063f33fe10f14610722578063f700558714610742578063f862b7eb14610762578063f8b7443314610782578063fd5d2ef31461079557600080fd5b8063b6d3385e14610653578063b87330e914610689578063ba8bbbe0146106a9578063baeebe75146106bf578063d547741f146106d557600080fd5b806391d148541161010c57806391d14854146105b2578063924cf6e0146105d257806396cf5227146105e857806399b5bb6414610608578063a217fddf1461061e578063aa9cea381461063357600080fd5b8063853890ae1461053457806386d7679e146105545780638ac1f86f1461056a5780638e5df9c71461057f57806391c5bc0a1461059f57600080fd5b806336568abe116101e15780635249a705116101a55780635249a705146104785780635c975abb14610498578063746b5c42146104b057806375b238fc146104c55780637df8b802146104e75780638456cb591461051f57600080fd5b806336568abe146103d35780633928b296146103f35780633f4ba83a1461041357806342180fb8146104285780634a1856de1461044857600080fd5b8063248a9ca311610228578063248a9ca31461032d57806329a9659d1461035d5780632bbba8471461037d5780632f2ff15d14610393578063331a891a146103b357600080fd5b806301ffc9a71461027057806304421823146102a557806309fce356146102d55780630d668087146102f757806321d3d5361461030d57600080fd5b3661026b57005b600080fd5b34801561027c57600080fd5b5061029061028b3660046138d5565b6107b5565b60405190151581526020015b60405180910390f35b3480156102b157600080fd5b506102c760008051602061447e83398151915281565b60405190815260200161029c565b3480156102e157600080fd5b506102f56102f03660046137d6565b610848565b005b34801561030357600080fd5b506102c760d35481565b34801561031957600080fd5b506102f5610328366004613650565b610870565b34801561033957600080fd5b506102c7610348366004613897565b60009081526065602052604090206001015490565b34801561036957600080fd5b506102f5610378366004613914565b610900565b34801561038957600080fd5b5060c95415610290565b34801561039f57600080fd5b506102f56103ae3660046138b0565b610987565b3480156103bf57600080fd5b506102f56103ce366004613897565b6109ad565b3480156103df57600080fd5b506102f56103ee3660046138b0565b610af4565b3480156103ff57600080fd5b506102f561040e366004613650565b610b83565b34801561041f57600080fd5b506102f5610bbf565b34801561043457600080fd5b506102f5610443366004613897565b610be3565b34801561045457600080fd5b506102c7610463366004613897565b60ca6020526000908152604090206001015481565b34801561048457600080fd5b506102f56104933660046137a1565b610c20565b3480156104a457600080fd5b5060975460ff16610290565b3480156104bc57600080fd5b506102f5610ca5565b3480156104d157600080fd5b506102c760008051602061449e83398151915281565b3480156104f357600080fd5b5060cd5461050790600160a060020a031681565b604051600160a060020a03909116815260200161029c565b34801561052b57600080fd5b506102f5610d51565b34801561054057600080fd5b506102f561054f36600461366d565b610d72565b34801561056057600080fd5b506102c760d65481565b34801561057657600080fd5b506102f5610dba565b34801561058b57600080fd5b506102f561059a366004613650565b610f12565b6102f56105ad36600461373a565b610f53565b3480156105be57600080fd5b506102906105cd3660046138b0565b611283565b3480156105de57600080fd5b506102c760d15481565b3480156105f457600080fd5b506102f5610603366004613897565b6112ae565b34801561061457600080fd5b506102c760d45481565b34801561062a57600080fd5b506102c7600081565b34801561063f57600080fd5b506102f561064e366004613a6f565b6112cd565b34801561065f57600080fd5b5061050761066e366004613650565b60cc60205260009081526040902054600160a060020a031681565b34801561069557600080fd5b506102f56106a4366004613650565b611401565b3480156106b557600080fd5b506102c760cb5481565b3480156106cb57600080fd5b506102c760d25481565b3480156106e157600080fd5b506102f56106f03660046138b0565b61143d565b34801561070157600080fd5b50610715610710366004613897565b611463565b60405161029c9190613f77565b34801561072e57600080fd5b5060d05461050790600160a060020a031681565b34801561074e57600080fd5b506102f561075d366004613897565b61151f565b34801561076e57600080fd5b506102f561077d366004613897565b61153e565b6102f56107903660046136a6565b611771565b3480156107a157600080fd5b506102f56107b0366004613897565b611bd1565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b00000000000000000000000000000000000000000000000000000000148061084257507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b60008051602061449e8339815191526108618133611bf0565b61086b8383611c57565b505050565b600061087c8133611bf0565b60d054600160a060020a0316156108dd5760405160e560020a62461bcd02815260206004820152601d60248201527f736964654272696467654164647265737320616c72656164792073657400000060448201526064015b60405180910390fd5b5060d08054600160a060020a031916600160a060020a0392909216919091179055565b600054610100900460ff1680610919575060005460ff16155b6109385760405160e560020a62461bcd0281526004016108d490613f1a565b600054610100900460ff1615801561095a576000805461ffff19166101011790555b61096385611d6d565b61096e848484611ec7565b8015610980576000805461ff00191690555b5050505050565b6000828152606560205260409020600101546109a38133611bf0565b61086b838361204a565b60008051602061449e8339815191526109c68133611bf0565b60975460ff16610a1b5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108d4565b60cb54821015610a965760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e744964000000000000000000000000000000000000000000000000000060648201526084016108d4565b600082815260ca602052604090206001015415610ae257600082815260ca6020526040812090610ac68282613451565b5060006001919091015581610ada816143c7565b925050610a96565b610aed6001836141d0565b60d4555050565b600160a060020a0381163314610b755760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108d4565b610b7f82826120d0565b5050565b60008051602061449e833981519152610b9c8133611bf0565b5060cf8054600160a060020a031916600160a060020a0392909216919091179055565b60008051602061449e833981519152610bd88133611bf0565b610be0612137565b50565b60008051602061449e833981519152610bfc8133611bf0565b8160d25460d654610c0d91906141b1565b610c17919061419d565b60d6555060d255565b60008051602061449e833981519152610c398133611bf0565b815160005b81811015610c9f5760cc6000858381518110610c5c57610c5c614428565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610c97816143c7565b915050610c3e565b50505050565b60c954610cf75760405160e560020a62461bcd02815260206004820152600e60248201527f517565756520697320656d70747900000000000000000000000000000000000060448201526064016108d4565b60d58054906000610d07836143c7565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c9604051610d3b9190613e40565b60405180910390a2610d4f60c96000613451565b565b60008051602061449e833981519152610d6a8133611bf0565b610be06121d6565b60008051602061449e833981519152610d8b8133611bf0565b50600160a060020a03918216600090815260cc602052604090208054600160a060020a03191691909216179055565b60975460ff1615610de05760405160e560020a62461bcd0281526004016108d490613ee3565b60cb545b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610e7257600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610e18565b5050505081526020016001820154815250509050806020015160001480610e9c5750428160200151115b15610ea7575060cb55565b8051610eb290612231565b600082815260ca6020526040812090610ecb8282613451565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610f0a816143c7565b915050610de4565b60008051602061449e833981519152610f2b8133611bf0565b50600160a060020a0316600090815260cc602052604090208054600160a060020a0319169055565b60cd54600160a060020a03908116600090815260cc60205260409020541680610fc15760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108d4565b610fcb8284614185565b341161101c5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c7565203c3d2066656500000000000000000000000000000060448201526064016108d4565b60008261102985346141d0565b61103391906141d0565b60cd5490915061105090600160a060020a031687878787866124c5565b60ce54604051600160a060020a039091169085156108fc029086906000818181858888f1935050505015801561108a573d6000803e3d6000fd5b5060cf54604051600160a060020a039091169084156108fc029085906000818181858888f193505050501580156110c5573d6000803e3d6000fd5b5060cd60009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b15801561111957600080fd5b505af115801561112d573d6000803e3d6000fd5b505060408051606081018252600160a060020a0380881682528c81166020830190815282840188815260c980546001810182556000918252945160039095027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054968616600160a060020a031997881617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d29840180549190951695169490941790925590517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55491513395507f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f444945061126a9350879087908b908b90958652600160a060020a0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b60405180910390a261127a612660565b50505050505050565b6000918252606560209081526040808420600160a060020a0393909316845291905290205460ff1690565b60008051602061449e8339815191526112c78133611bf0565b5060d355565b60008051602061447e8339815191526112e68133611bf0565b60975460ff161561130c5760405160e560020a62461bcd0281526004016108d490613ee3565b61131960208301836140a3565b602001357f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b60405160405180910390a261136261135960208401846140a3565b602001356126d8565b60d054611379908390600160a060020a031661273d565b610b7f61138960208401846140a3565b611397906040810190613ff2565b808060200260200160405190810160405280939291908181526020016000905b828210156113e3576113d460608302860136819003810190613aaa565b815260200190600101906113b7565b50505050508380602001906113f891906140a3565b60200135612aa6565b60008051602061449e83398151915261141a8133611bf0565b5060ce8054600160a060020a031916600160a060020a0392909216919091179055565b6000828152606560205260409020600101546114598133611bf0565b61086b83836120d0565b604080518082019091526060815260006020820152600082815260ca60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b8282101561150657600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016114ac565b5050505081526020016001820154815250509050919050565b60008051602061449e8339815191526115388133611bf0565b5060d755565b60975460ff16156115645760405160e560020a62461bcd0281526004016108d490613ee3565b60cb5481146115b85760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e740000000060448201526064016108d4565b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561164657600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016115ec565b505050508152602001600182015481525050905060008160200151116116b15760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e73666572732077697468207468697320696460448201526064016108d4565b428160200151106117075760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f742079657420706173736564000000000060448201526064016108d4565b805161171290612231565b600082815260ca602052604081209061172b8282613451565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a261176a826001614185565b60cb555050565b60008515611806576000805260cc6020527f435daec636ce435a90bde0aeec309a303a359a854c5a51b7d6a5a941d6db609454600160a060020a038a81169116146118015760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e0060448201526064016108d4565b611872565b50600160a060020a03808916600090815260cc602052604090205416806118725760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108d4565b61187c8284614185565b34146118cd5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d2066656500000000000000000000000000000060448201526064016108d4565b600087116119205760405160e560020a62461bcd02815260206004820152601160248201527f43616e6e6f74207769746864726177203000000000000000000000000000000060448201526064016108d4565b61192e89868686868c6124c5565b60ce54604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015611968573d6000803e3d6000fd5b5060cf54604051600160a060020a039091169083156108fc029084906000818181858888f193505050501580156119a3573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101889052600160a060020a038a16906323b872dd90606401602060405180830381600087803b158015611a0b57600080fd5b505af1158015611a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a43919061383a565b611a925760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108d4565b6040805160608082018352600160a060020a038481168084528c821660208086019182528587018e815260c98054600181018255600091909152965160039097027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054988716600160a060020a0319998a1617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2984018054918716919098161790965594517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d5548551908152918e16938201939093529283019190915281018890526080810184905260a0810183905233907f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f4449060c00160405180910390a2611bc6612660565b505050505050505050565b60008051602061449e833981519152611bea8133611bf0565b5060d155565b611bfa8282611283565b610b7f57611c1281600160a060020a03166014612b69565b611c1d836020612b69565b604051602001611c2e929190613dac565b60408051601f198184030181529082905260e560020a62461bcd0282526108d491600401613eb0565b8051825114611cd15760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d650060648201526084016108d4565b815160005b81811015610c9f57828181518110611cf057611cf0614428565b602002602001015160cc6000868481518110611d0e57611d0e614428565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611d65906143c7565b915050611cd6565b600054610100900460ff1680611d86575060005460ff16155b611da55760405160e560020a62461bcd0281526004016108d490613f1a565b600054610100900460ff16158015611dc7576000805461ffff19166101011790555b611dd2600033612d56565b611dee60008051602061447e8339815191528360400151612d56565b611e0a60008051602061449e8339815191528360200151612d56565b611e1c82608001518360a00151611c57565b606082015160cd8054600160a060020a03928316600160a060020a031991821617909155835160d0805491841691831691909117905560c084015160ce805491841691831691909117905560e084015160cf805491909316911617905561014082015160d15561010082015160d281905561012083015160d355600160cb81905560d555600360d755611eaf904261419d565b60d6558015610b7f576000805461ff00191690555050565b600054610100900460ff1680611ee0575060005460ff16155b611eff5760405160e560020a62461bcd0281526004016108d490613f1a565b600054610100900460ff16158015611f21576000805461ffff19166101011790555b6000845111611f9b5760405160e560020a62461bcd02815260206004820152603260248201527f4c656e677468206f66205f696e697469616c56616c696461746f7273206d757360448201527f7420626520626967676572207468616e2030000000000000000000000000000060648201526084016108d4565b60ea805460ff191660f860020a840417905560e8839055835160e95560005b845181101561203257600160e7600060e85481526020019081526020016000206000878481518110611fee57611fee614428565b602090810291909101810151600160a060020a03168252810191909152604001600020805460ff19169115159190911790558061202a816143c7565b915050611fba565b508015610c9f576000805461ff001916905550505050565b6120548282611283565b610b7f576000828152606560209081526040808320600160a060020a03851684529091529020805460ff1916600117905561208c3390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6120da8282611283565b15610b7f576000828152606560209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff1661218c5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108d4565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60975460ff16156121fc5760405160e560020a62461bcd0281526004016108d490613ee3565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586121b93390565b60005b8151811015610b7f576000600160a060020a031682828151811061225a5761225a614428565b602002602001015160000151600160a060020a031614156123765760cd548251600160a060020a0390911690632e1a7d4d9084908490811061229e5761229e614428565b6020026020010151604001516040518263ffffffff1660e060020a0281526004016122cb91815260200190565b600060405180830381600087803b1580156122e557600080fd5b505af11580156122f9573d6000803e3d6000fd5b5050505081818151811061230f5761230f614428565b602002602001015160200151600160a060020a03166108fc83838151811061233957612339614428565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015612370573d6000803e3d6000fd5b506124b3565b81818151811061238857612388614428565b602002602001015160000151600160a060020a031663a9059cbb8383815181106123b4576123b4614428565b6020026020010151602001518484815181106123d2576123d2614428565b6020026020010151604001516040518363ffffffff1660e060020a028152600401612412929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b15801561242c57600080fd5b505af1158015612440573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612464919061383a565b6124b35760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108d4565b806124bd816143c7565b915050612234565b600080806124d56107084261419d565b905060005b60d75481101561260c576040516c01000000000000000000000000600160a060020a038c160260208201526034810183905260548101889052607481018790526094810186905260b40160408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c016040516020818303038152906040528051906020012093506125c5848a8a8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d6092505050565b92506125df60008051602061447e83398151915284611283565b156125ed5750505050612658565b816125f7816143b0565b92505080612604816143c7565b9150506124da565b5060405160e560020a62461bcd02815260206004820152601660248201527f5369676e617475726520636865636b206661696c65640000000000000000000060448201526064016108d4565b505050505050565b600060d25442612670919061419d565b905060d6548114610be05760d5805490600061268b836143c7565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c96040516126bf9190613e40565b60405180910390a26126d360c96000613451565b60d655565b60d4600081546126e7906143c7565b91829055508114610be05760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f7264657200000000000000000000000060448201526064016108d4565b60008080808061276261275360208901896140a3565b61275c90614248565b87612deb565b90508061276f8880613fa9565b61277f60608b0160408c01613ac6565b67ffffffffffffffff1681811061279857612798614428565b90506020028101906127aa9190614082565b60800135146127fe5760405160e560020a62461bcd02815260206004820181905260248201527f5472616e73666572206576656e742076616c69646174696f6e206661696c656460448201526064016108d4565b60005b61280b8880613fa9565b9050811015612a9c573661281f8980613fa9565b8381811061282f5761282f614428565b90506020028101906128419190614082565b905061284c81612ee0565b90975095506128708761286b61286661014085018561403b565b613059565b6130c2565b6128bf5760405160e560020a62461bcd02815260206004820152601160248201527f696e76616c6964207369676e617475726500000000000000000000000000000060448201526064016108d4565b600061290b6128d160c084018461403b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061310192505050565b905061291860c8826143e2565b6129bd5760e85461292a906001614185565b61293560c88361419d565b146129855760405160e560020a62461bcd02815260206004820152600d60248201527f696e76616c69642065706f63680000000000000000000000000000000000000060448201526064016108d4565b61299b61299661014084018461403b565b613134565b9450600260e9546129ac919061419d565b6129b69082614185565b95506129e0565b858114156129e05760e880549060006129d5836143c7565b909155505060e98590555b6129ea8a80613fa9565b90506129f7846001614185565b14612a8757612a068a80613fa9565b612a11856001614185565b818110612a2057612a20614428565b9050602002810190612a329190614082565b604001358714612a875760405160e560020a62461bcd02815260206004820152601160248201527f77726f6e6720706172656e74206861736800000000000000000000000000000060448201526064016108d4565b50508080612a94906143c7565b915050612801565b5050505050505050565b60d354612ab39042614185565b600082815260ca60205260408120600101919091555b825181101561086b57600082815260ca602052604090208351849083908110612af457612af4614428565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a0393841617825593830151948101805490941694909116939093179091556040015160029091015580612b61816143c7565b915050612ac9565b60606000612b788360026141b1565b612b83906002614185565b67ffffffffffffffff811115612b9b57612b9b614441565b6040519080825280601f01601f191660200182016040528015612bc5576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110612bfc57612bfc614428565b6020010190600160f860020a031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612c4757612c47614428565b6020010190600160f860020a031916908160001a9053506000612c6b8460026141b1565b612c76906001614185565b90505b6001811115612cfd577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612cb757612cb7614428565b1a60f860020a02828281518110612cd057612cd0614428565b6020010190600160f860020a031916908160001a905350601090940493612cf6816143b0565b9050612c79565b508315612d4f5760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108d4565b9392505050565b610b7f828261204a565b6020810151604082015160608301516000929190831a601b811015612d8357601b015b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015612dd6573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6000808360000151600081518110612e0557612e05614428565b6020026020010151838560000151600181518110612e2557612e25614428565b6020026020010151612e3a87602001516131f7565b875180516002908110612e4f57612e4f614428565b60200260200101518860400151604051602001612e6c9190613e2d565b6040516020818303038152906040528960000151600381518110612e9257612e92614428565b6020026020010151604051602001612eb09796959493929190613cca565b604051602081830303815290604052805190602001209050612ed88460000151826004613347565b949350505050565b600080807fa0000000000000000000000000000000000000000000000000000000000000006040850135612f17606087018761403b565b6080880135612f2960a08a018a61403b565b612f3660c08c018c61403b565b612f4360e08e018e61403b565b604051602001612f5d9b9a99989796959493929190613b4d565b60408051601f19818403018152918152909150612f7f90850160208601613857565b60ea5460f860020a0282612f9761012088018861403b565b612fad612fa86101408b018b61403b565b6133f7565b612fbb6101608b018b61403b565b604051602001612fd2989796959493929190613bba565b60408051601f19818403018152919052805160209182012090612ff790860186613857565b8261300661010088018861403b565b6130146101408a018a61403b565b6130226101608c018c61403b565b604051602001613039989796959493929190613c4d565b604051602081830303815290604052805190602001209250925050915091565b606060006130686041846141d0565b9050838184613078604183614185565b926130859392919061415b565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092979650505050505050565b6000806130cf8484612d60565b60e854600090815260e760209081526040808320600160a060020a039094168352929052205460ff1691505092915050565b60008151600861311191906141b1565b61311d906101006141d0565b6131268361421f565b60029190910a900492915050565b60008060e85460016131469190614185565b905060006131556041856141d0565b9050600060205b828110156131ed576000878288613174601483614185565b926131819392919061415b565b61318a916141e7565b600086815260e760209081526040808320600160a060020a036c0100000000000000000000000090950494851684529091529020805460ff191660011790559050826131d5816143c7565b935050506014816131e69190614185565b905061315c565b5095945050505050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b60208110156132765781818151811061324057613240614428565b60209101015160f860020a9081900402600160f860020a0319161561326457613276565b8061326e816143c7565b915050613225565b60006132838260206141d0565b67ffffffffffffffff81111561329b5761329b614441565b6040519080825280601f01601f1916602001820160405280156132c5576020820181803683370190505b50905060005b815181101561333e5783836132df816143c7565b9450815181106132f1576132f1614428565b602001015160f860020a900460f860020a0282828151811061331557613315614428565b6020010190600160f860020a031916908160001a90535080613336816143c7565b9150506132cb565b50949350505050565b60006060825b85518110156133ed5785818151811061336857613368614428565b6020026020010151858783600161337f9190614185565b8151811061338f5761338f614428565b60200260200101516040516020016133a993929190613d75565b604051602081830303815290604052915060208251116133d1576133cc8261421f565b6133d9565b815160208301205b94506133e6600282614185565b905061334d565b5092949350505050565b6060826000836134086041826141d0565b926134159392919061415b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929695505050505050565b5080546000825560030290600052602060002090810190610be091905b808211156134a0578054600160a060020a0319908116825560018201805490911690556000600282015560030161346e565b5090565b80356134af8161445a565b919050565b600082601f8301126134c557600080fd5b813560206134da6134d583614137565b614106565b82815281810190858301838502870184018810156134f757600080fd5b60005b8581101561351f57813561350d8161445a565b845292840192908401906001016134fa565b5090979650505050505050565b600082601f83011261353d57600080fd5b8135602061354d6134d583614137565b8281528181019085830160608086028801850189101561356c57600080fd5b60005b86811015613593576135818a84613602565b8552938501939181019160010161356f565b509198975050505050505050565b8035600160f860020a0319811681146134af57600080fd5b60008083601f8401126135cb57600080fd5b50813567ffffffffffffffff8111156135e357600080fd5b6020830191508360208285010111156135fb57600080fd5b9250929050565b60006060828403121561361457600080fd5b61361c6140b9565b905081356136298161445a565b815260208201356136398161445a565b806020830152506040820135604082015292915050565b60006020828403121561366257600080fd5b8135612d4f8161445a565b6000806040838503121561368057600080fd5b823561368b8161445a565b9150602083013561369b8161445a565b809150509250929050565b60008060008060008060008060e0898b0312156136c257600080fd5b88356136cd8161445a565b975060208901356136dd8161445a565b96506040890135955060608901356136f48161446f565b9450608089013567ffffffffffffffff81111561371057600080fd5b61371c8b828c016135b9565b999c989b5096999598969760a08701359660c0013595509350505050565b60008060008060006080868803121561375257600080fd5b853561375d8161445a565b9450602086013567ffffffffffffffff81111561377957600080fd5b613785888289016135b9565b9699909850959660408101359660609091013595509350505050565b6000602082840312156137b357600080fd5b813567ffffffffffffffff8111156137ca57600080fd5b612ed8848285016134b4565b600080604083850312156137e957600080fd5b823567ffffffffffffffff8082111561380157600080fd5b61380d868387016134b4565b9350602085013591508082111561382357600080fd5b50613830858286016134b4565b9150509250929050565b60006020828403121561384c57600080fd5b8151612d4f8161446f565b60006020828403121561386957600080fd5b81357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612d4f57600080fd5b6000602082840312156138a957600080fd5b5035919050565b600080604083850312156138c357600080fd5b82359150602083013561369b8161445a565b6000602082840312156138e757600080fd5b81357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612d4f57600080fd5b6000806000806080858703121561392a57600080fd5b843567ffffffffffffffff8082111561394257600080fd5b90860190610160828903121561395757600080fd5b61395f6140e2565b613968836134a4565b8152613976602084016134a4565b6020820152613987604084016134a4565b6040820152613998606084016134a4565b60608201526080830135828111156139af57600080fd5b6139bb8a8286016134b4565b60808301525060a0830135828111156139d357600080fd5b6139df8a8286016134b4565b60a0830152506139f160c084016134a4565b60c0820152613a0260e084016134a4565b60e082015261010083810135908201526101208084013590820152610140928301359281019290925290945060208601359080821115613a4157600080fd5b50613a4e878288016134b4565b93505060408501359150613a64606086016135a1565b905092959194509250565b600060208284031215613a8157600080fd5b813567ffffffffffffffff811115613a9857600080fd5b820160608185031215612d4f57600080fd5b600060608284031215613abc57600080fd5b612d4f8383613602565b600060208284031215613ad857600080fd5b813567ffffffffffffffff81168114612d4f57600080fd5b600081518084526020808501945080840160005b83811015613b425781518051600160a060020a0390811689528482015116848901526040908101519088015260609096019590820190600101613b04565b509495945050505050565b600160f860020a03198c1681528a6001820152888a602183013788810160218101899052600090878960418301378781019050604181016000815286888237508581019050604181016000815284868237506000930160410192835250909b9a5050505050505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1989168152600160f860020a03198816600382015260008751613c02816004850160208c01614384565b820186886004830137868101905060048101600081528651613c28818360208b01614384565b9190910190508385600483013760009301600401928352509098975050505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198916815260008851613c85816003850160208d01614384565b82018789600383013787810190506003810160008152868882375085810190506003810160008152848682375060009301600301928352509098975050505050505050565b600088516020613cdd8285838e01614384565b81840191506c01000000000000000000000000600160a060020a038b1602825260148951613d1081838601858e01614384565b8951930192613d2481838601858d01614384565b8851930192613d3881838601858c01614384565b8751930192613d4c81838601858b01614384565b8651930192613d6081838601858a01614384565b929092019091019a9950505050505050505050565b60008451613d87818460208901614384565b82018481528351613d9f816020808501908801614384565b0160200195945050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351613de4816017850160208801614384565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351613e21816028840160208801614384565b01602801949350505050565b602081526000612d4f6020830184613af0565b60006020808301818452808554808352604092508286019150866000528360002060005b82811015613ea3578154600160a060020a0390811685526001808401549091168786015260028301548686015260609094019360039092019101613e64565b5091979650505050505050565b6020815260008251806020840152613ecf816040850160208701614384565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b602081526000825160406020840152613f936060840182613af0565b9050602084015160408401528091505092915050565b6000808335601e19843603018112613fc057600080fd5b83018035915067ffffffffffffffff821115613fdb57600080fd5b60209081019250810236038213156135fb57600080fd5b6000808335601e1984360301811261400957600080fd5b83018035915067ffffffffffffffff82111561402457600080fd5b60200191506060810236038213156135fb57600080fd5b6000808335601e1984360301811261405257600080fd5b83018035915067ffffffffffffffff82111561406d57600080fd5b6020019150368190038213156135fb57600080fd5b6000823561017e1983360301811261409957600080fd5b9190910192915050565b60008235605e1983360301811261409957600080fd5b6040516060810167ffffffffffffffff811182821017156140dc576140dc614441565b60405290565b604051610160810167ffffffffffffffff811182821017156140dc576140dc614441565b604051601f8201601f1916810167ffffffffffffffff8111828210171561412f5761412f614441565b604052919050565b600067ffffffffffffffff82111561415157614151614441565b5060209081020190565b6000808585111561416b57600080fd5b8386111561417857600080fd5b5050820193919092039150565b60008219821115614198576141986143f6565b500190565b6000826141ac576141ac61440f565b500490565b60008160001904831182151516156141cb576141cb6143f6565b500290565b6000828210156141e2576141e26143f6565b500390565b6bffffffffffffffffffffffff19813581811691601485101561421757808560140360080260020a820283161692505b505092915050565b80516020808301519190811015614242578060200360080260020a600003821691505b50919050565b60006060823603121561425a57600080fd5b6142626140b9565b823567ffffffffffffffff8082111561427a57600080fd5b90840190601f368184011261428e57600080fd5b8235602061429e6134d583614137565b82815281810190868301368486028901850111156142bb57600080fd5b60005b85811015614348578135888111156142d557600080fd5b890136603f8201126142e657600080fd5b8581013560408a8211156142fc576142fc614441565b61430d828b01601f19168901614106565b828152368284860101111561432157600080fd5b828285018a83013760009281018901929092525085525092840192908401906001016142be565b505087525087810135908601525050604085013591508082111561436b57600080fd5b506143783682860161352c565b60408301525092915050565b60005b8381101561439f578181015183820152602001614387565b83811115610c9f5750506000910152565b6000816143bf576143bf6143f6565b506000190190565b60006000198214156143db576143db6143f6565b5060010190565b6000826143f1576143f161440f565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610be057600080fd5b8015158114610be057600080fdfe077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a26469706673582212205c84823cbbed31b904a379eedda265bf9912f34583a577fc8dc9d8ca97017ae264736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 609,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 858,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 474,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 565,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6774,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "queue",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_struct(Transfer)7854_storage)dyn_storage"
      },
      {
        "astId": 6779,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "lockedTransfers",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(LockedTransfers)7871_storage)"
      },
      {
        "astId": 6781,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "oldestLockedEventId",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 6785,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6787,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 6789,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "transferFeeRecipient",
        "offset": 0,
        "slot": "206",
        "type": "t_address_payable"
      },
      {
        "astId": 6791,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "bridgeFeeRecipient",
        "offset": 0,
        "slot": "207",
        "type": "t_address_payable"
      },
      {
        "astId": 6793,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "sideBridgeAddress",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 6795,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "minSafetyBlocks",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 6797,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "timeframeSeconds",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 6799,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "lockTime",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 6801,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "inputEventId",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 6803,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "outputEventId",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 6805,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "lastTimeframe",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 6807,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "signatureFeeCheckNumber",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 7844,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "216",
        "type": "t_array(t_uint256)15_storage"
      },
      {
        "astId": 2700,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "allValidators",
        "offset": 0,
        "slot": "231",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2702,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "currentValidatorSet",
        "offset": 0,
        "slot": "232",
        "type": "t_uint256"
      },
      {
        "astId": 2704,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "currentValidatorSetSize",
        "offset": 0,
        "slot": "233",
        "type": "t_uint256"
      },
      {
        "astId": 2706,
        "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
        "label": "chainId",
        "offset": 0,
        "slot": "234",
        "type": "t_bytes1"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Transfer)7854_storage)dyn_storage": {
        "base": "t_struct(Transfer)7854_storage",
        "encoding": "dynamic_array",
        "label": "struct CommonStructs.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)15_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[15]",
        "numberOfBytes": "480"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes1": {
        "encoding": "inplace",
        "label": "bytes1",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(LockedTransfers)7871_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonStructs.LockedTransfers)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedTransfers)7871_storage"
      },
      "t_struct(LockedTransfers)7871_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.LockedTransfers",
        "members": [
          {
            "astId": 7868,
            "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
            "label": "transfers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transfer)7854_storage)dyn_storage"
          },
          {
            "astId": 7870,
            "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transfer)7854_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.Transfer",
        "members": [
          {
            "astId": 7849,
            "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7851,
            "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7853,
            "contract": "contracts/networks/BSC_AmbBridge.sol:BSC_AmbBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}