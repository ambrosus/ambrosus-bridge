{
  "address": "0xa9138FCe8E667C54B810bB0335439CCC91219eC8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "queue",
          "type": "tuple[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "transferFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bridgeFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeBridgeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockTime_",
          "type": "uint256"
        }
      ],
      "name": "changeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSafetyBlocks_",
          "type": "uint256"
        }
      ],
      "name": "changeMinSafetyBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "signatureFeeCheckNumber_",
          "type": "uint256"
        }
      ],
      "name": "changeSignatureFeeCheckNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframeSeconds_",
          "type": "uint256"
        }
      ],
      "name": "changeTimeframeSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeTransferFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "getLockedTransfers",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonStructs.Transfer[]",
              "name": "transfers",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.LockedTransfers",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sideBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokenThisAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokenSideAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address payable",
              "name": "transferFeeRecipient",
              "type": "address"
            },
            {
              "internalType": "address payable",
              "name": "bridgeFeeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeframeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSafetyBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.ConstructorArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "minimumDifficulty",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochIndex",
          "type": "uint256"
        }
      ],
      "name": "isEpochDataSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSafetyBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestLockedEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "removeLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fullSizeIn128Resultion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "branchDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "merkleNodes",
          "type": "uint256[]"
        }
      ],
      "name": "setEpochData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sideBridgeAddress",
          "type": "address"
        }
      ],
      "name": "setSideBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes3",
                  "name": "p0WithNonce",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes3",
                  "name": "p0WithoutNonce",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes",
                  "name": "p1",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentOrReceiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "difficulty",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "number",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p4",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p5",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "nonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p6",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256[]",
                  "name": "dataSetLookup",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "witnessForLookup",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct CheckPoW.BlockPoW[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receiptProof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "eventId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            }
          ],
          "internalType": "struct CheckPoW.PoWProof",
          "name": "powProof",
          "type": "tuple"
        }
      ],
      "name": "submitTransferPoW",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeframeSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenSideAddress",
          "type": "address"
        }
      ],
      "name": "tokensAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenSideAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensAddBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        }
      ],
      "name": "tokensRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensRemoveBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "triggerTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "unlockTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unwrapSide",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "transferFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "transferFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "bridgeFee",
          "type": "uint256"
        }
      ],
      "name": "wrapWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6207ef7a5a23ed795230fa610bbcafd270513019ee0c07429e4cfd236c8f843a",
  "receipt": {
    "to": null,
    "from": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
    "contractAddress": "0xa9138FCe8E667C54B810bB0335439CCC91219eC8",
    "transactionIndex": 0,
    "gasUsed": "6479307",
    "logsBloom": "0x
    "blockHash": "0xb9f8f48346bd204bb23b530c0c6abc70c280a7b850b5ee23a36c03ff39d23545",
    "transactionHash": "0x6207ef7a5a23ed795230fa610bbcafd270513019ee0c07429e4cfd236c8f843a",
    "logs": [],
    "blockNumber": 190194,
    "cumulativeGasUsed": "6479307",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ac6034c4272e3eaeaf9c437c709946f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"queue\",\"type\":\"tuple[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferFeeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bridgeFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeBridgeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks_\",\"type\":\"uint256\"}],\"name\":\"changeMinSafetyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"signatureFeeCheckNumber_\",\"type\":\"uint256\"}],\"name\":\"changeSignatureFeeCheckNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds_\",\"type\":\"uint256\"}],\"name\":\"changeTimeframeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeTransferFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getLockedTransfers\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.LockedTransfers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address payable\",\"name\":\"transferFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"bridgeFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minimumDifficulty\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochIndex\",\"type\":\"uint256\"}],\"name\":\"isEpochDataSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSafetyBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestLockedEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"removeLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullSizeIn128Resultion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"branchDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"merkleNodes\",\"type\":\"uint256[]\"}],\"name\":\"setEpochData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideBridgeAddress\",\"type\":\"address\"}],\"name\":\"setSideBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"p0WithNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"p0WithoutNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes\",\"name\":\"p1\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentOrReceiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"number\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p5\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p6\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CheckPoW.BlockPoW[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receiptProof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"internalType\":\"struct CheckPoW.PoWProof\",\"name\":\"powProof\",\"type\":\"tuple\"}],\"name\":\"submitTransferPoW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSideAddress\",\"type\":\"address\"}],\"name\":\"tokensAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensAddBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"}],\"name\":\"tokensRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensRemoveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"unlockTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrapSide\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"transferFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"}],\"name\":\"wrapWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/networks/ETH_AmbBridge.sol\":\"ETH_AmbBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/checks/CheckPoW.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./CheckReceiptsProof.sol\\\";\\nimport \\\"./CheckPoW_Ethash.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n\\ncontract CheckPoW is Initializable, Ethash {\\n    struct BlockPoW {\\n        bytes3 p0WithNonce;\\n        bytes3 p0WithoutNonce;\\n\\n        bytes p1;\\n        bytes32 parentOrReceiptHash;\\n        bytes p2;\\n        bytes difficulty;\\n        bytes p3;\\n        bytes number;\\n        bytes p4;  // end when extra end\\n        bytes p5;  // after extra\\n        bytes nonce;\\n        bytes p6;\\n\\n        uint[] dataSetLookup;\\n        uint[] witnessForLookup;\\n    }\\n\\n    struct PoWProof {\\n        BlockPoW[] blocks;\\n        CommonStructs.TransferProof transfer;\\n    }\\n\\n    uint256 minimumDifficulty;\\n\\n    function __CheckPoW_init(\\n        uint256 minimumDifficulty_\\n    ) internal initializer {\\n        minimumDifficulty = minimumDifficulty_;\\n    }\\n\\n    function checkPoW_(PoWProof calldata powProof, address sideBridgeAddress) internal view\\n    {\\n        bytes32 hash = calcTransferReceiptsHash(powProof.transfer, sideBridgeAddress);\\n        for (uint i = 0; i < powProof.blocks.length; i++) {\\n            require(powProof.blocks[i].parentOrReceiptHash == hash, \\\"parentHash or receiptHash wrong\\\");\\n            hash = blockHash(powProof.blocks[i]);\\n\\n            verifyEthash(powProof.blocks[i]);\\n        }\\n    }\\n\\n\\n    function verifyEthash(BlockPoW calldata block_) internal view {\\n        uint difficulty = bytesToUint(block_.difficulty);\\n        require(difficulty >= minimumDifficulty, \\\"difficulty too low\\\");\\n        verifyPoW(\\n            bytesToUint(block_.number),\\n            blockHashWithoutNonce(block_),\\n            bytesToUint(block_.nonce),\\n            difficulty,\\n            block_.dataSetLookup,\\n            block_.witnessForLookup\\n        );\\n    }\\n\\n    function blockHash(BlockPoW calldata block_) internal pure returns (bytes32) {\\n        // Note: too much arguments in abi.encodePacked() function cause CompilerError: Stack too deep...\\n        return keccak256(abi.encodePacked(\\n                abi.encodePacked(\\n                    block_.p0WithNonce,\\n                    block_.p1,\\n                    block_.parentOrReceiptHash,\\n                    block_.p2,\\n                    block_.difficulty,\\n                    block_.p3\\n                ),\\n                abi.encodePacked(\\n                    block_.number,\\n                    block_.p4,\\n                    block_.p5,\\n                    block_.nonce,\\n                    block_.p6\\n                )\\n            ));\\n    }\\n\\n    function blockHashWithoutNonce(BlockPoW calldata block_) internal pure returns (bytes32) {\\n        bytes memory rlpHeaderHashWithoutNonce = abi.encodePacked(\\n            abi.encodePacked(\\n                block_.p0WithoutNonce,\\n                block_.p1,\\n                block_.parentOrReceiptHash,\\n                block_.p2\\n            ),\\n            abi.encodePacked(\\n                block_.difficulty,\\n                block_.p3,\\n                block_.number,\\n                block_.p4,\\n                block_.p6\\n            )\\n        );\\n\\n        return keccak256(rlpHeaderHashWithoutNonce);\\n    }\\n\\n\\n    function bytesToUint(bytes memory b) private pure returns (uint){\\n        return uint(bytes32(b)) >> (256 - b.length * 8);\\n    }\\n\\n    uint256[15] private ___gap;\\n}\\n\",\"keccak256\":\"0x1c037f50daa41a59fba557b60b8e5f209ad46f414841732e37af8b6b60f2c38b\",\"license\":\"MIT\"},\"contracts/checks/CheckPoW_Ethash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev These contracts are used to verify Proof of Work within a smart contract.\\n///      The algorithms have been extracted from the implementation of smart pool (https://github.com/smartpool)\\ncontract SHA3_512 {\\n    constructor() {}\\n\\n    function keccak_f(uint[25] memory A) pure private returns (uint[25] memory) {\\n        uint[25] memory B;\\n        uint[5]  memory C;\\n        uint[5]  memory D;\\n\\n        uint[24] memory RC = [\\n        uint(0x0000000000000001),\\n        0x0000000000008082,\\n        0x800000000000808A,\\n        0x8000000080008000,\\n        0x000000000000808B,\\n        0x0000000080000001,\\n        0x8000000080008081,\\n        0x8000000000008009,\\n        0x000000000000008A,\\n        0x0000000000000088,\\n        0x0000000080008009,\\n        0x000000008000000A,\\n        0x000000008000808B,\\n        0x800000000000008B,\\n        0x8000000000008089,\\n        0x8000000000008003,\\n        0x8000000000008002,\\n        0x8000000000000080,\\n        0x000000000000800A,\\n        0x800000008000000A,\\n        0x8000000080008081,\\n        0x8000000000008080,\\n        0x0000000080000001,\\n        0x8000000080008008];\\n\\n        for (uint i = 0; i < 24; i++) {\\n\\n            C[0] = A[0] ^ A[1] ^ A[2] ^ A[3] ^ A[4];\\n            C[1] = A[5] ^ A[6] ^ A[7] ^ A[8] ^ A[9];\\n            C[2] = A[10] ^ A[11] ^ A[12] ^ A[13] ^ A[14];\\n            C[3] = A[15] ^ A[16] ^ A[17] ^ A[18] ^ A[19];\\n            C[4] = A[20] ^ A[21] ^ A[22] ^ A[23] ^ A[24];\\n\\n            D[0] = C[4] ^ ((C[1] * 2) & 0xffffffffffffffff | (C[1] / (2 ** 63)));\\n            D[1] = C[0] ^ ((C[2] * 2) & 0xffffffffffffffff | (C[2] / (2 ** 63)));\\n            D[2] = C[1] ^ ((C[3] * 2) & 0xffffffffffffffff | (C[3] / (2 ** 63)));\\n            D[3] = C[2] ^ ((C[4] * 2) & 0xffffffffffffffff | (C[4] / (2 ** 63)));\\n            D[4] = C[3] ^ ((C[0] * 2) & 0xffffffffffffffff | (C[0] / (2 ** 63)));\\n\\n            A[0] = A[0] ^ D[0];\\n            A[1] = A[1] ^ D[0];\\n            A[2] = A[2] ^ D[0];\\n            A[3] = A[3] ^ D[0];\\n            A[4] = A[4] ^ D[0];\\n            A[5] = A[5] ^ D[1];\\n            A[6] = A[6] ^ D[1];\\n            A[7] = A[7] ^ D[1];\\n            A[8] = A[8] ^ D[1];\\n            A[9] = A[9] ^ D[1];\\n            A[10] = A[10] ^ D[2];\\n            A[11] = A[11] ^ D[2];\\n            A[12] = A[12] ^ D[2];\\n            A[13] = A[13] ^ D[2];\\n            A[14] = A[14] ^ D[2];\\n            A[15] = A[15] ^ D[3];\\n            A[16] = A[16] ^ D[3];\\n            A[17] = A[17] ^ D[3];\\n            A[18] = A[18] ^ D[3];\\n            A[19] = A[19] ^ D[3];\\n            A[20] = A[20] ^ D[4];\\n            A[21] = A[21] ^ D[4];\\n            A[22] = A[22] ^ D[4];\\n            A[23] = A[23] ^ D[4];\\n            A[24] = A[24] ^ D[4];\\n\\n            /*Rho and pi steps*/\\n            B[0] = A[0];\\n            B[8] = ((A[1] * (2 ** 36)) & 0xffffffffffffffff | (A[1] / (2 ** 28)));\\n            B[11] = ((A[2] * (2 ** 3)) & 0xffffffffffffffff | (A[2] / (2 ** 61)));\\n            B[19] = ((A[3] * (2 ** 41)) & 0xffffffffffffffff | (A[3] / (2 ** 23)));\\n            B[22] = ((A[4] * (2 ** 18)) & 0xffffffffffffffff | (A[4] / (2 ** 46)));\\n            B[2] = ((A[5] * (2 ** 1)) & 0xffffffffffffffff | (A[5] / (2 ** 63)));\\n            B[5] = ((A[6] * (2 ** 44)) & 0xffffffffffffffff | (A[6] / (2 ** 20)));\\n            B[13] = ((A[7] * (2 ** 10)) & 0xffffffffffffffff | (A[7] / (2 ** 54)));\\n            B[16] = ((A[8] * (2 ** 45)) & 0xffffffffffffffff | (A[8] / (2 ** 19)));\\n            B[24] = ((A[9] * (2 ** 2)) & 0xffffffffffffffff | (A[9] / (2 ** 62)));\\n            B[4] = ((A[10] * (2 ** 62)) & 0xffffffffffffffff | (A[10] / (2 ** 2)));\\n            B[7] = ((A[11] * (2 ** 6)) & 0xffffffffffffffff | (A[11] / (2 ** 58)));\\n            B[10] = ((A[12] * (2 ** 43)) & 0xffffffffffffffff | (A[12] / (2 ** 21)));\\n            B[18] = ((A[13] * (2 ** 15)) & 0xffffffffffffffff | (A[13] / (2 ** 49)));\\n            B[21] = ((A[14] * (2 ** 61)) & 0xffffffffffffffff | (A[14] / (2 ** 3)));\\n            B[1] = ((A[15] * (2 ** 28)) & 0xffffffffffffffff | (A[15] / (2 ** 36)));\\n            B[9] = ((A[16] * (2 ** 55)) & 0xffffffffffffffff | (A[16] / (2 ** 9)));\\n            B[12] = ((A[17] * (2 ** 25)) & 0xffffffffffffffff | (A[17] / (2 ** 39)));\\n            B[15] = ((A[18] * (2 ** 21)) & 0xffffffffffffffff | (A[18] / (2 ** 43)));\\n            B[23] = ((A[19] * (2 ** 56)) & 0xffffffffffffffff | (A[19] / (2 ** 8)));\\n            B[3] = ((A[20] * (2 ** 27)) & 0xffffffffffffffff | (A[20] / (2 ** 37)));\\n            B[6] = ((A[21] * (2 ** 20)) & 0xffffffffffffffff | (A[21] / (2 ** 44)));\\n            B[14] = ((A[22] * (2 ** 39)) & 0xffffffffffffffff | (A[22] / (2 ** 25)));\\n            B[17] = ((A[23] * (2 ** 8)) & 0xffffffffffffffff | (A[23] / (2 ** 56)));\\n            B[20] = ((A[24] * (2 ** 14)) & 0xffffffffffffffff | (A[24] / (2 ** 50)));\\n\\n            /*Xi state*/\\n            A[0] = B[0] ^ ((~B[5]) & B[10]);\\n            A[1] = B[1] ^ ((~B[6]) & B[11]);\\n            A[2] = B[2] ^ ((~B[7]) & B[12]);\\n            A[3] = B[3] ^ ((~B[8]) & B[13]);\\n            A[4] = B[4] ^ ((~B[9]) & B[14]);\\n            A[5] = B[5] ^ ((~B[10]) & B[15]);\\n            A[6] = B[6] ^ ((~B[11]) & B[16]);\\n            A[7] = B[7] ^ ((~B[12]) & B[17]);\\n            A[8] = B[8] ^ ((~B[13]) & B[18]);\\n            A[9] = B[9] ^ ((~B[14]) & B[19]);\\n            A[10] = B[10] ^ ((~B[15]) & B[20]);\\n            A[11] = B[11] ^ ((~B[16]) & B[21]);\\n            A[12] = B[12] ^ ((~B[17]) & B[22]);\\n            A[13] = B[13] ^ ((~B[18]) & B[23]);\\n            A[14] = B[14] ^ ((~B[19]) & B[24]);\\n            A[15] = B[15] ^ ((~B[20]) & B[0]);\\n            A[16] = B[16] ^ ((~B[21]) & B[1]);\\n            A[17] = B[17] ^ ((~B[22]) & B[2]);\\n            A[18] = B[18] ^ ((~B[23]) & B[3]);\\n            A[19] = B[19] ^ ((~B[24]) & B[4]);\\n            A[20] = B[20] ^ ((~B[0]) & B[5]);\\n            A[21] = B[21] ^ ((~B[1]) & B[6]);\\n            A[22] = B[22] ^ ((~B[2]) & B[7]);\\n            A[23] = B[23] ^ ((~B[3]) & B[8]);\\n            A[24] = B[24] ^ ((~B[4]) & B[9]);\\n\\n            /*Last step*/\\n            A[0] = A[0] ^ RC[i];\\n        }\\n\\n        return A;\\n    }\\n\\n\\n    function sponge(uint[9] memory M) pure internal returns (uint[16] memory) {\\n        require((M.length * 8) == 72, \\\"sponge error\\\");\\n\\n        M[5] = 0x01;\\n        M[8] = 0x8000000000000000;\\n\\n        uint r = 72;\\n        uint w = 8;\\n        uint size = M.length * 8;\\n\\n        uint[25] memory S;\\n        uint i;\\n        uint y;\\n        uint x;\\n        /*Absorbing Phase*/\\n        for (i = 0; i < size / r; i++) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w)) {\\n                        S[5 * x + y] = S[5 * x + y] ^ M[i * 9 + x + 5 * y];\\n                    }\\n                }\\n            }\\n            S = keccak_f(S);\\n        }\\n\\n        /*Squeezing phase*/\\n        uint[16] memory result;\\n        uint b = 0;\\n        while (b < 16) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w) && (b < 16)) {\\n                        result[b] = S[5 * x + y] & 0xFFFFFFFF;\\n                        result[b + 1] = S[5 * x + y] / 0x100000000;\\n                        b += 2;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n}\\n\\n////////////////////////////////////////////////////////////////////////////////\\n\\ncontract Ethash is SHA3_512 {\\n\\n    uint constant EPOCH_LENGTH = 30000;   // blocks per epoch\\n\\n    constructor() {\\n    }\\n\\n    struct EthashCacheOptData {\\n        uint[512] merkleNodes;\\n        uint fullSizeIn128Resultion;\\n        uint branchDepth;\\n    }\\n\\n    mapping(uint => EthashCacheOptData) epochData;\\n\\n\\n    function verifyPoW(uint blockNumber, bytes32 rlpHeaderHashWithoutNonce, uint nonce, uint difficulty,\\n        uint[] memory dataSetLookup, uint[] memory witnessForLookup) internal view {\\n\\n        uint epoch = blockNumber / EPOCH_LENGTH;\\n        uint ethash = hashimoto(rlpHeaderHashWithoutNonce, nonce, dataSetLookup, witnessForLookup, epoch);\\n\\n        require(ethash <= (2 ** 256 - 1) / difficulty, \\\"Ethash difficulty too low\\\");\\n    }\\n\\n    function isEpochDataSet(uint epochIndex) public view returns (bool) {\\n        return epochData[epochIndex].fullSizeIn128Resultion != 0;\\n    }\\n\\n    function setEpochData(\\n        uint epochNum,\\n        uint fullSizeIn128Resultion,\\n        uint branchDepth,\\n        uint[] calldata merkleNodes\\n    ) public {\\n\\n        // we store only previous and current epochs\\n        // so, delete second from the end epoch\\n        if (epochNum >= 2)  // underflow check\\n            delete epochData[epochNum - 2];\\n\\n\\n        uint l = merkleNodes.length;\\n        uint[512] storage nodes = epochData[epochNum].merkleNodes;\\n\\n        for (uint i = 0; i < l; i++) {\\n            nodes[i] = merkleNodes[i];\\n        }\\n\\n        epochData[epochNum].fullSizeIn128Resultion = fullSizeIn128Resultion;\\n        epochData[epochNum].branchDepth = branchDepth;\\n    }\\n\\n\\n    function hashimoto(bytes32 header,\\n        uint nonceLe,\\n        uint[] memory dataSetLookup,\\n        uint[] memory witnessForLookup,\\n        uint epochIndex) private view returns (uint) {\\n\\n        uint[16] memory s = computeS(uint(header), nonceLe);\\n        uint[32] memory mix;\\n        uint[8]  memory cmix;\\n\\n\\n        uint depth = epochData[epochIndex].branchDepth;\\n        uint fullSize = epochData[epochIndex].fullSizeIn128Resultion;\\n\\n        uint i;\\n        uint j;\\n\\n        require(fullSize != 0, \\\"EpochData not set\\\");\\n\\n\\n        for (i = 0; i < 16; i++) {\\n            assembly {\\n                let offset := mul(i, 0x20)\\n\\n            //mix[i] = s[i];\\n                mstore(add(mix, offset), mload(add(s, offset)))\\n\\n            // mix[i+16] = s[i];\\n                mstore(add(mix, add(0x200, offset)), mload(add(s, offset)))\\n            }\\n        }\\n\\n        for (i = 0; i < 64; i++) {\\n            uint p = fnv(i ^ s[0], mix[i % 32]) % fullSize;\\n\\n            // console.log(computeCacheRoot( p, i, dataSetLookup,  witnessForLookup, depthAndFullSize[0]));\\n            // console.log(getMerkleLeave( epochIndex, p ));\\n\\n            if (computeCacheRoot(p, i, dataSetLookup, witnessForLookup, depth) != getMerkleLeave(epochIndex, p)) {\\n                // PoW failed\\n                revert(\\\"PoW failed\\\");\\n            }\\n\\n            for (j = 0; j < 8; j++) {\\n\\n                assembly{\\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & varFFFFFFFF );\\n                    let dataOffset := add(mul(0x80, i), add(dataSetLookup, 0x20))\\n                    let dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    let mixOffset := add(mix, mul(0x20, j))\\n                    let mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    let fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                }\\n\\n\\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & 0xFFFFFFFF );\\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\\n\\n\\n                //dataSetLookup[4*i    ] = dataSetLookup[4*i    ]/(2**32);\\n                //dataSetLookup[4*i + 1] = dataSetLookup[4*i + 1]/(2**32);\\n                //dataSetLookup[4*i + 2] = dataSetLookup[4*i + 2]/(2**32);\\n                //dataSetLookup[4*i + 3] = dataSetLookup[4*i + 3]/(2**32);\\n\\n                assembly{\\n                    let offset := add(add(dataSetLookup, 0x20), mul(i, 0x80))\\n                    let value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n                }\\n            }\\n        }\\n\\n\\n        for (i = 0; i < 32; i += 4) {\\n            cmix[i / 4] = (fnv(fnv(fnv(mix[i], mix[i + 1]), mix[i + 2]), mix[i + 3]));\\n        }\\n\\n        return computeSha3(s, cmix);\\n\\n    }\\n\\n\\n    function fnv(uint v1, uint v2) pure internal returns (uint) {\\n        return ((v1 * 0x01000193) ^ v2) & 0xFFFFFFFF;\\n    }\\n\\n    function computeCacheRoot(uint index,\\n        uint indexInElementsArray,\\n        uint[] memory elements,\\n        uint[] memory witness,\\n        uint branchSize) pure private returns (uint) {\\n\\n        uint leaf = computeLeaf(elements, indexInElementsArray) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n        uint left;\\n        uint right;\\n        uint node;\\n        bool oddBranchSize = (branchSize % 2) > 0;\\n\\n        assembly {\\n            branchSize := div(branchSize, 2)\\n        //branchSize /= 2;\\n        }\\n        uint witnessIndex = indexInElementsArray * branchSize;\\n        if (oddBranchSize) witnessIndex += indexInElementsArray;\\n\\n        uint depth;\\n        for (depth = 0; depth < branchSize; depth++) {\\n            assembly {\\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\\n            }\\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n\\n            }\\n            else {\\n                assembly{\\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            assembly {\\n                index := div(index, 2)\\n            }\\n\\n            //node  = witness[witnessIndex + depth] / (2**128);\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := div(node, 0x100000000000000000000000000000000)\\n                }\\n            }\\n            else {\\n                assembly {\\n                    left := div(node, 0x100000000000000000000000000000000)\\n                }\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            assembly {\\n                index := div(index, 2)\\n            }\\n        }\\n\\n        if (oddBranchSize) {\\n            assembly {\\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\\n            }\\n\\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n            }\\n            else {\\n                assembly{\\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n\\n\\n        return leaf;\\n    }\\n\\n\\n    function computeSha3(uint[16] memory s, uint[8] memory cmix) pure internal returns (uint) {\\n        uint s0 = s[0] + s[1] * (2 ** 32) + s[2] * (2 ** 64) + s[3] * (2 ** 96) +\\n        (s[4] + s[5] * (2 ** 32) + s[6] * (2 ** 64) + s[7] * (2 ** 96)) * (2 ** 128);\\n\\n        uint s1 = s[8] + s[9] * (2 ** 32) + s[10] * (2 ** 64) + s[11] * (2 ** 96) +\\n        (s[12] + s[13] * (2 ** 32) + s[14] * (2 ** 64) + s[15] * (2 ** 96)) * (2 ** 128);\\n\\n        uint c = cmix[0] + cmix[1] * (2 ** 32) + cmix[2] * (2 ** 64) + cmix[3] * (2 ** 96) +\\n        (cmix[4] + cmix[5] * (2 ** 32) + cmix[6] * (2 ** 64) + cmix[7] * (2 ** 96)) * (2 ** 128);\\n\\n\\n        /* god knows why need to convert to big endian */\\n        return uint(keccak256(abi.encodePacked(reverseBytes(s0), reverseBytes(s1), reverseBytes(c))));\\n    }\\n\\n\\n    function computeLeaf(uint[] memory dataSetLookup, uint index) pure internal returns (uint) {\\n        return uint(keccak256(abi.encodePacked(\\n                dataSetLookup[4 * index],\\n                dataSetLookup[4 * index + 1],\\n                dataSetLookup[4 * index + 2],\\n                dataSetLookup[4 * index + 3]\\n            )));\\n\\n    }\\n\\n    function computeS(uint header, uint nonceLe) pure internal returns (uint[16] memory) {\\n        uint[9] memory M;\\n\\n        header = reverseBytes(header);\\n\\n        M[0] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[1] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[2] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[3] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n\\n        // make little endian nonce\\n        M[4] = nonceLe;\\n        return sponge(M);\\n    }\\n\\n    function reverseBytes(uint input) pure internal returns (uint) {\\n        uint result;\\n        for (uint i = 0; i < 32; i++) {\\n            result = (result << 8) + (input & 0xff);\\n            input = input >> 8;\\n        }\\n        return result;\\n    }\\n\\n\\n    function getMerkleLeave(uint epochIndex, uint p) view internal returns (uint) {\\n        uint rootIndex = uint(p >> epochData[epochIndex].branchDepth);\\n        uint expectedRoot = epochData[epochIndex].merkleNodes[(rootIndex >> 1)];\\n\\n        if ((rootIndex % 2) == 0)\\n            return expectedRoot & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        return expectedRoot >> 128;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x3edec4c4c9ee84dfd198fcb19c0038ef88129192d5cfa61e14af72b7159e2623\",\"license\":\"MIT\"},\"contracts/checks/CheckReceiptsProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\n\\n\\n// check readme for focs\\nfunction calcReceiptsHash(bytes[] memory proof, bytes32 el, uint proofStart) pure returns (bytes32) {\\n    bytes memory s;\\n\\n    for (uint i = proofStart; i < proof.length; i += 2) {\\n        s = abi.encodePacked(proof[i], el, proof[i + 1]);\\n        el = (s.length > 32) ? keccak256(s) : bytes32(s);\\n    }\\n\\n    return el;\\n}\\n\\n\\nfunction calcTransferReceiptsHash(CommonStructs.TransferProof memory p, address eventContractAddress) pure returns (bytes32) {\\n    bytes32 el = keccak256(abi.encodePacked(\\n            p.receiptProof[0],\\n            eventContractAddress,\\n            p.receiptProof[1],\\n            toBinary(p.eventId),\\n            p.receiptProof[2],\\n            abi.encode(p.transfers),\\n            p.receiptProof[3]\\n        ));\\n    return calcReceiptsHash(p.receiptProof, el, 4);\\n    // start from proof[4]\\n}\\n\\n\\nfunction toBinary(uint _x) pure returns (bytes memory) {\\n    bytes memory b = new bytes(32);\\n    assembly {\\n        mstore(add(b, 32), _x)\\n    }\\n    uint i;\\n    for (i = 0; i < 32; i++) {\\n        if (b[i] != 0) {\\n            break;\\n        }\\n    }\\n    bytes memory res = new bytes(32 - i);\\n    for (uint j = 0; j < res.length; j++) {\\n        res[j] = b[i++];\\n    }\\n    return res;\\n}\\n\",\"keccak256\":\"0x862ceb1c0c84eafa3895ba004095c77a23a97723596a719b52c0e405d48e593a\",\"license\":\"MIT\"},\"contracts/checks/SignatureCheck.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nfunction ecdsaRecover(bytes32 messageHash, bytes memory signature) pure returns(address) {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n        r := mload(add(signature, 32))\\n        s := mload(add(signature, 64))\\n        v := byte(0, mload(add(signature, 96)))\\n        if lt(v, 27) {v := add(v, 27)}\\n    }\\n    return ecrecover(messageHash, v, r, s);\\n}\",\"keccak256\":\"0xf2fc94ba778fd8bf82abbe6df91b229b14b31aa1585a49a5ad8d4ee00af76423\"},\"contracts/common/CommonBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./CommonStructs.sol\\\";\\nimport \\\"../tokens/IWrapper.sol\\\";\\nimport \\\"../checks/SignatureCheck.sol\\\";\\n\\n\\ncontract CommonBridge is Initializable, AccessControlUpgradeable, PausableUpgradeable {\\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n\\n    uint private constant SIGNATURE_FEE_TIMESTAMP = 1800;  // 30 min\\n\\n    // queue to be pushed in another network\\n    CommonStructs.Transfer[] queue;\\n\\n    // locked transfers from another network\\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\\n    uint public oldestLockedEventId;  // head index of lockedTransfers 'queue' mapping\\n\\n\\n    // this network to side network token addresses mapping\\n    mapping(address => address) public tokenAddresses;\\n    address public wrapperAddress;\\n\\n    address payable transferFeeRecipient;\\n    address payable bridgeFeeRecipient;\\n\\n    address public sideBridgeAddress;\\n    uint public minSafetyBlocks;\\n    uint public timeframeSeconds;\\n    uint public lockTime;\\n\\n    uint public inputEventId; // last processed event from side network\\n    uint outputEventId;  // last created event in this network. start from 1 coz 0 consider already processed\\n\\n    uint lastTimeframe;\\n\\n    uint internal signatureFeeCheckNumber;\\n\\n    event Withdraw(address indexed from, uint eventId, address tokenFrom, address tokenTo, uint amount,\\n                   uint transferFeeAmount, uint bridgeFeeAmount);\\n    event Transfer(uint indexed eventId, CommonStructs.Transfer[] queue);\\n    event TransferSubmit(uint indexed eventId);\\n    event TransferFinish(uint indexed eventId);\\n\\n    function __CommonBridge_init(CommonStructs.ConstructorArgs memory args) internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(RELAY_ROLE, args.relayAddress);\\n        _setupRole(ADMIN_ROLE, args.adminAddress);\\n\\n        // initialise tokenAddresses with start values\\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\\n        wrapperAddress = args.wrappingTokenAddress;\\n\\n        sideBridgeAddress = args.sideBridgeAddress;\\n        transferFeeRecipient = args.transferFeeRecipient;\\n        bridgeFeeRecipient = args.bridgeFeeRecipient;\\n        minSafetyBlocks = args.minSafetyBlocks;\\n        timeframeSeconds = args.timeframeSeconds;\\n        lockTime = args.lockTime;\\n\\n        oldestLockedEventId = 1;\\n        outputEventId = 1;\\n\\n        signatureFeeCheckNumber = 3;\\n    }\\n\\n    function wrapWithdraw(address toAddress, bytes calldata signature, uint transferFee, uint bridgeFee) public payable {\\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\\n        require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value > transferFee + bridgeFee, \\\"Sent value <= fee\\\");\\n\\n        feeCheck(wrapperAddress, signature, transferFee, bridgeFee);\\n        transferFeeRecipient.transfer(transferFee);\\n        bridgeFeeRecipient.transfer(bridgeFee);\\n\\n        uint amount = msg.value - transferFee - bridgeFee;\\n        IWrapper(wrapperAddress).deposit{value : amount}();\\n\\n        //\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, address(0), tokenSideAddress, amount, transferFee, bridgeFee);\\n\\n        withdrawFinish();\\n    }\\n\\n    function withdraw(\\n        address tokenThisAddress,\\n        address toAddress,\\n        uint amount,\\n        bool unwrapSide,\\n        bytes calldata signature,\\n        uint transferFee,\\n        uint bridgeFee\\n    ) payable public {\\n        address tokenSideAddress;\\n        if (unwrapSide) {\\n            require(tokenAddresses[address(0)] == tokenThisAddress, \\\"Token not point to native token\\\");\\n            // tokenSideAddress will be 0x0000000000000000000000000000000000000000 - for native token\\n        } else {\\n            tokenSideAddress = tokenAddresses[tokenThisAddress];\\n            require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n        }\\n\\n        require(msg.value == transferFee + bridgeFee, \\\"Sent value != fee\\\");\\n\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        feeCheck(tokenThisAddress, signature, transferFee, bridgeFee);\\n        transferFeeRecipient.transfer(transferFee);\\n        bridgeFeeRecipient.transfer(bridgeFee);\\n\\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \\\"Fail transfer coins\\\");\\n\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, outputEventId, tokenThisAddress, tokenSideAddress, amount, transferFee, bridgeFee);\\n\\n        withdrawFinish();\\n    }\\n\\n\\n    function feeCheck(\\n        address token,\\n        bytes calldata signature,\\n        uint transferFee,\\n        uint bridgeFee\\n    ) internal {\\n        bytes32 messageHash;\\n        address signer;\\n        uint timestampEpoch = block.timestamp / SIGNATURE_FEE_TIMESTAMP;\\n\\n        for (uint i = 0; i < signatureFeeCheckNumber; i++) {\\n            messageHash = keccak256(abi.encodePacked(\\n                    \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\\n                    keccak256(abi.encodePacked(\\n                        token,\\n                        timestampEpoch,\\n                        transferFee,\\n                        bridgeFee\\n                    ))\\n                ));\\n\\n            signer = ecdsaRecover(messageHash, signature);\\n            if (hasRole(RELAY_ROLE, signer)) {\\n                return;\\n            } else {\\n                timestampEpoch--;\\n            }\\n        }\\n        revert(\\\"Signature check failed\\\");\\n    }\\n\\n    function triggerTransfers() public {\\n        require(queue.length != 0, \\\"Queue is empty\\\");\\n\\n        emit Transfer(outputEventId++, queue);\\n        delete queue;\\n    }\\n\\n    function withdrawFinish() internal {\\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\\n        if (nowTimeframe != lastTimeframe) {\\n            emit Transfer(outputEventId++, queue);\\n            delete queue;\\n\\n            lastTimeframe = nowTimeframe;\\n        }\\n    }\\n\\n\\n    // locked transfers from another network\\n    function getLockedTransfers(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\\n        return lockedTransfers[eventId];\\n    }\\n\\n\\n    function proceedTransfers(CommonStructs.Transfer[] memory transfers) internal {\\n        for (uint i = 0; i < transfers.length; i++) {\\n\\n            if (transfers[i].tokenAddress == address(0)) {// native token\\n                IWrapper(wrapperAddress).withdraw(transfers[i].amount);\\n                payable(transfers[i].toAddress).transfer(transfers[i].amount);\\n            } else {// ERC20 token\\n                require(\\n                    IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount),\\n                    \\\"Fail transfer coins\\\");\\n            }\\n\\n        }\\n    }\\n\\n\\n    // submitted transfers save here for `lockTime` period\\n    function lockTransfers(CommonStructs.Transfer[] memory events, uint eventId) internal {\\n        lockedTransfers[eventId].endTimestamp = block.timestamp + lockTime;\\n        for (uint i = 0; i < events.length; i++)\\n            lockedTransfers[eventId].transfers.push(events[i]);\\n    }\\n\\n    // after `lockTime` period, transfers can  be unlocked\\n    function unlockTransfers(uint eventId) public whenNotPaused {\\n        require(eventId == oldestLockedEventId, \\\"can unlock only oldest event\\\");\\n\\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n        require(transfersLocked.endTimestamp > 0, \\\"no locked transfers with this id\\\");\\n        require(transfersLocked.endTimestamp < block.timestamp, \\\"lockTime has not yet passed\\\");\\n\\n        proceedTransfers(transfersLocked.transfers);\\n\\n        delete lockedTransfers[eventId];\\n        emit TransferFinish(eventId);\\n\\n        oldestLockedEventId = eventId + 1;\\n    }\\n\\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\\n    function unlockTransfersBatch() public whenNotPaused {\\n        uint eventId = oldestLockedEventId;\\n        for (;; eventId++) {\\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\\n\\n            proceedTransfers(transfersLocked.transfers);\\n\\n            delete lockedTransfers[eventId];\\n            emit TransferFinish(eventId);\\n        }\\n        oldestLockedEventId = eventId;\\n    }\\n\\n    // delete transfers with passed eventId and all after it\\n    function removeLockedTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(eventId >= oldestLockedEventId, \\\"eventId must be >= oldestLockedEventId\\\");\\n        for (; lockedTransfers[eventId].endTimestamp != 0; eventId++)\\n            delete lockedTransfers[eventId];\\n        inputEventId = eventId-1; // pretend like we don't receive that event\\n    }\\n\\n\\n    // admin setters\\n\\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\\n        minSafetyBlocks = minSafetyBlocks_;\\n    }\\n\\n    function changeTransferFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        transferFeeRecipient = feeRecipient_;\\n    }\\n\\n    function changeBridgeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        bridgeFeeRecipient = feeRecipient_;\\n    }\\n\\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\\n        timeframeSeconds = timeframeSeconds_;\\n    }\\n\\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\\n        lockTime = lockTime_;\\n    }\\n\\n    function changeSignatureFeeCheckNumber(uint signatureFeeCheckNumber_) public onlyRole(ADMIN_ROLE) {\\n        signatureFeeCheckNumber = signatureFeeCheckNumber_;\\n    }\\n\\n    // token addressed mapping\\n\\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\\n    }\\n\\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\\n        delete tokenAddresses[tokenThisAddress];\\n    }\\n\\n    function tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\\n    }\\n\\n    function _tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) private {\\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \\\"sizes of tokenThisAddresses and tokenSideAddresses must be same\\\");\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\\n    }\\n\\n    function tokensRemoveBatch(address[] memory tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            delete tokenAddresses[tokenThisAddresses[i]];\\n    }\\n\\n    // pause\\n\\n    function pause() public onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // internal\\n\\n    function checkEventId(uint eventId) internal {\\n        require(eventId == ++inputEventId, \\\"EventId out of order\\\");\\n    }\\n\\n    receive() external payable {}  // need to receive native token from wrapper contract\\n\\n    uint256[15] private __gap;\\n}\\n\",\"keccak256\":\"0x3654dfdfd06e7f0555bc0809fc740c0a94d7edcba5ad2bdf50ae253b8172691f\",\"license\":\"MIT\"},\"contracts/common/CommonStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary CommonStructs {\\n    struct Transfer {\\n        address tokenAddress;\\n        address toAddress;\\n        uint amount;\\n    }\\n\\n    struct TransferProof {\\n        bytes[] receiptProof;\\n        uint eventId;\\n        Transfer[] transfers;\\n    }\\n\\n    struct LockedTransfers {\\n        Transfer[] transfers;\\n        uint endTimestamp;\\n    }\\n\\n    struct ConstructorArgs {\\n        address sideBridgeAddress; address adminAddress;\\n        address relayAddress; address wrappingTokenAddress;\\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\\n        address payable transferFeeRecipient; address payable bridgeFeeRecipient;\\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0x28d5af974ae78442cecd33b7fa3d09ad44a0776a91ba35d02ef4751d66251d5c\",\"license\":\"MIT\"},\"contracts/networks/ETH_AmbBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonBridge.sol\\\";\\nimport \\\"../checks/CheckPoW.sol\\\";\\n\\n\\ncontract ETH_AmbBridge is CommonBridge, CheckPoW {\\n\\n    function initialize(\\n        CommonStructs.ConstructorArgs memory args,\\n        uint minimumDifficulty\\n    ) public initializer {\\n        __CommonBridge_init(args);\\n        __CheckPoW_init(minimumDifficulty);\\n        emit Transfer(0, queue); // used to sync validatorSet\\n    }\\n\\n    function submitTransferPoW(PoWProof calldata powProof) public onlyRole(RELAY_ROLE) whenNotPaused {\\n        emit TransferSubmit(powProof.transfer.eventId);\\n        checkEventId(powProof.transfer.eventId);\\n        checkPoW_(powProof, sideBridgeAddress);\\n        lockTransfers(powProof.transfer.transfers, powProof.transfer.eventId);\\n    }\\n\\n    function setSideBridge(address _sideBridgeAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(sideBridgeAddress == address(0), \\\"sideBridgeAddress already set\\\");\\n        sideBridgeAddress = _sideBridgeAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x64b848a25be639b5ab217c62d0c557b1ef5805a07000b284ce46718185a6cc99\",\"license\":\"MIT\"},\"contracts/tokens/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWrapper {\\n    event Deposit(address indexed dst, uint amount);\\n    event Withdrawal(address indexed src, uint amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n}\\n\",\"keccak256\":\"0xbe5bc17241b9a14b78e18e4562e2a4c02e2b941fae0f1a896bbd795e49af136e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615ef780620000216000396000f3fe6080604052600436106102645760003560e060020a900480638ac1f86f11610148578063baeebe75116100ba578063e88b66261161007e578063e88b662614610729578063f33fe10f14610749578063f700558714610769578063f862b7eb14610789578063f8b74433146107a9578063fd5d2ef3146107bc57600080fd5b8063baeebe7514610673578063c7b81f4f14610689578063d547741f146106bc578063e1d862be146106dc578063e31be087146106fc57600080fd5b806396cf52271161010c57806396cf5227146105bc57806399b5bb64146105dc578063a217fddf146105f2578063b6d3385e14610607578063b87330e91461063d578063ba8bbbe01461065d57600080fd5b80638ac1f86f1461053e5780638e5df9c71461055357806391c5bc0a1461057357806391d1485414610586578063924cf6e0146105a657600080fd5b80633f45c799116101e15780635c975abb116101a55780635c975abb14610482578063746b5c421461049a57806375b238fc146104af5780637df8b802146104d15780638456cb5914610509578063853890ae1461051e57600080fd5b80633f45c799146103dd5780633f4ba83a146103fd57806342180fb8146104125780634a1856de146104325780635249a7051461046257600080fd5b8063248a9ca311610228578063248a9ca31461032d5780632f2ff15d1461035d578063331a891a1461037d57806336568abe1461039d5780633928b296146103bd57600080fd5b806301ffc9a71461027057806304421823146102a557806309fce356146102d55780630d668087146102f757806321d3d5361461030d57600080fd5b3661026b57005b600080fd5b34801561027c57600080fd5b5061029061028b36600461534b565b6107dc565b60405190151581526020015b60405180910390f35b3480156102b157600080fd5b506102c7600080516020615e8283398151915281565b60405190815260200161029c565b3480156102e157600080fd5b506102f56102f036600461524c565b61086f565b005b34801561030357600080fd5b506102c760d35481565b34801561031957600080fd5b506102f56103283660046150c6565b610897565b34801561033957600080fd5b506102c761034836600461530d565b60009081526065602052604090206001015490565b34801561036957600080fd5b506102f5610378366004615326565b610927565b34801561038957600080fd5b506102f561039836600461530d565b61094d565b3480156103a957600080fd5b506102f56103b8366004615326565b610a94565b3480156103c957600080fd5b506102f56103d83660046150c6565b610b23565b3480156103e957600080fd5b506102f56103f836600461538a565b610b5f565b34801561040957600080fd5b506102f5610c1b565b34801561041e57600080fd5b506102f561042d36600461530d565b610c3f565b34801561043e57600080fd5b506102c761044d36600461530d565b60ca6020526000908152604090206001015481565b34801561046e57600080fd5b506102f561047d366004615217565b610c5e565b34801561048e57600080fd5b5060975460ff16610290565b3480156104a657600080fd5b506102f5610ce3565b3480156104bb57600080fd5b506102c7600080516020615ea283398151915281565b3480156104dd57600080fd5b5060cd546104f190600160a060020a031681565b604051600160a060020a03909116815260200161029c565b34801561051557600080fd5b506102f5610d8f565b34801561052a57600080fd5b506102f56105393660046150e3565b610db0565b34801561054a57600080fd5b506102f5610df8565b34801561055f57600080fd5b506102f561056e3660046150c6565b610f50565b6102f56105813660046151b0565b610f91565b34801561059257600080fd5b506102906105a1366004615326565b6112bf565b3480156105b257600080fd5b506102c760d15481565b3480156105c857600080fd5b506102f56105d736600461530d565b6112ea565b3480156105e857600080fd5b506102c760d45481565b3480156105fe57600080fd5b506102c7600081565b34801561061357600080fd5b506104f16106223660046150c6565b60cc60205260009081526040902054600160a060020a031681565b34801561064957600080fd5b506102f56106583660046150c6565b611309565b34801561066957600080fd5b506102c760cb5481565b34801561067f57600080fd5b506102c760d25481565b34801561069557600080fd5b506102906106a436600461530d565b600090815260e7602052604090206102000154151590565b3480156106c857600080fd5b506102f56106d7366004615326565b611345565b3480156106e857600080fd5b506102f56106f73660046154ad565b61136b565b34801561070857600080fd5b5061071c61071736600461530d565b61149f565b60405161029c91906159dd565b34801561073557600080fd5b506102f5610744366004615504565b61155b565b34801561075557600080fd5b5060d0546104f190600160a060020a031681565b34801561077557600080fd5b506102f561078436600461530d565b611621565b34801561079557600080fd5b506102f56107a436600461530d565b611640565b6102f56107b736600461511c565b611873565b3480156107c857600080fd5b506102f56107d736600461530d565b611cd2565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b00000000000000000000000000000000000000000000000000000000148061086957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b600080516020615ea28339815191526108888133611cf1565b6108928383611d58565b505050565b60006108a38133611cf1565b60d054600160a060020a0316156109045760405160e560020a62461bcd02815260206004820152601d60248201527f736964654272696467654164647265737320616c72656164792073657400000060448201526064015b60405180910390fd5b5060d08054600160a060020a031916600160a060020a0392909216919091179055565b6000828152606560205260409020600101546109438133611cf1565b6108928383611e6e565b600080516020615ea28339815191526109668133611cf1565b60975460ff166109bb5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108fb565b60cb54821015610a365760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e744964000000000000000000000000000000000000000000000000000060648201526084016108fb565b600082815260ca602052604090206001015415610a8257600082815260ca6020526040812090610a668282614dfc565b5060006001919091015581610a7a81615dcb565b925050610a36565b610a8d600183615c0c565b60d4555050565b600160a060020a0381163314610b155760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108fb565b610b1f8282611ef4565b5050565b600080516020615ea2833981519152610b3c8133611cf1565b5060cf8054600160a060020a031916600160a060020a0392909216919091179055565b600054610100900460ff1680610b78575060005460ff16155b610b975760405160e560020a62461bcd0281526004016108fb90615980565b600054610100900460ff16158015610bb9576000805461ffff19166101011790555b610bc283611f5b565b610bcb826120a6565b60007fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c9604051610bfd91906158a6565b60405180910390a28015610892576000805461ff0019169055505050565b600080516020615ea2833981519152610c348133611cf1565b610c3c61211a565b50565b600080516020615ea2833981519152610c588133611cf1565b5060d255565b600080516020615ea2833981519152610c778133611cf1565b815160005b81811015610cdd5760cc6000858381518110610c9a57610c9a615e2c565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610cd581615dcb565b915050610c7c565b50505050565b60c954610d355760405160e560020a62461bcd02815260206004820152600e60248201527f517565756520697320656d70747900000000000000000000000000000000000060448201526064016108fb565b60d58054906000610d4583615dcb565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c9604051610d7991906158a6565b60405180910390a2610d8d60c96000614dfc565b565b600080516020615ea2833981519152610da88133611cf1565b610c3c6121b9565b600080516020615ea2833981519152610dc98133611cf1565b50600160a060020a03918216600090815260cc602052604090208054600160a060020a03191691909216179055565b60975460ff1615610e1e5760405160e560020a62461bcd0281526004016108fb90615949565b60cb545b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610eb057600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610e56565b5050505081526020016001820154815250509050806020015160001480610eda5750428160200151115b15610ee5575060cb55565b8051610ef090612214565b600082815260ca6020526040812090610f098282614dfc565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610f4881615dcb565b915050610e22565b600080516020615ea2833981519152610f698133611cf1565b50600160a060020a0316600090815260cc602052604090208054600160a060020a0319169055565b60cd54600160a060020a03908116600090815260cc60205260409020541680610fff5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108fb565b6110098284615bc1565b341161105a5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c7565203c3d2066656500000000000000000000000000000060448201526064016108fb565b60cd5461107390600160a060020a0316868686866124a8565b60ce54604051600160a060020a039091169084156108fc029085906000818181858888f193505050501580156110ad573d6000803e3d6000fd5b5060cf54604051600160a060020a039091169083156108fc029084906000818181858888f193505050501580156110e8573d6000803e3d6000fd5b506000826110f68534615c0c565b6111009190615c0c565b905060cd60009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b15801561115557600080fd5b505af1158015611169573d6000803e3d6000fd5b505060408051606081018252600160a060020a0380881682528c81166020830190815282840188815260c980546001810182556000918252945160039095027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054968616600160a060020a031997881617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d29840180549190951695169490941790925590517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55491513395507f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f44494506112a69350879087908b908b90958652600160a060020a0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b60405180910390a26112b661263b565b50505050505050565b6000918252606560209081526040808420600160a060020a0393909316845291905290205460ff1690565b600080516020615ea28339815191526113038133611cf1565b5060d355565b600080516020615ea28339815191526113228133611cf1565b5060ce8054600160a060020a031916600160a060020a0392909216919091179055565b6000828152606560205260409020600101546113618133611cf1565b6108928383611ef4565b600080516020615e828339815191526113848133611cf1565b60975460ff16156113aa5760405160e560020a62461bcd0281526004016108fb90615949565b6113b76020830183615b09565b602001357f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b60405160405180910390a26114006113f76020840184615b09565b602001356126b3565b60d054611417908390600160a060020a0316612718565b610b1f6114276020840184615b09565b611435906040810190615a58565b808060200260200160405190810160405280939291908181526020016000905b8282101561148157611472606083028601368190038101906154e8565b81526020019060010190611455565b50505050508380602001906114969190615b09565b6020013561284e565b604080518082019091526060815260006020820152600082815260ca60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b8282101561154257600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016114e8565b5050505081526020016001820154815250509050919050565b600285106115a45760e76000611572600288615c0c565b8152602001908152602001600020600080820160006115919190614e1d565b5060006102008201819055610201909101555b600085815260e76020526040812082915b828110156115fd578484828181106115cf576115cf615e2c565b90506020020135828261020081106115e9576115e9615e2c565b0155806115f581615dcb565b9150506115b5565b5050506000948552505060e760205260409092206102008101919091556102010155565b600080516020615ea283398151915261163a8133611cf1565b5060d755565b60975460ff16156116665760405160e560020a62461bcd0281526004016108fb90615949565b60cb5481146116ba5760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e740000000060448201526064016108fb565b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561174857600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016116ee565b505050508152602001600182015481525050905060008160200151116117b35760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e73666572732077697468207468697320696460448201526064016108fb565b428160200151106118095760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f742079657420706173736564000000000060448201526064016108fb565b805161181490612214565b600082815260ca602052604081209061182d8282614dfc565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a261186c826001615bc1565b60cb555050565b60008515611908576000805260cc6020527f435daec636ce435a90bde0aeec309a303a359a854c5a51b7d6a5a941d6db609454600160a060020a038a81169116146119035760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e0060448201526064016108fb565b611974565b50600160a060020a03808916600090815260cc602052604090205416806119745760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108fb565b61197e8284615bc1565b34146119cf5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d2066656500000000000000000000000000000060448201526064016108fb565b60008711611a225760405160e560020a62461bcd02815260206004820152601160248201527f43616e6e6f74207769746864726177203000000000000000000000000000000060448201526064016108fb565b611a2f89868686866124a8565b60ce54604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015611a69573d6000803e3d6000fd5b5060cf54604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611aa4573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101889052600160a060020a038a16906323b872dd90606401602060405180830381600087803b158015611b0c57600080fd5b505af1158015611b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4491906152b0565b611b935760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108fb565b6040805160608082018352600160a060020a038481168084528c821660208086019182528587018e815260c98054600181018255600091909152965160039097027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054988716600160a060020a0319998a1617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2984018054918716919098161790965594517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d5548551908152918e16938201939093529283019190915281018890526080810184905260a0810183905233907f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f4449060c00160405180910390a2611cc761263b565b505050505050505050565b600080516020615ea2833981519152611ceb8133611cf1565b5060d155565b611cfb82826112bf565b610b1f57611d1381600160a060020a03166014612911565b611d1e836020612911565b604051602001611d2f929190615812565b60408051601f198184030181529082905260e560020a62461bcd0282526108fb91600401615916565b8051825114611dd25760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d650060648201526084016108fb565b815160005b81811015610cdd57828181518110611df157611df1615e2c565b602002602001015160cc6000868481518110611e0f57611e0f615e2c565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611e6690615dcb565b915050611dd7565b611e7882826112bf565b610b1f576000828152606560209081526040808320600160a060020a03851684529091529020805460ff19166001179055611eb03390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611efe82826112bf565b15610b1f576000828152606560209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680611f74575060005460ff16155b611f935760405160e560020a62461bcd0281526004016108fb90615980565b600054610100900460ff16158015611fb5576000805461ffff19166101011790555b611fc0600033612afe565b611fdc600080516020615e828339815191528360400151612afe565b611ff8600080516020615ea28339815191528360200151612afe565b61200a82608001518360a00151611d58565b606082015160cd8054600160a060020a03928316600160a060020a031991821617909155835160d0805491841691831691909117905560c084015160ce805491841691831691909117905560e084015160cf805491909316911617905561014082015160d15561010082015160d25561012082015160d355600160cb81905560d555600360d7558015610b1f576000805461ff00191690555050565b600054610100900460ff16806120bf575060005460ff16155b6120de5760405160e560020a62461bcd0281526004016108fb90615980565b600054610100900460ff16158015612100576000805461ffff19166101011790555b60e88290558015610b1f576000805461ff00191690555050565b60975460ff1661216f5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108fb565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60975460ff16156121df5760405160e560020a62461bcd0281526004016108fb90615949565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861219c3390565b60005b8151811015610b1f576000600160a060020a031682828151811061223d5761223d615e2c565b602002602001015160000151600160a060020a031614156123595760cd548251600160a060020a0390911690632e1a7d4d9084908490811061228157612281615e2c565b6020026020010151604001516040518263ffffffff1660e060020a0281526004016122ae91815260200190565b600060405180830381600087803b1580156122c857600080fd5b505af11580156122dc573d6000803e3d6000fd5b505050508181815181106122f2576122f2615e2c565b602002602001015160200151600160a060020a03166108fc83838151811061231c5761231c615e2c565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015612353573d6000803e3d6000fd5b50612496565b81818151811061236b5761236b615e2c565b602002602001015160000151600160a060020a031663a9059cbb83838151811061239757612397615e2c565b6020026020010151602001518484815181106123b5576123b5615e2c565b6020026020010151604001516040518363ffffffff1660e060020a0281526004016123f5929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b15801561240f57600080fd5b505af1158015612423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244791906152b0565b6124965760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108fb565b806124a081615dcb565b915050612217565b600080806124b861070842615bd9565b905060005b60d7548110156125e8576040516c01000000000000000000000000600160a060020a038b1602602082015260348101839052605481018790526074810186905260940160408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c016040516020818303038152906040528051906020012093506125a18489898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b0892505050565b92506125bb600080516020615e82833981519152846112bf565b156125c95750505050612634565b816125d381615db4565b925050806125e081615dcb565b9150506124bd565b5060405160e560020a62461bcd02815260206004820152601660248201527f5369676e617475726520636865636b206661696c65640000000000000000000060448201526064016108fb565b5050505050565b600060d2544261264b9190615bd9565b905060d6548114610c3c5760d5805490600061266683615dcb565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c960405161269a91906158a6565b60405180910390a26126ae60c96000614dfc565b60d655565b60d4600081546126c290615dcb565b91829055508114610c3c5760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f7264657200000000000000000000000060448201526064016108fb565b600061273961272a6020850185615b09565b61273390615c4c565b83612b93565b905060005b6127488480615a0f565b9050811015610cdd578161275c8580615a0f565b8381811061276c5761276c615e2c565b905060200281019061277e9190615ae8565b60600135146127d25760405160e560020a62461bcd02815260206004820152601f60248201527f706172656e7448617368206f722072656365697074486173682077726f6e670060448201526064016108fb565b6128066127df8580615a0f565b838181106127ef576127ef615e2c565b90506020028101906128019190615ae8565b612c88565b915061283c6128158580615a0f565b8381811061282557612825615e2c565b90506020028101906128379190615ae8565b612d92565b8061284681615dcb565b91505061273e565b60d35461285b9042615bc1565b600082815260ca60205260408120600101919091555b825181101561089257600082815260ca60205260409020835184908390811061289c5761289c615e2c565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a039384161782559383015194810180549094169490911693909317909155604001516002909101558061290981615dcb565b915050612871565b60606000612920836002615bed565b61292b906002615bc1565b67ffffffffffffffff81111561294357612943615e45565b6040519080825280601f01601f19166020018201604052801561296d576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129a4576129a4615e2c565b6020010190600160f860020a031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106129ef576129ef615e2c565b6020010190600160f860020a031916908160001a9053506000612a13846002615bed565b612a1e906001615bc1565b90505b6001811115612aa5577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612a5f57612a5f615e2c565b1a60f860020a02828281518110612a7857612a78615e2c565b6020010190600160f860020a031916908160001a905350601090940493612a9e81615db4565b9050612a21565b508315612af75760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108fb565b9392505050565b610b1f8282611e6e565b6020810151604082015160608301516000929190831a601b811015612b2b57601b015b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015612b7e573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6000808360000151600081518110612bad57612bad615e2c565b6020026020010151838560000151600181518110612bcd57612bcd615e2c565b6020026020010151612be28760200151612ee8565b875180516002908110612bf757612bf7615e2c565b60200260200101518860400151604051602001612c149190615893565b6040516020818303038152906040528960000151600381518110612c3a57612c3a615e2c565b6020026020010151604051602001612c589796959493929190615701565b604051602081830303815290604052805190602001209050612c808460000151826004613050565b949350505050565b6000612c9760208301836152cd565b612ca46040840184615aa1565b6060850135612cb66080870187615aa1565b612cc360a0890189615aa1565b612cd060c08b018b615aa1565b604051602001612ce99a99989796959493929190615639565b60408051601f19818403018152919052612d0660e0840184615aa1565b612d14610100860186615aa1565b612d22610120880188615aa1565b612d306101408a018a615aa1565b612d3e6101608c018c615aa1565b604051602001612d579a999897969594939291906156b5565b60408051601f1981840301815290829052612d7592916020016157e3565b604051602081830303815290604052805190602001209050919050565b6000612dde612da460a0840184615aa1565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061310092505050565b905060e854811015612e355760405160e560020a62461bcd02815260206004820152601260248201527f646966666963756c747920746f6f206c6f77000000000000000000000000000060448201526064016108fb565b610b1f612e48612da460e0850185615aa1565b612e5184613133565b612e62612da4610140870187615aa1565b84612e71610180880188615a0f565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612eb1925050506101a0890189615a0f565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061322392505050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b6020811015612f7f57818181518110612f3157612f31615e2c565b60209101015160f860020a90819004027fff000000000000000000000000000000000000000000000000000000000000001615612f6d57612f7f565b80612f7781615dcb565b915050612f16565b6000612f8c826020615c0c565b67ffffffffffffffff811115612fa457612fa4615e45565b6040519080825280601f01601f191660200182016040528015612fce576020820181803683370190505b50905060005b8151811015613047578383612fe881615dcb565b945081518110612ffa57612ffa615e2c565b602001015160f860020a900460f860020a0282828151811061301e5761301e615e2c565b6020010190600160f860020a031916908160001a9053508061303f81615dcb565b915050612fd4565b50949350505050565b60006060825b85518110156130f65785818151811061307157613071615e2c565b602002602001015185878360016130889190615bc1565b8151811061309857613098615e2c565b60200260200101516040516020016130b2939291906157ac565b604051602081830303815290604052915060208251116130da576130d582615c23565b6130e2565b815160208301205b94506130ef600282615bc1565b9050613056565b5092949350505050565b6000815160086131109190615bed565b61311c90610100615c0c565b61312583615c23565b60029190910a900492915050565b60008061314660408401602085016152cd565b6131536040850185615aa1565b60608601356131656080880188615aa1565b60405160200161317a969594939291906155e5565b60408051601f1981840301815291905261319760a0850185615aa1565b6131a460c0870187615aa1565b6131b160e0890189615aa1565b6131bf6101008b018b615aa1565b6131cd6101608d018d615aa1565b6040516020016131e69a999897969594939291906156b5565b60408051601f198184030181529082905261320492916020016157e3565b60408051601f1981840301815291905280516020909101209392505050565b600061323161753088615bd9565b9050600061324287878686866132ac565b905061325085600019615bd9565b8111156132a25760405160e560020a62461bcd02815260206004820152601960248201527f45746861736820646966666963756c747920746f6f206c6f770000000000000060448201526064016108fb565b5050505050505050565b6000806132b98787613599565b90506132c3614e2d565b6132cb614e4c565b600085815260e76020526040812061020181015461020090910154909180826133395760405160e560020a62461bcd02815260206004820152601160248201527f45706f636844617461206e6f742073657400000000000000000000000000000060448201526064016108fb565b600091505b60108210156133705760208202878101805191880191825251610200909101528161336881615dcb565b92505061333e565b600091505b60408210156134f957865160009084906133b190851889613397602088615de6565b602081106133a7576133a7615e2c565b6020020151613640565b6133bb9190615de6565b90506133c78a82613660565b6133d482858f8f8a6136c5565b146134245760405160e560020a62461bcd02815260206004820152600a60248201527f506f57206661696c65640000000000000000000000000000000000000000000060448201526064016108fb565b600091505b60088210156134e657602060808481028e0182810180519386028b01805163ffffffff9586166301000193918202188616825260408401805161010084018051918916918402919091188816905260608501805161020085018051918a169185029190911889169052949095018051610300909301805193881693909202929092189095169094528051640100000000908190049091528251819004909252805182900490528151049052816134de81615dcb565b925050613429565b50816134f181615dcb565b925050613375565b600091505b602082101561357e5761354b61353f61353388856020811061352257613522615e2c565b602002015189613397876001615bc1565b88613397866002615bc1565b87613397856003615bc1565b85613557600485615bd9565b6008811061356757613567615e2c565b6020020152613577600483615bc1565b91506134fe565b61358887866138a0565b9d9c50505050505050505050505050565b6135a1614e6b565b6135a9614e8a565b6135b284613bd8565b67ffffffffffffffff8116825293506135d46801000000000000000085615bd9565b67ffffffffffffffff8116602083015293506135f96801000000000000000085615bd9565b67ffffffffffffffff81166040830152935061361e6801000000000000000085615bd9565b67ffffffffffffffff81166060830152608082018490529350612c8081613c1a565b600081613651846301000193615bed565b1863ffffffff16905092915050565b600082815260e760205260408120610201810154600290810a84049183918304610200811061369157613691615e2c565b015490506136a0600283615de6565b6136b6576001608060020a031691506108699050565b608060020a9004949350505050565b6000806136d28587613f2f565b6001608060020a031690506000808080806136ee600289615de6565b6002909804971190506000613703888c615bed565b90508115613718576137158b82615bc1565b90505b60005b888110156138135760208282010260208b01015193508c60011660001415613751578695506001608060020a0384169450613761565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965060018d166137b757869550608060020a840494506137c4565b608060020a840495508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a031696508061380b81615dcb565b91505061371b565b821561388f5760208282010260208b01015193508c60011660001415613847578695506001608060020a0384169450613857565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206001608060020a031696505b50949b9a5050505050505050505050565b60008083600760200201516138c2906c01000000000000000000000000615bed565b60c08501516138da9068010000000000000000615bed565b60a08601516138ee90640100000000615bed565b60808701516138fd9190615bc1565b6139079190615bc1565b6139119190615bc1565b61391f90608060020a615bed565b606085015161393b906c01000000000000000000000000615bed565b60408601516139539068010000000000000000615bed565b602087015161396790640100000000615bed565b87516139739190615bc1565b61397d9190615bc1565b6139879190615bc1565b6139919190615bc1565b9050600084600f60200201516139b4906c01000000000000000000000000615bed565b6101c08601516139cd9068010000000000000000615bed565b6101a08701516139e290640100000000615bed565b6101808801516139f29190615bc1565b6139fc9190615bc1565b613a069190615bc1565b613a1490608060020a615bed565b610160860151613a31906c01000000000000000000000000615bed565b610140870151613a4a9068010000000000000000615bed565b610120880151613a5f90640100000000615bed565b610100890151613a6f9190615bc1565b613a799190615bc1565b613a839190615bc1565b613a8d9190615bc1565b905060008460076020020151613ab0906c01000000000000000000000000615bed565b60c0860151613ac89068010000000000000000615bed565b60a0870151613adc90640100000000615bed565b6080880151613aeb9190615bc1565b613af59190615bc1565b613aff9190615bc1565b613b0d90608060020a615bed565b6060860151613b29906c01000000000000000000000000615bed565b6040870151613b419068010000000000000000615bed565b6020880151613b5590640100000000615bed565b8851613b619190615bc1565b613b6b9190615bc1565b613b759190615bc1565b613b7f9190615bc1565b9050613b8a83613bd8565b613b9383613bd8565b613b9c83613bd8565b604080516020810194909452830191909152606082015260800160408051808303601f1901815291905280516020909101209695505050505050565b60008060005b6020811015613c1357613bf860ff85166101008402615bc1565b61010090940493915080613c0b81615dcb565b915050613bde565b5092915050565b613c22614e6b565b613c2e60096008615bed565b604814613c805760405160e560020a62461bcd02815260206004820152600c60248201527f73706f6e6765206572726f72000000000000000000000000000000000000000060448201526064016108fb565b600160a0830152678000000000000000610100830152604860086000613ca7600983615bed565b9050613cb1614ea9565b600080805b613cc08786615bd9565b831015613de357600091505b6005821015613dc6575060005b6005811015613db457613cec8688615bd9565b613cf7836005615bed565b613d019083615bc1565b1015613da25788613d13836005615bed565b82613d1f866009615bed565b613d299190615bc1565b613d339190615bc1565b60098110613d4357613d43615e2c565b60200201518483613d55846005615bed565b613d5f9190615bc1565b60198110613d6f57613d6f615e2c565b6020020151188483613d82846005615bed565b613d8c9190615bc1565b60198110613d9c57613d9c615e2c565b60200201525b80613dac81615dcb565b915050613cd9565b81613dbe81615dcb565b925050613ccc565b613dcf84614030565b935082613ddb81615dcb565b935050613cb6565b613deb614e6b565b60005b6010811015613f2157600093505b6005841015613f1c57600092505b6005831015613f0a57613e1d888a615bd9565b613e28856005615bed565b613e329085615bc1565b108015613e3f5750601081105b15613ef8578584613e51856005615bed565b613e5b9190615bc1565b60198110613e6b57613e6b615e2c565b602002015163ffffffff16828260108110613e8857613e88615e2c565b60200201526401000000008685613ea0866005615bed565b613eaa9190615bc1565b60198110613eba57613eba615e2c565b6020020151613ec99190615bd9565b82613ed5836001615bc1565b60108110613ee557613ee5615e2c565b6020020152613ef5600282615bc1565b90505b82613f0281615dcb565b935050613e0a565b83613f1481615dcb565b945050613dfc565b613dee565b509998505050505050505050565b600082613f3d836004615bed565b81518110613f4d57613f4d615e2c565b602002602001015183836004613f639190615bed565b613f6e906001615bc1565b81518110613f7e57613f7e615e2c565b602002602001015184846004613f949190615bed565b613f9f906002615bc1565b81518110613faf57613faf615e2c565b602002602001015185856004613fc59190615bed565b613fd0906003615bc1565b81518110613fe057613fe0615e2c565b6020026020010151604051602001614011949392919093845260208401929092526040830152606082015260800190565b60408051808303601f1901815291905280516020909101209392505050565b614038614ea9565b614040614ea9565b614048614ec8565b614050614ec8565b600060405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b6018811015614df1576080808801516060808a01516040808c01516020808e01518e511890911890921890931888526101208b01516101008c015160e08d015160c08e015160a08f0151181818189088018190526101c08b01516101a08c01516101808d01516101608e01516101408f015118181818928801929092526102608a01516102408b01516102208c01516102008d01516101e08e015118181818908701526103008901516102e08a01516102c08b01516102a08c01516102808d015118181818918601919091526142559067800000000000000090615bd9565b6020850151614265906002615bed565b608086015167ffffffffffffffff919091169190911718835260408401516142969067800000000000000090615bd9565b60408501516142a6906002615bed565b855167ffffffffffffffff919091169190911718602084015260608401516142d79067800000000000000090615bd9565b60608501516142e7906002615bed565b67ffffffffffffffff16178460016020020151188360026020020152678000000000000000846004602002015161431e9190615bd9565b608085015161432e906002615bed565b604086015167ffffffffffffffff9190911691909117186060840152835161435f9067800000000000000090615bd9565b845161436c906002615bed565b60608087015167ffffffffffffffff929092169290921718608080860191825285518a5118808b52865160208c81018051909218825288516040808f01805190921890915289518e8801805190911890528951948e0180519095189094528801805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291870180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292860180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a0180519091189052908652516144f790631000000090615bd9565b602088015161450b90641000000000615bed565b67ffffffffffffffff161761010086015260408701516145349067200000000000000090615bd9565b6040880151614544906008615bed565b67ffffffffffffffff16176101608601526060870151614568906280000090615bd9565b606088015161457d9065020000000000615bed565b67ffffffffffffffff161761026086015260808701516145a4906540000000000090615bd9565b60808801516145b69062040000615bed565b67ffffffffffffffff16176102c086015260a08701516145df9067800000000000000090615bd9565b60a08801516145ef906002615bed565b67ffffffffffffffff1617604086015260c0870151614612906210000090615bd9565b60c08801516146279065100000000000615bed565b67ffffffffffffffff161760a086015260e087015161464e90664000000000000090615bd9565b60e088015161465f90610400615bed565b67ffffffffffffffff16176101a0860152610100870151614684906208000090615bd9565b61010088015161469a9065200000000000615bed565b67ffffffffffffffff16176102008601526101208701516146c49067400000000000000090615bd9565b6101208801516146d5906004615bed565b67ffffffffffffffff16176103008601526101408701516146f890600490615bd9565b61014088015161471090674000000000000000615bed565b67ffffffffffffffff161760808601526101608701516147399067040000000000000090615bd9565b61016088015161474a906040615bed565b67ffffffffffffffff161760e086015261018087015161476e906220000090615bd9565b6101808801516147849065080000000000615bed565b67ffffffffffffffff16176101408601526101a08701516147ad90660200000000000090615bd9565b6101a08801516147bf90618000615bed565b67ffffffffffffffff16176102408601526101c08701516147e290600890615bd9565b6101c08801516147fa90672000000000000000615bed565b67ffffffffffffffff16176102a08601526101e08701516148219064100000000090615bd9565b6101e0880151614835906310000000615bed565b67ffffffffffffffff16176020860152610200878101516148569190615bd9565b61020088015161486d906680000000000000615bed565b67ffffffffffffffff16176101208601526102208701516148949064800000000090615bd9565b6102208801516148a8906302000000615bed565b67ffffffffffffffff16176101808601526102408701516148d0906508000000000090615bd9565b6102408801516148e39062200000615bed565b67ffffffffffffffff16176101e08601526102608701516149079061010090615bd9565b61026088015161491f90670100000000000000615bed565b67ffffffffffffffff16176102e08601526102808701516149469064200000000090615bd9565b61028088015161495a906308000000615bed565b67ffffffffffffffff161760608601526102a0870151614981906510000000000090615bd9565b6102a08801516149949062100000615bed565b67ffffffffffffffff161760c08601526102c08701516149b990630200000090615bd9565b6102c08801516149ce90648000000000615bed565b67ffffffffffffffff16176101c08601526102e08701516149f89067010000000000000090615bd9565b6102e0880151614a0a90610100615bed565b67ffffffffffffffff1617610220860152610300870151614a3390660400000000000090615bd9565b610300880151614a4590614000615bed565b67ffffffffffffffff1617856014602002015284600a602002015185600560200201511916856000602002015118876000602002015284600b602002015185600660200201511916856001602002015118876001602002015284600c602002015185600760200201511916856002602002015118876002602002015284600d602002015185600860200201511916856003602002015118876003602002015284600e602002015185600960200201511916856004602002015118876004602002015284600f602002015185600a602002015119168560056020020151188760056020020152846010602002015185600b602002015119168560066020020151188760066020020152846011602002015185600c602002015119168560076020020151188760076020020152846012602002015185600d602002015119168560086020020151188760086020020152846013602002015185600e602002015119168560096020020151188760096020020152846014602002015185600f6020020151191685600a60200201511887600a602002015284601560200201518560106020020151191685600b60200201511887600b602002015284601660200201518560116020020151191685600c60200201511887600c602002015284601760200201518560126020020151191685600d60200201511887600d602002015284601860200201518560136020020151191685600e60200201511887600e602002015284600060200201518560146020020151191685600f60200201511887600fdd557614dd5615e2c565b6020020151875118875280614de981615dcb565b915050614176565b509495945050505050565b5080546000825560030290600052602060002090810190610c3c9190614ee6565b50610c3c90610200810190614f1d565b6040518061040001604052806020906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b6040518061020001604052806010906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b5b80821115614f19578054600160a060020a03199081168255600182018054909116905560006002820155600301614ee7565b5090565b5b80821115614f195760008155600101614f1e565b8035614f3d81615e5e565b919050565b600082601f830112614f5357600080fd5b81356020614f68614f6383615b9d565b615b6c565b8281528181019085830183850287018401881015614f8557600080fd5b60005b85811015614fad578135614f9b81615e5e565b84529284019290840190600101614f88565b5090979650505050505050565b600082601f830112614fcb57600080fd5b81356020614fdb614f6383615b9d565b82815281810190858301606080860288018501891015614ffa57600080fd5b60005b868110156150215761500f8a84615078565b85529385019391810191600101614ffd565b509198975050505050505050565b60008083601f84011261504157600080fd5b50813567ffffffffffffffff81111561505957600080fd5b60208301915083602082850101111561507157600080fd5b9250929050565b60006060828403121561508a57600080fd5b615092615b1f565b9050813561509f81615e5e565b815260208201356150af81615e5e565b806020830152506040820135604082015292915050565b6000602082840312156150d857600080fd5b8135612af781615e5e565b600080604083850312156150f657600080fd5b823561510181615e5e565b9150602083013561511181615e5e565b809150509250929050565b60008060008060008060008060e0898b03121561513857600080fd5b883561514381615e5e565b9750602089013561515381615e5e565b965060408901359550606089013561516a81615e73565b9450608089013567ffffffffffffffff81111561518657600080fd5b6151928b828c0161502f565b999c989b5096999598969760a08701359660c0013595509350505050565b6000806000806000608086880312156151c857600080fd5b85356151d381615e5e565b9450602086013567ffffffffffffffff8111156151ef57600080fd5b6151fb8882890161502f565b9699909850959660408101359660609091013595509350505050565b60006020828403121561522957600080fd5b813567ffffffffffffffff81111561524057600080fd5b612c8084828501614f42565b6000806040838503121561525f57600080fd5b823567ffffffffffffffff8082111561527757600080fd5b61528386838701614f42565b9350602085013591508082111561529957600080fd5b506152a685828601614f42565b9150509250929050565b6000602082840312156152c257600080fd5b8151612af781615e73565b6000602082840312156152df57600080fd5b81357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612af757600080fd5b60006020828403121561531f57600080fd5b5035919050565b6000806040838503121561533957600080fd5b82359150602083013561511181615e5e565b60006020828403121561535d57600080fd5b81357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612af757600080fd5b6000806040838503121561539d57600080fd5b823567ffffffffffffffff808211156153b557600080fd5b9084019061016082870312156153ca57600080fd5b6153d2615b48565b6153db83614f32565b81526153e960208401614f32565b60208201526153fa60408401614f32565b604082015261540b60608401614f32565b606082015260808301358281111561542257600080fd5b61542e88828601614f42565b60808301525060a08301358281111561544657600080fd5b61545288828601614f42565b60a08301525061546460c08401614f32565b60c082015261547560e08401614f32565b60e082015261010083810135908201526101208084013590820152610140928301359281019290925250946020939093013593505050565b6000602082840312156154bf57600080fd5b813567ffffffffffffffff8111156154d657600080fd5b820160408185031215612af757600080fd5b6000606082840312156154fa57600080fd5b612af78383615078565b60008060008060006080868803121561551c57600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff8082111561554957600080fd5b818801915088601f83011261555d57600080fd5b81358181111561556c57600080fd5b896020808302850101111561558057600080fd5b9699959850939650602001949392505050565b600081518084526020808501945080840160005b83811015614df15781518051600160a060020a03908116895284820151168489015260409081015190880152606090960195908201906001016155a7565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19871681528486600383013784810160038101859052600090838560238301376000930160230192835250909695505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198b168152888a600383013788810160038101899052600090878960238301378781019050602381016000815286888237508581019050602381016000815284868237506000930160230192835250909a9950505050505050505050565b898b823760008a820160008152898b82376000908a01908152878982376000908801908152858782376000908601908152838582376000930192835250909a9950505050505050505050565b6000885160206157148285838e01615d88565b81840191506c01000000000000000000000000600160a060020a038b160282526014895161574781838601858e01615d88565b895193019261575b81838601858d01615d88565b885193019261576f81838601858c01615d88565b875193019261578381838601858b01615d88565b865193019261579781838601858a01615d88565b929092019091019a9950505050505050505050565b600084516157be818460208901615d88565b820184815283516157d6816020808501908801615d88565b0160200195945050505050565b600083516157f5818460208801615d88565b835190830190615809818360208801615d88565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161584a816017850160208801615d88565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615887816028840160208801615d88565b01602801949350505050565b602081526000612af76020830184615593565b60006020808301818452808554808352604092508286019150866000528360002060005b82811015615909578154600160a060020a03908116855260018084015490911687860152600283015486860152606090940193600390920191016158ca565b5091979650505050505050565b6020815260008251806020840152615935816040850160208701615d88565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020815260008251604060208401526159f96060840182615593565b9050602084015160408401528091505092915050565b6000808335601e19843603018112615a2657600080fd5b83018035915067ffffffffffffffff821115615a4157600080fd5b602090810192508102360382131561507157600080fd5b6000808335601e19843603018112615a6f57600080fd5b83018035915067ffffffffffffffff821115615a8a57600080fd5b602001915060608102360382131561507157600080fd5b6000808335601e19843603018112615ab857600080fd5b83018035915067ffffffffffffffff821115615ad357600080fd5b60200191503681900382131561507157600080fd5b600082356101be19833603018112615aff57600080fd5b9190910192915050565b60008235605e19833603018112615aff57600080fd5b6040516060810167ffffffffffffffff81118282101715615b4257615b42615e45565b60405290565b604051610160810167ffffffffffffffff81118282101715615b4257615b42615e45565b604051601f8201601f1916810167ffffffffffffffff81118282101715615b9557615b95615e45565b604052919050565b600067ffffffffffffffff821115615bb757615bb7615e45565b5060209081020190565b60008219821115615bd457615bd4615dfa565b500190565b600082615be857615be8615e13565b500490565b6000816000190483118215151615615c0757615c07615dfa565b500290565b600082821015615c1e57615c1e615dfa565b500390565b80516020808301519190811015615c46578060200360080260020a600003821691505b50919050565b600060608236031215615c5e57600080fd5b615c66615b1f565b823567ffffffffffffffff80821115615c7e57600080fd5b90840190601f3681840112615c9257600080fd5b82356020615ca2614f6383615b9d565b8281528181019086830136848602890185011115615cbf57600080fd5b60005b85811015615d4c57813588811115615cd957600080fd5b890136603f820112615cea57600080fd5b8581013560408a821115615d0057615d00615e45565b615d11828b01601f19168901615b6c565b8281523682848601011115615d2557600080fd5b828285018a8301376000928101890192909252508552509284019290840190600101615cc2565b5050875250878101359086015250506040850135915080821115615d6f57600080fd5b50615d7c36828601614fba565b60408301525092915050565b60005b83811015615da3578181015183820152602001615d8b565b83811115610cdd5750506000910152565b600081615dc357615dc3615dfa565b506000190190565b6000600019821415615ddf57615ddf615dfa565b5060010190565b600082615df557615df5615e13565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610c3c57600080fd5b8015158114610c3c57600080fdfe077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220d4a8f78b45c6283ecdd500be1c672b1c26988f03ed2c2cd670edd588094f505664736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102645760003560e060020a900480638ac1f86f11610148578063baeebe75116100ba578063e88b66261161007e578063e88b662614610729578063f33fe10f14610749578063f700558714610769578063f862b7eb14610789578063f8b74433146107a9578063fd5d2ef3146107bc57600080fd5b8063baeebe7514610673578063c7b81f4f14610689578063d547741f146106bc578063e1d862be146106dc578063e31be087146106fc57600080fd5b806396cf52271161010c57806396cf5227146105bc57806399b5bb64146105dc578063a217fddf146105f2578063b6d3385e14610607578063b87330e91461063d578063ba8bbbe01461065d57600080fd5b80638ac1f86f1461053e5780638e5df9c71461055357806391c5bc0a1461057357806391d1485414610586578063924cf6e0146105a657600080fd5b80633f45c799116101e15780635c975abb116101a55780635c975abb14610482578063746b5c421461049a57806375b238fc146104af5780637df8b802146104d15780638456cb5914610509578063853890ae1461051e57600080fd5b80633f45c799146103dd5780633f4ba83a146103fd57806342180fb8146104125780634a1856de146104325780635249a7051461046257600080fd5b8063248a9ca311610228578063248a9ca31461032d5780632f2ff15d1461035d578063331a891a1461037d57806336568abe1461039d5780633928b296146103bd57600080fd5b806301ffc9a71461027057806304421823146102a557806309fce356146102d55780630d668087146102f757806321d3d5361461030d57600080fd5b3661026b57005b600080fd5b34801561027c57600080fd5b5061029061028b36600461534b565b6107dc565b60405190151581526020015b60405180910390f35b3480156102b157600080fd5b506102c7600080516020615e8283398151915281565b60405190815260200161029c565b3480156102e157600080fd5b506102f56102f036600461524c565b61086f565b005b34801561030357600080fd5b506102c760d35481565b34801561031957600080fd5b506102f56103283660046150c6565b610897565b34801561033957600080fd5b506102c761034836600461530d565b60009081526065602052604090206001015490565b34801561036957600080fd5b506102f5610378366004615326565b610927565b34801561038957600080fd5b506102f561039836600461530d565b61094d565b3480156103a957600080fd5b506102f56103b8366004615326565b610a94565b3480156103c957600080fd5b506102f56103d83660046150c6565b610b23565b3480156103e957600080fd5b506102f56103f836600461538a565b610b5f565b34801561040957600080fd5b506102f5610c1b565b34801561041e57600080fd5b506102f561042d36600461530d565b610c3f565b34801561043e57600080fd5b506102c761044d36600461530d565b60ca6020526000908152604090206001015481565b34801561046e57600080fd5b506102f561047d366004615217565b610c5e565b34801561048e57600080fd5b5060975460ff16610290565b3480156104a657600080fd5b506102f5610ce3565b3480156104bb57600080fd5b506102c7600080516020615ea283398151915281565b3480156104dd57600080fd5b5060cd546104f190600160a060020a031681565b604051600160a060020a03909116815260200161029c565b34801561051557600080fd5b506102f5610d8f565b34801561052a57600080fd5b506102f56105393660046150e3565b610db0565b34801561054a57600080fd5b506102f5610df8565b34801561055f57600080fd5b506102f561056e3660046150c6565b610f50565b6102f56105813660046151b0565b610f91565b34801561059257600080fd5b506102906105a1366004615326565b6112bf565b3480156105b257600080fd5b506102c760d15481565b3480156105c857600080fd5b506102f56105d736600461530d565b6112ea565b3480156105e857600080fd5b506102c760d45481565b3480156105fe57600080fd5b506102c7600081565b34801561061357600080fd5b506104f16106223660046150c6565b60cc60205260009081526040902054600160a060020a031681565b34801561064957600080fd5b506102f56106583660046150c6565b611309565b34801561066957600080fd5b506102c760cb5481565b34801561067f57600080fd5b506102c760d25481565b34801561069557600080fd5b506102906106a436600461530d565b600090815260e7602052604090206102000154151590565b3480156106c857600080fd5b506102f56106d7366004615326565b611345565b3480156106e857600080fd5b506102f56106f73660046154ad565b61136b565b34801561070857600080fd5b5061071c61071736600461530d565b61149f565b60405161029c91906159dd565b34801561073557600080fd5b506102f5610744366004615504565b61155b565b34801561075557600080fd5b5060d0546104f190600160a060020a031681565b34801561077557600080fd5b506102f561078436600461530d565b611621565b34801561079557600080fd5b506102f56107a436600461530d565b611640565b6102f56107b736600461511c565b611873565b3480156107c857600080fd5b506102f56107d736600461530d565b611cd2565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b00000000000000000000000000000000000000000000000000000000148061086957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b600080516020615ea28339815191526108888133611cf1565b6108928383611d58565b505050565b60006108a38133611cf1565b60d054600160a060020a0316156109045760405160e560020a62461bcd02815260206004820152601d60248201527f736964654272696467654164647265737320616c72656164792073657400000060448201526064015b60405180910390fd5b5060d08054600160a060020a031916600160a060020a0392909216919091179055565b6000828152606560205260409020600101546109438133611cf1565b6108928383611e6e565b600080516020615ea28339815191526109668133611cf1565b60975460ff166109bb5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108fb565b60cb54821015610a365760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e744964000000000000000000000000000000000000000000000000000060648201526084016108fb565b600082815260ca602052604090206001015415610a8257600082815260ca6020526040812090610a668282614dfc565b5060006001919091015581610a7a81615dcb565b925050610a36565b610a8d600183615c0c565b60d4555050565b600160a060020a0381163314610b155760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108fb565b610b1f8282611ef4565b5050565b600080516020615ea2833981519152610b3c8133611cf1565b5060cf8054600160a060020a031916600160a060020a0392909216919091179055565b600054610100900460ff1680610b78575060005460ff16155b610b975760405160e560020a62461bcd0281526004016108fb90615980565b600054610100900460ff16158015610bb9576000805461ffff19166101011790555b610bc283611f5b565b610bcb826120a6565b60007fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c9604051610bfd91906158a6565b60405180910390a28015610892576000805461ff0019169055505050565b600080516020615ea2833981519152610c348133611cf1565b610c3c61211a565b50565b600080516020615ea2833981519152610c588133611cf1565b5060d255565b600080516020615ea2833981519152610c778133611cf1565b815160005b81811015610cdd5760cc6000858381518110610c9a57610c9a615e2c565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610cd581615dcb565b915050610c7c565b50505050565b60c954610d355760405160e560020a62461bcd02815260206004820152600e60248201527f517565756520697320656d70747900000000000000000000000000000000000060448201526064016108fb565b60d58054906000610d4583615dcb565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c9604051610d7991906158a6565b60405180910390a2610d8d60c96000614dfc565b565b600080516020615ea2833981519152610da88133611cf1565b610c3c6121b9565b600080516020615ea2833981519152610dc98133611cf1565b50600160a060020a03918216600090815260cc602052604090208054600160a060020a03191691909216179055565b60975460ff1615610e1e5760405160e560020a62461bcd0281526004016108fb90615949565b60cb545b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610eb057600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610e56565b5050505081526020016001820154815250509050806020015160001480610eda5750428160200151115b15610ee5575060cb55565b8051610ef090612214565b600082815260ca6020526040812090610f098282614dfc565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610f4881615dcb565b915050610e22565b600080516020615ea2833981519152610f698133611cf1565b50600160a060020a0316600090815260cc602052604090208054600160a060020a0319169055565b60cd54600160a060020a03908116600090815260cc60205260409020541680610fff5760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108fb565b6110098284615bc1565b341161105a5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c7565203c3d2066656500000000000000000000000000000060448201526064016108fb565b60cd5461107390600160a060020a0316868686866124a8565b60ce54604051600160a060020a039091169084156108fc029085906000818181858888f193505050501580156110ad573d6000803e3d6000fd5b5060cf54604051600160a060020a039091169083156108fc029084906000818181858888f193505050501580156110e8573d6000803e3d6000fd5b506000826110f68534615c0c565b6111009190615c0c565b905060cd60009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b15801561115557600080fd5b505af1158015611169573d6000803e3d6000fd5b505060408051606081018252600160a060020a0380881682528c81166020830190815282840188815260c980546001810182556000918252945160039095027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054968616600160a060020a031997881617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d29840180549190951695169490941790925590517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55491513395507f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f44494506112a69350879087908b908b90958652600160a060020a0394851660208701529290931660408501526060840152608083019190915260a082015260c00190565b60405180910390a26112b661263b565b50505050505050565b6000918252606560209081526040808420600160a060020a0393909316845291905290205460ff1690565b600080516020615ea28339815191526113038133611cf1565b5060d355565b600080516020615ea28339815191526113228133611cf1565b5060ce8054600160a060020a031916600160a060020a0392909216919091179055565b6000828152606560205260409020600101546113618133611cf1565b6108928383611ef4565b600080516020615e828339815191526113848133611cf1565b60975460ff16156113aa5760405160e560020a62461bcd0281526004016108fb90615949565b6113b76020830183615b09565b602001357f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b60405160405180910390a26114006113f76020840184615b09565b602001356126b3565b60d054611417908390600160a060020a0316612718565b610b1f6114276020840184615b09565b611435906040810190615a58565b808060200260200160405190810160405280939291908181526020016000905b8282101561148157611472606083028601368190038101906154e8565b81526020019060010190611455565b50505050508380602001906114969190615b09565b6020013561284e565b604080518082019091526060815260006020820152600082815260ca60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b8282101561154257600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016114e8565b5050505081526020016001820154815250509050919050565b600285106115a45760e76000611572600288615c0c565b8152602001908152602001600020600080820160006115919190614e1d565b5060006102008201819055610201909101555b600085815260e76020526040812082915b828110156115fd578484828181106115cf576115cf615e2c565b90506020020135828261020081106115e9576115e9615e2c565b0155806115f581615dcb565b9150506115b5565b5050506000948552505060e760205260409092206102008101919091556102010155565b600080516020615ea283398151915261163a8133611cf1565b5060d755565b60975460ff16156116665760405160e560020a62461bcd0281526004016108fb90615949565b60cb5481146116ba5760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e740000000060448201526064016108fb565b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b8282101561174857600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016116ee565b505050508152602001600182015481525050905060008160200151116117b35760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e73666572732077697468207468697320696460448201526064016108fb565b428160200151106118095760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f742079657420706173736564000000000060448201526064016108fb565b805161181490612214565b600082815260ca602052604081209061182d8282614dfc565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a261186c826001615bc1565b60cb555050565b60008515611908576000805260cc6020527f435daec636ce435a90bde0aeec309a303a359a854c5a51b7d6a5a941d6db609454600160a060020a038a81169116146119035760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e0060448201526064016108fb565b611974565b50600160a060020a03808916600090815260cc602052604090205416806119745760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108fb565b61197e8284615bc1565b34146119cf5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d2066656500000000000000000000000000000060448201526064016108fb565b60008711611a225760405160e560020a62461bcd02815260206004820152601160248201527f43616e6e6f74207769746864726177203000000000000000000000000000000060448201526064016108fb565b611a2f89868686866124a8565b60ce54604051600160a060020a039091169084156108fc029085906000818181858888f19350505050158015611a69573d6000803e3d6000fd5b5060cf54604051600160a060020a039091169083156108fc029084906000818181858888f19350505050158015611aa4573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101889052600160a060020a038a16906323b872dd90606401602060405180830381600087803b158015611b0c57600080fd5b505af1158015611b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4491906152b0565b611b935760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108fb565b6040805160608082018352600160a060020a038481168084528c821660208086019182528587018e815260c98054600181018255600091909152965160039097027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054988716600160a060020a0319998a1617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2984018054918716919098161790965594517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d5548551908152918e16938201939093529283019190915281018890526080810184905260a0810183905233907f3b823d3b837159352faddd1e0b9e9f584ca2bfe976238f6a9e6da4615cf2f4449060c00160405180910390a2611cc761263b565b505050505050505050565b600080516020615ea2833981519152611ceb8133611cf1565b5060d155565b611cfb82826112bf565b610b1f57611d1381600160a060020a03166014612911565b611d1e836020612911565b604051602001611d2f929190615812565b60408051601f198184030181529082905260e560020a62461bcd0282526108fb91600401615916565b8051825114611dd25760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d650060648201526084016108fb565b815160005b81811015610cdd57828181518110611df157611df1615e2c565b602002602001015160cc6000868481518110611e0f57611e0f615e2c565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611e6690615dcb565b915050611dd7565b611e7882826112bf565b610b1f576000828152606560209081526040808320600160a060020a03851684529091529020805460ff19166001179055611eb03390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611efe82826112bf565b15610b1f576000828152606560209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600054610100900460ff1680611f74575060005460ff16155b611f935760405160e560020a62461bcd0281526004016108fb90615980565b600054610100900460ff16158015611fb5576000805461ffff19166101011790555b611fc0600033612afe565b611fdc600080516020615e828339815191528360400151612afe565b611ff8600080516020615ea28339815191528360200151612afe565b61200a82608001518360a00151611d58565b606082015160cd8054600160a060020a03928316600160a060020a031991821617909155835160d0805491841691831691909117905560c084015160ce805491841691831691909117905560e084015160cf805491909316911617905561014082015160d15561010082015160d25561012082015160d355600160cb81905560d555600360d7558015610b1f576000805461ff00191690555050565b600054610100900460ff16806120bf575060005460ff16155b6120de5760405160e560020a62461bcd0281526004016108fb90615980565b600054610100900460ff16158015612100576000805461ffff19166101011790555b60e88290558015610b1f576000805461ff00191690555050565b60975460ff1661216f5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108fb565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60975460ff16156121df5760405160e560020a62461bcd0281526004016108fb90615949565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861219c3390565b60005b8151811015610b1f576000600160a060020a031682828151811061223d5761223d615e2c565b602002602001015160000151600160a060020a031614156123595760cd548251600160a060020a0390911690632e1a7d4d9084908490811061228157612281615e2c565b6020026020010151604001516040518263ffffffff1660e060020a0281526004016122ae91815260200190565b600060405180830381600087803b1580156122c857600080fd5b505af11580156122dc573d6000803e3d6000fd5b505050508181815181106122f2576122f2615e2c565b602002602001015160200151600160a060020a03166108fc83838151811061231c5761231c615e2c565b6020026020010151604001519081150290604051600060405180830381858888f19350505050158015612353573d6000803e3d6000fd5b50612496565b81818151811061236b5761236b615e2c565b602002602001015160000151600160a060020a031663a9059cbb83838151811061239757612397615e2c565b6020026020010151602001518484815181106123b5576123b5615e2c565b6020026020010151604001516040518363ffffffff1660e060020a0281526004016123f5929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b15801561240f57600080fd5b505af1158015612423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244791906152b0565b6124965760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108fb565b806124a081615dcb565b915050612217565b600080806124b861070842615bd9565b905060005b60d7548110156125e8576040516c01000000000000000000000000600160a060020a038b1602602082015260348101839052605481018790526074810186905260940160408051601f198184030181529082905280516020918201207f19457468657265756d205369676e6564204d6573736167653a0a33320000000091830191909152603c820152605c016040516020818303038152906040528051906020012093506125a18489898080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612b0892505050565b92506125bb600080516020615e82833981519152846112bf565b156125c95750505050612634565b816125d381615db4565b925050806125e081615dcb565b9150506124bd565b5060405160e560020a62461bcd02815260206004820152601660248201527f5369676e617475726520636865636b206661696c65640000000000000000000060448201526064016108fb565b5050505050565b600060d2544261264b9190615bd9565b905060d6548114610c3c5760d5805490600061266683615dcb565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c960405161269a91906158a6565b60405180910390a26126ae60c96000614dfc565b60d655565b60d4600081546126c290615dcb565b91829055508114610c3c5760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f7264657200000000000000000000000060448201526064016108fb565b600061273961272a6020850185615b09565b61273390615c4c565b83612b93565b905060005b6127488480615a0f565b9050811015610cdd578161275c8580615a0f565b8381811061276c5761276c615e2c565b905060200281019061277e9190615ae8565b60600135146127d25760405160e560020a62461bcd02815260206004820152601f60248201527f706172656e7448617368206f722072656365697074486173682077726f6e670060448201526064016108fb565b6128066127df8580615a0f565b838181106127ef576127ef615e2c565b90506020028101906128019190615ae8565b612c88565b915061283c6128158580615a0f565b8381811061282557612825615e2c565b90506020028101906128379190615ae8565b612d92565b8061284681615dcb565b91505061273e565b60d35461285b9042615bc1565b600082815260ca60205260408120600101919091555b825181101561089257600082815260ca60205260409020835184908390811061289c5761289c615e2c565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a039384161782559383015194810180549094169490911693909317909155604001516002909101558061290981615dcb565b915050612871565b60606000612920836002615bed565b61292b906002615bc1565b67ffffffffffffffff81111561294357612943615e45565b6040519080825280601f01601f19166020018201604052801561296d576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129a4576129a4615e2c565b6020010190600160f860020a031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106129ef576129ef615e2c565b6020010190600160f860020a031916908160001a9053506000612a13846002615bed565b612a1e906001615bc1565b90505b6001811115612aa5577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612a5f57612a5f615e2c565b1a60f860020a02828281518110612a7857612a78615e2c565b6020010190600160f860020a031916908160001a905350601090940493612a9e81615db4565b9050612a21565b508315612af75760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108fb565b9392505050565b610b1f8282611e6e565b6020810151604082015160608301516000929190831a601b811015612b2b57601b015b60408051600081526020810180835288905260ff831691810191909152606081018490526080810183905260019060a0016020604051602081039080840390855afa158015612b7e573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6000808360000151600081518110612bad57612bad615e2c565b6020026020010151838560000151600181518110612bcd57612bcd615e2c565b6020026020010151612be28760200151612ee8565b875180516002908110612bf757612bf7615e2c565b60200260200101518860400151604051602001612c149190615893565b6040516020818303038152906040528960000151600381518110612c3a57612c3a615e2c565b6020026020010151604051602001612c589796959493929190615701565b604051602081830303815290604052805190602001209050612c808460000151826004613050565b949350505050565b6000612c9760208301836152cd565b612ca46040840184615aa1565b6060850135612cb66080870187615aa1565b612cc360a0890189615aa1565b612cd060c08b018b615aa1565b604051602001612ce99a99989796959493929190615639565b60408051601f19818403018152919052612d0660e0840184615aa1565b612d14610100860186615aa1565b612d22610120880188615aa1565b612d306101408a018a615aa1565b612d3e6101608c018c615aa1565b604051602001612d579a999897969594939291906156b5565b60408051601f1981840301815290829052612d7592916020016157e3565b604051602081830303815290604052805190602001209050919050565b6000612dde612da460a0840184615aa1565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061310092505050565b905060e854811015612e355760405160e560020a62461bcd02815260206004820152601260248201527f646966666963756c747920746f6f206c6f77000000000000000000000000000060448201526064016108fb565b610b1f612e48612da460e0850185615aa1565b612e5184613133565b612e62612da4610140870187615aa1565b84612e71610180880188615a0f565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612eb1925050506101a0890189615a0f565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061322392505050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b6020811015612f7f57818181518110612f3157612f31615e2c565b60209101015160f860020a90819004027fff000000000000000000000000000000000000000000000000000000000000001615612f6d57612f7f565b80612f7781615dcb565b915050612f16565b6000612f8c826020615c0c565b67ffffffffffffffff811115612fa457612fa4615e45565b6040519080825280601f01601f191660200182016040528015612fce576020820181803683370190505b50905060005b8151811015613047578383612fe881615dcb565b945081518110612ffa57612ffa615e2c565b602001015160f860020a900460f860020a0282828151811061301e5761301e615e2c565b6020010190600160f860020a031916908160001a9053508061303f81615dcb565b915050612fd4565b50949350505050565b60006060825b85518110156130f65785818151811061307157613071615e2c565b602002602001015185878360016130889190615bc1565b8151811061309857613098615e2c565b60200260200101516040516020016130b2939291906157ac565b604051602081830303815290604052915060208251116130da576130d582615c23565b6130e2565b815160208301205b94506130ef600282615bc1565b9050613056565b5092949350505050565b6000815160086131109190615bed565b61311c90610100615c0c565b61312583615c23565b60029190910a900492915050565b60008061314660408401602085016152cd565b6131536040850185615aa1565b60608601356131656080880188615aa1565b60405160200161317a969594939291906155e5565b60408051601f1981840301815291905261319760a0850185615aa1565b6131a460c0870187615aa1565b6131b160e0890189615aa1565b6131bf6101008b018b615aa1565b6131cd6101608d018d615aa1565b6040516020016131e69a999897969594939291906156b5565b60408051601f198184030181529082905261320492916020016157e3565b60408051601f1981840301815291905280516020909101209392505050565b600061323161753088615bd9565b9050600061324287878686866132ac565b905061325085600019615bd9565b8111156132a25760405160e560020a62461bcd02815260206004820152601960248201527f45746861736820646966666963756c747920746f6f206c6f770000000000000060448201526064016108fb565b5050505050505050565b6000806132b98787613599565b90506132c3614e2d565b6132cb614e4c565b600085815260e76020526040812061020181015461020090910154909180826133395760405160e560020a62461bcd02815260206004820152601160248201527f45706f636844617461206e6f742073657400000000000000000000000000000060448201526064016108fb565b600091505b60108210156133705760208202878101805191880191825251610200909101528161336881615dcb565b92505061333e565b600091505b60408210156134f957865160009084906133b190851889613397602088615de6565b602081106133a7576133a7615e2c565b6020020151613640565b6133bb9190615de6565b90506133c78a82613660565b6133d482858f8f8a6136c5565b146134245760405160e560020a62461bcd02815260206004820152600a60248201527f506f57206661696c65640000000000000000000000000000000000000000000060448201526064016108fb565b600091505b60088210156134e657602060808481028e0182810180519386028b01805163ffffffff9586166301000193918202188616825260408401805161010084018051918916918402919091188816905260608501805161020085018051918a169185029190911889169052949095018051610300909301805193881693909202929092189095169094528051640100000000908190049091528251819004909252805182900490528151049052816134de81615dcb565b925050613429565b50816134f181615dcb565b925050613375565b600091505b602082101561357e5761354b61353f61353388856020811061352257613522615e2c565b602002015189613397876001615bc1565b88613397866002615bc1565b87613397856003615bc1565b85613557600485615bd9565b6008811061356757613567615e2c565b6020020152613577600483615bc1565b91506134fe565b61358887866138a0565b9d9c50505050505050505050505050565b6135a1614e6b565b6135a9614e8a565b6135b284613bd8565b67ffffffffffffffff8116825293506135d46801000000000000000085615bd9565b67ffffffffffffffff8116602083015293506135f96801000000000000000085615bd9565b67ffffffffffffffff81166040830152935061361e6801000000000000000085615bd9565b67ffffffffffffffff81166060830152608082018490529350612c8081613c1a565b600081613651846301000193615bed565b1863ffffffff16905092915050565b600082815260e760205260408120610201810154600290810a84049183918304610200811061369157613691615e2c565b015490506136a0600283615de6565b6136b6576001608060020a031691506108699050565b608060020a9004949350505050565b6000806136d28587613f2f565b6001608060020a031690506000808080806136ee600289615de6565b6002909804971190506000613703888c615bed565b90508115613718576137158b82615bc1565b90505b60005b888110156138135760208282010260208b01015193508c60011660001415613751578695506001608060020a0384169450613761565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965060018d166137b757869550608060020a840494506137c4565b608060020a840495508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a031696508061380b81615dcb565b91505061371b565b821561388f5760208282010260208b01015193508c60011660001415613847578695506001608060020a0384169450613857565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206001608060020a031696505b50949b9a5050505050505050505050565b60008083600760200201516138c2906c01000000000000000000000000615bed565b60c08501516138da9068010000000000000000615bed565b60a08601516138ee90640100000000615bed565b60808701516138fd9190615bc1565b6139079190615bc1565b6139119190615bc1565b61391f90608060020a615bed565b606085015161393b906c01000000000000000000000000615bed565b60408601516139539068010000000000000000615bed565b602087015161396790640100000000615bed565b87516139739190615bc1565b61397d9190615bc1565b6139879190615bc1565b6139919190615bc1565b9050600084600f60200201516139b4906c01000000000000000000000000615bed565b6101c08601516139cd9068010000000000000000615bed565b6101a08701516139e290640100000000615bed565b6101808801516139f29190615bc1565b6139fc9190615bc1565b613a069190615bc1565b613a1490608060020a615bed565b610160860151613a31906c01000000000000000000000000615bed565b610140870151613a4a9068010000000000000000615bed565b610120880151613a5f90640100000000615bed565b610100890151613a6f9190615bc1565b613a799190615bc1565b613a839190615bc1565b613a8d9190615bc1565b905060008460076020020151613ab0906c01000000000000000000000000615bed565b60c0860151613ac89068010000000000000000615bed565b60a0870151613adc90640100000000615bed565b6080880151613aeb9190615bc1565b613af59190615bc1565b613aff9190615bc1565b613b0d90608060020a615bed565b6060860151613b29906c01000000000000000000000000615bed565b6040870151613b419068010000000000000000615bed565b6020880151613b5590640100000000615bed565b8851613b619190615bc1565b613b6b9190615bc1565b613b759190615bc1565b613b7f9190615bc1565b9050613b8a83613bd8565b613b9383613bd8565b613b9c83613bd8565b604080516020810194909452830191909152606082015260800160408051808303601f1901815291905280516020909101209695505050505050565b60008060005b6020811015613c1357613bf860ff85166101008402615bc1565b61010090940493915080613c0b81615dcb565b915050613bde565b5092915050565b613c22614e6b565b613c2e60096008615bed565b604814613c805760405160e560020a62461bcd02815260206004820152600c60248201527f73706f6e6765206572726f72000000000000000000000000000000000000000060448201526064016108fb565b600160a0830152678000000000000000610100830152604860086000613ca7600983615bed565b9050613cb1614ea9565b600080805b613cc08786615bd9565b831015613de357600091505b6005821015613dc6575060005b6005811015613db457613cec8688615bd9565b613cf7836005615bed565b613d019083615bc1565b1015613da25788613d13836005615bed565b82613d1f866009615bed565b613d299190615bc1565b613d339190615bc1565b60098110613d4357613d43615e2c565b60200201518483613d55846005615bed565b613d5f9190615bc1565b60198110613d6f57613d6f615e2c565b6020020151188483613d82846005615bed565b613d8c9190615bc1565b60198110613d9c57613d9c615e2c565b60200201525b80613dac81615dcb565b915050613cd9565b81613dbe81615dcb565b925050613ccc565b613dcf84614030565b935082613ddb81615dcb565b935050613cb6565b613deb614e6b565b60005b6010811015613f2157600093505b6005841015613f1c57600092505b6005831015613f0a57613e1d888a615bd9565b613e28856005615bed565b613e329085615bc1565b108015613e3f5750601081105b15613ef8578584613e51856005615bed565b613e5b9190615bc1565b60198110613e6b57613e6b615e2c565b602002015163ffffffff16828260108110613e8857613e88615e2c565b60200201526401000000008685613ea0866005615bed565b613eaa9190615bc1565b60198110613eba57613eba615e2c565b6020020151613ec99190615bd9565b82613ed5836001615bc1565b60108110613ee557613ee5615e2c565b6020020152613ef5600282615bc1565b90505b82613f0281615dcb565b935050613e0a565b83613f1481615dcb565b945050613dfc565b613dee565b509998505050505050505050565b600082613f3d836004615bed565b81518110613f4d57613f4d615e2c565b602002602001015183836004613f639190615bed565b613f6e906001615bc1565b81518110613f7e57613f7e615e2c565b602002602001015184846004613f949190615bed565b613f9f906002615bc1565b81518110613faf57613faf615e2c565b602002602001015185856004613fc59190615bed565b613fd0906003615bc1565b81518110613fe057613fe0615e2c565b6020026020010151604051602001614011949392919093845260208401929092526040830152606082015260800190565b60408051808303601f1901815291905280516020909101209392505050565b614038614ea9565b614040614ea9565b614048614ec8565b614050614ec8565b600060405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b6018811015614df1576080808801516060808a01516040808c01516020808e01518e511890911890921890931888526101208b01516101008c015160e08d015160c08e015160a08f0151181818189088018190526101c08b01516101a08c01516101808d01516101608e01516101408f015118181818928801929092526102608a01516102408b01516102208c01516102008d01516101e08e015118181818908701526103008901516102e08a01516102c08b01516102a08c01516102808d015118181818918601919091526142559067800000000000000090615bd9565b6020850151614265906002615bed565b608086015167ffffffffffffffff919091169190911718835260408401516142969067800000000000000090615bd9565b60408501516142a6906002615bed565b855167ffffffffffffffff919091169190911718602084015260608401516142d79067800000000000000090615bd9565b60608501516142e7906002615bed565b67ffffffffffffffff16178460016020020151188360026020020152678000000000000000846004602002015161431e9190615bd9565b608085015161432e906002615bed565b604086015167ffffffffffffffff9190911691909117186060840152835161435f9067800000000000000090615bd9565b845161436c906002615bed565b60608087015167ffffffffffffffff929092169290921718608080860191825285518a5118808b52865160208c81018051909218825288516040808f01805190921890915289518e8801805190911890528951948e0180519095189094528801805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291870180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292860180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a0180519091189052908652516144f790631000000090615bd9565b602088015161450b90641000000000615bed565b67ffffffffffffffff161761010086015260408701516145349067200000000000000090615bd9565b6040880151614544906008615bed565b67ffffffffffffffff16176101608601526060870151614568906280000090615bd9565b606088015161457d9065020000000000615bed565b67ffffffffffffffff161761026086015260808701516145a4906540000000000090615bd9565b60808801516145b69062040000615bed565b67ffffffffffffffff16176102c086015260a08701516145df9067800000000000000090615bd9565b60a08801516145ef906002615bed565b67ffffffffffffffff1617604086015260c0870151614612906210000090615bd9565b60c08801516146279065100000000000615bed565b67ffffffffffffffff161760a086015260e087015161464e90664000000000000090615bd9565b60e088015161465f90610400615bed565b67ffffffffffffffff16176101a0860152610100870151614684906208000090615bd9565b61010088015161469a9065200000000000615bed565b67ffffffffffffffff16176102008601526101208701516146c49067400000000000000090615bd9565b6101208801516146d5906004615bed565b67ffffffffffffffff16176103008601526101408701516146f890600490615bd9565b61014088015161471090674000000000000000615bed565b67ffffffffffffffff161760808601526101608701516147399067040000000000000090615bd9565b61016088015161474a906040615bed565b67ffffffffffffffff161760e086015261018087015161476e906220000090615bd9565b6101808801516147849065080000000000615bed565b67ffffffffffffffff16176101408601526101a08701516147ad90660200000000000090615bd9565b6101a08801516147bf90618000615bed565b67ffffffffffffffff16176102408601526101c08701516147e290600890615bd9565b6101c08801516147fa90672000000000000000615bed565b67ffffffffffffffff16176102a08601526101e08701516148219064100000000090615bd9565b6101e0880151614835906310000000615bed565b67ffffffffffffffff16176020860152610200878101516148569190615bd9565b61020088015161486d906680000000000000615bed565b67ffffffffffffffff16176101208601526102208701516148949064800000000090615bd9565b6102208801516148a8906302000000615bed565b67ffffffffffffffff16176101808601526102408701516148d0906508000000000090615bd9565b6102408801516148e39062200000615bed565b67ffffffffffffffff16176101e08601526102608701516149079061010090615bd9565b61026088015161491f90670100000000000000615bed565b67ffffffffffffffff16176102e08601526102808701516149469064200000000090615bd9565b61028088015161495a906308000000615bed565b67ffffffffffffffff161760608601526102a0870151614981906510000000000090615bd9565b6102a08801516149949062100000615bed565b67ffffffffffffffff161760c08601526102c08701516149b990630200000090615bd9565b6102c08801516149ce90648000000000615bed565b67ffffffffffffffff16176101c08601526102e08701516149f89067010000000000000090615bd9565b6102e0880151614a0a90610100615bed565b67ffffffffffffffff1617610220860152610300870151614a3390660400000000000090615bd9565b610300880151614a4590614000615bed565b67ffffffffffffffff1617856014602002015284600a602002015185600560200201511916856000602002015118876000602002015284600b602002015185600660200201511916856001602002015118876001602002015284600c602002015185600760200201511916856002602002015118876002602002015284600d602002015185600860200201511916856003602002015118876003602002015284600e602002015185600960200201511916856004602002015118876004602002015284600f602002015185600a602002015119168560056020020151188760056020020152846010602002015185600b602002015119168560066020020151188760066020020152846011602002015185600c602002015119168560076020020151188760076020020152846012602002015185600d602002015119168560086020020151188760086020020152846013602002015185600e602002015119168560096020020151188760096020020152846014602002015185600f6020020151191685600a60200201511887600a602002015284601560200201518560106020020151191685600b60200201511887600b602002015284601660200201518560116020020151191685600c60200201511887600c602002015284601760200201518560126020020151191685600d60200201511887600d602002015284601860200201518560136020020151191685600e60200201511887600e602002015284600060200201518560146020020151191685600f60200201511887600fdd557614dd5615e2c565b6020020151875118875280614de981615dcb565b915050614176565b509495945050505050565b5080546000825560030290600052602060002090810190610c3c9190614ee6565b50610c3c90610200810190614f1d565b6040518061040001604052806020906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b6040518061020001604052806010906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b5b80821115614f19578054600160a060020a03199081168255600182018054909116905560006002820155600301614ee7565b5090565b5b80821115614f195760008155600101614f1e565b8035614f3d81615e5e565b919050565b600082601f830112614f5357600080fd5b81356020614f68614f6383615b9d565b615b6c565b8281528181019085830183850287018401881015614f8557600080fd5b60005b85811015614fad578135614f9b81615e5e565b84529284019290840190600101614f88565b5090979650505050505050565b600082601f830112614fcb57600080fd5b81356020614fdb614f6383615b9d565b82815281810190858301606080860288018501891015614ffa57600080fd5b60005b868110156150215761500f8a84615078565b85529385019391810191600101614ffd565b509198975050505050505050565b60008083601f84011261504157600080fd5b50813567ffffffffffffffff81111561505957600080fd5b60208301915083602082850101111561507157600080fd5b9250929050565b60006060828403121561508a57600080fd5b615092615b1f565b9050813561509f81615e5e565b815260208201356150af81615e5e565b806020830152506040820135604082015292915050565b6000602082840312156150d857600080fd5b8135612af781615e5e565b600080604083850312156150f657600080fd5b823561510181615e5e565b9150602083013561511181615e5e565b809150509250929050565b60008060008060008060008060e0898b03121561513857600080fd5b883561514381615e5e565b9750602089013561515381615e5e565b965060408901359550606089013561516a81615e73565b9450608089013567ffffffffffffffff81111561518657600080fd5b6151928b828c0161502f565b999c989b5096999598969760a08701359660c0013595509350505050565b6000806000806000608086880312156151c857600080fd5b85356151d381615e5e565b9450602086013567ffffffffffffffff8111156151ef57600080fd5b6151fb8882890161502f565b9699909850959660408101359660609091013595509350505050565b60006020828403121561522957600080fd5b813567ffffffffffffffff81111561524057600080fd5b612c8084828501614f42565b6000806040838503121561525f57600080fd5b823567ffffffffffffffff8082111561527757600080fd5b61528386838701614f42565b9350602085013591508082111561529957600080fd5b506152a685828601614f42565b9150509250929050565b6000602082840312156152c257600080fd5b8151612af781615e73565b6000602082840312156152df57600080fd5b81357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612af757600080fd5b60006020828403121561531f57600080fd5b5035919050565b6000806040838503121561533957600080fd5b82359150602083013561511181615e5e565b60006020828403121561535d57600080fd5b81357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981168114612af757600080fd5b6000806040838503121561539d57600080fd5b823567ffffffffffffffff808211156153b557600080fd5b9084019061016082870312156153ca57600080fd5b6153d2615b48565b6153db83614f32565b81526153e960208401614f32565b60208201526153fa60408401614f32565b604082015261540b60608401614f32565b606082015260808301358281111561542257600080fd5b61542e88828601614f42565b60808301525060a08301358281111561544657600080fd5b61545288828601614f42565b60a08301525061546460c08401614f32565b60c082015261547560e08401614f32565b60e082015261010083810135908201526101208084013590820152610140928301359281019290925250946020939093013593505050565b6000602082840312156154bf57600080fd5b813567ffffffffffffffff8111156154d657600080fd5b820160408185031215612af757600080fd5b6000606082840312156154fa57600080fd5b612af78383615078565b60008060008060006080868803121561551c57600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff8082111561554957600080fd5b818801915088601f83011261555d57600080fd5b81358181111561556c57600080fd5b896020808302850101111561558057600080fd5b9699959850939650602001949392505050565b600081518084526020808501945080840160005b83811015614df15781518051600160a060020a03908116895284820151168489015260409081015190880152606090960195908201906001016155a7565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19871681528486600383013784810160038101859052600090838560238301376000930160230192835250909695505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198b168152888a600383013788810160038101899052600090878960238301378781019050602381016000815286888237508581019050602381016000815284868237506000930160230192835250909a9950505050505050505050565b898b823760008a820160008152898b82376000908a01908152878982376000908801908152858782376000908601908152838582376000930192835250909a9950505050505050505050565b6000885160206157148285838e01615d88565b81840191506c01000000000000000000000000600160a060020a038b160282526014895161574781838601858e01615d88565b895193019261575b81838601858d01615d88565b885193019261576f81838601858c01615d88565b875193019261578381838601858b01615d88565b865193019261579781838601858a01615d88565b929092019091019a9950505050505050505050565b600084516157be818460208901615d88565b820184815283516157d6816020808501908801615d88565b0160200195945050505050565b600083516157f5818460208801615d88565b835190830190615809818360208801615d88565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161584a816017850160208801615d88565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351615887816028840160208801615d88565b01602801949350505050565b602081526000612af76020830184615593565b60006020808301818452808554808352604092508286019150866000528360002060005b82811015615909578154600160a060020a03908116855260018084015490911687860152600283015486860152606090940193600390920191016158ca565b5091979650505050505050565b6020815260008251806020840152615935816040850160208701615d88565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020815260008251604060208401526159f96060840182615593565b9050602084015160408401528091505092915050565b6000808335601e19843603018112615a2657600080fd5b83018035915067ffffffffffffffff821115615a4157600080fd5b602090810192508102360382131561507157600080fd5b6000808335601e19843603018112615a6f57600080fd5b83018035915067ffffffffffffffff821115615a8a57600080fd5b602001915060608102360382131561507157600080fd5b6000808335601e19843603018112615ab857600080fd5b83018035915067ffffffffffffffff821115615ad357600080fd5b60200191503681900382131561507157600080fd5b600082356101be19833603018112615aff57600080fd5b9190910192915050565b60008235605e19833603018112615aff57600080fd5b6040516060810167ffffffffffffffff81118282101715615b4257615b42615e45565b60405290565b604051610160810167ffffffffffffffff81118282101715615b4257615b42615e45565b604051601f8201601f1916810167ffffffffffffffff81118282101715615b9557615b95615e45565b604052919050565b600067ffffffffffffffff821115615bb757615bb7615e45565b5060209081020190565b60008219821115615bd457615bd4615dfa565b500190565b600082615be857615be8615e13565b500490565b6000816000190483118215151615615c0757615c07615dfa565b500290565b600082821015615c1e57615c1e615dfa565b500390565b80516020808301519190811015615c46578060200360080260020a600003821691505b50919050565b600060608236031215615c5e57600080fd5b615c66615b1f565b823567ffffffffffffffff80821115615c7e57600080fd5b90840190601f3681840112615c9257600080fd5b82356020615ca2614f6383615b9d565b8281528181019086830136848602890185011115615cbf57600080fd5b60005b85811015615d4c57813588811115615cd957600080fd5b890136603f820112615cea57600080fd5b8581013560408a821115615d0057615d00615e45565b615d11828b01601f19168901615b6c565b8281523682848601011115615d2557600080fd5b828285018a8301376000928101890192909252508552509284019290840190600101615cc2565b5050875250878101359086015250506040850135915080821115615d6f57600080fd5b50615d7c36828601614fba565b60408301525092915050565b60005b83811015615da3578181015183820152602001615d8b565b83811115610cdd5750506000910152565b600081615dc357615dc3615dfa565b506000190190565b6000600019821415615ddf57615ddf615dfa565b5060010190565b600082615df557615df5615e13565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610c3c57600080fd5b8015158114610c3c57600080fdfe077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d7a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220d4a8f78b45c6283ecdd500be1c672b1c26988f03ed2c2cd670edd588094f505664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 609,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 858,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 474,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 565,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6774,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "queue",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_struct(Transfer)7822_storage)dyn_storage"
      },
      {
        "astId": 6779,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "lockedTransfers",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(LockedTransfers)7839_storage)"
      },
      {
        "astId": 6781,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "oldestLockedEventId",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 6785,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6787,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 6789,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "transferFeeRecipient",
        "offset": 0,
        "slot": "206",
        "type": "t_address_payable"
      },
      {
        "astId": 6791,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "bridgeFeeRecipient",
        "offset": 0,
        "slot": "207",
        "type": "t_address_payable"
      },
      {
        "astId": 6793,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "sideBridgeAddress",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 6795,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "minSafetyBlocks",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 6797,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "timeframeSeconds",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 6799,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "lockTime",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 6801,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "inputEventId",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 6803,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "outputEventId",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 6805,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "lastTimeframe",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 6807,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "signatureFeeCheckNumber",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 7812,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "216",
        "type": "t_array(t_uint256)15_storage"
      },
      {
        "astId": 5504,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "epochData",
        "offset": 0,
        "slot": "231",
        "type": "t_mapping(t_uint256,t_struct(EthashCacheOptData)5499_storage)"
      },
      {
        "astId": 3218,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "minimumDifficulty",
        "offset": 0,
        "slot": "232",
        "type": "t_uint256"
      },
      {
        "astId": 3442,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "___gap",
        "offset": 0,
        "slot": "233",
        "type": "t_array(t_uint256)15_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Transfer)7822_storage)dyn_storage": {
        "base": "t_struct(Transfer)7822_storage",
        "encoding": "dynamic_array",
        "label": "struct CommonStructs.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)15_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[15]",
        "numberOfBytes": "480"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)512_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[512]",
        "numberOfBytes": "16384"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_struct(EthashCacheOptData)5499_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ethash.EthashCacheOptData)",
        "numberOfBytes": "32",
        "value": "t_struct(EthashCacheOptData)5499_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedTransfers)7839_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonStructs.LockedTransfers)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedTransfers)7839_storage"
      },
      "t_struct(EthashCacheOptData)5499_storage": {
        "encoding": "inplace",
        "label": "struct Ethash.EthashCacheOptData",
        "members": [
          {
            "astId": 5494,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "merkleNodes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)512_storage"
          },
          {
            "astId": 5496,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "fullSizeIn128Resultion",
            "offset": 0,
            "slot": "512",
            "type": "t_uint256"
          },
          {
            "astId": 5498,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "branchDepth",
            "offset": 0,
            "slot": "513",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "16448"
      },
      "t_struct(LockedTransfers)7839_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.LockedTransfers",
        "members": [
          {
            "astId": 7836,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "transfers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transfer)7822_storage)dyn_storage"
          },
          {
            "astId": 7838,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transfer)7822_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.Transfer",
        "members": [
          {
            "astId": 7817,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7819,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7821,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}