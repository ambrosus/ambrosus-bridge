{
  "address": "0x2505E7A7Bf23815c680A06a807dd79D7631Cd84f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "toAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct CommonStructs.Transfer[]",
          "name": "queue",
          "type": "tuple[]"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "TransferSubmit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "feeRecipient_",
          "type": "address"
        }
      ],
      "name": "changeFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockTime_",
          "type": "uint256"
        }
      ],
      "name": "changeLockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minSafetyBlocks_",
          "type": "uint256"
        }
      ],
      "name": "changeMinSafetyBlocks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "timeframeSeconds_",
          "type": "uint256"
        }
      ],
      "name": "changeTimeframeSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "getLockedTransfers",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "tokenAddress",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "toAddress",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct CommonStructs.Transfer[]",
              "name": "transfers",
              "type": "tuple[]"
            },
            {
              "internalType": "uint256",
              "name": "endTimestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.LockedTransfers",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sideBridgeAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "adminAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "relayAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappingTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "tokenThisAddresses",
              "type": "address[]"
            },
            {
              "internalType": "address[]",
              "name": "tokenSideAddresses",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "feeRecipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timeframeSeconds",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minSafetyBlocks",
              "type": "uint256"
            }
          ],
          "internalType": "struct CommonStructs.ConstructorArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "minimumDifficulty",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inputEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochIndex",
          "type": "uint256"
        }
      ],
      "name": "isEpochDataSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedTransfers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minSafetyBlocks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldestLockedEventId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "removeLockedTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epochNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fullSizeIn128Resultion",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "branchDepth",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "merkleNodes",
          "type": "uint256[]"
        }
      ],
      "name": "setEpochData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sideBridgeAddress",
          "type": "address"
        }
      ],
      "name": "setSideBridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sideBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes3",
                  "name": "p0WithNonce",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes3",
                  "name": "p0WithoutNonce",
                  "type": "bytes3"
                },
                {
                  "internalType": "bytes",
                  "name": "p1",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "parentOrReceiptHash",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes",
                  "name": "p2",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "difficulty",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p3",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "number",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p4",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p5",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "nonce",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "p6",
                  "type": "bytes"
                },
                {
                  "internalType": "uint256[]",
                  "name": "dataSetLookup",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "witnessForLookup",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct CheckPoW.BlockPoW[]",
              "name": "blocks",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes[]",
                  "name": "receiptProof",
                  "type": "bytes[]"
                },
                {
                  "internalType": "uint256",
                  "name": "eventId",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "tokenAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "address",
                      "name": "toAddress",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct CommonStructs.Transfer[]",
                  "name": "transfers",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct CommonStructs.TransferProof",
              "name": "transfer",
              "type": "tuple"
            }
          ],
          "internalType": "struct CheckPoW.PoWProof",
          "name": "powProof",
          "type": "tuple"
        }
      ],
      "name": "submitTransferPoW",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeframeSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenSideAddress",
          "type": "address"
        }
      ],
      "name": "tokensAdd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokenSideAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensAddBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        }
      ],
      "name": "tokensRemove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokenThisAddresses",
          "type": "address[]"
        }
      ],
      "name": "tokensRemoveBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "eventId",
          "type": "uint256"
        }
      ],
      "name": "unlockTransfers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockTransfersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenThisAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "unwrapSide",
          "type": "bool"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        }
      ],
      "name": "wrapWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe31bf0a7a9a2421cc97ff029d007b76002a3be6171d9635dea07104ba5304378",
  "receipt": {
    "to": null,
    "from": "0x295C2707319ad4BecA6b5bb4086617fD6F240CfE",
    "contractAddress": "0x2505E7A7Bf23815c680A06a807dd79D7631Cd84f",
    "transactionIndex": 0,
    "gasUsed": "6139347",
    "logsBloom": "0x
    "blockHash": "0x3f3c7eb8ca6529741c0f0f4000f17934688017b97493f486b7d94ec9835254d3",
    "transactionHash": "0xe31bf0a7a9a2421cc97ff029d007b76002a3be6171d9635dea07104ba5304378",
    "logs": [],
    "blockNumber": 166016,
    "cumulativeGasUsed": "6139347",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "a1fd561ad224429d92afda39ccf4993c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"queue\",\"type\":\"tuple[]\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"TransferSubmit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"changeLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks_\",\"type\":\"uint256\"}],\"name\":\"changeMinSafetyBlocks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds_\",\"type\":\"uint256\"}],\"name\":\"changeTimeframeSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"getLockedTransfers\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.LockedTransfers\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sideBridgeAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"adminAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"relayAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappingTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timeframeSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minSafetyBlocks\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.ConstructorArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"minimumDifficulty\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inputEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochIndex\",\"type\":\"uint256\"}],\"name\":\"isEpochDataSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedTransfers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSafetyBlocks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldestLockedEventId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"removeLockedTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epochNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fullSizeIn128Resultion\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"branchDepth\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"merkleNodes\",\"type\":\"uint256[]\"}],\"name\":\"setEpochData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sideBridgeAddress\",\"type\":\"address\"}],\"name\":\"setSideBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sideBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes3\",\"name\":\"p0WithNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes3\",\"name\":\"p0WithoutNonce\",\"type\":\"bytes3\"},{\"internalType\":\"bytes\",\"name\":\"p1\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"parentOrReceiptHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"p2\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"difficulty\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p3\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"number\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p4\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p5\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"nonce\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"p6\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"dataSetLookup\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"witnessForLookup\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CheckPoW.BlockPoW[]\",\"name\":\"blocks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes[]\",\"name\":\"receiptProof\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct CommonStructs.Transfer[]\",\"name\":\"transfers\",\"type\":\"tuple[]\"}],\"internalType\":\"struct CommonStructs.TransferProof\",\"name\":\"transfer\",\"type\":\"tuple\"}],\"internalType\":\"struct CheckPoW.PoWProof\",\"name\":\"powProof\",\"type\":\"tuple\"}],\"name\":\"submitTransferPoW\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeframeSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenSideAddress\",\"type\":\"address\"}],\"name\":\"tokensAdd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenSideAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensAddBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"}],\"name\":\"tokensRemove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokenThisAddresses\",\"type\":\"address[]\"}],\"name\":\"tokensRemoveBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"eventId\",\"type\":\"uint256\"}],\"name\":\"unlockTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockTransfersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenThisAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"unwrapSide\",\"type\":\"bool\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"wrapWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/networks/ETH_AmbBridge.sol\":\"ETH_AmbBridge\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x29d96f28c0dfcd25ddffef02e56438bde20e1135df9745d7eeb196f08665da6d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb138a22255a0c28ffa169cd269120bbfa27711cefe14b531462b22560cf374fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xc7af08df3d3e818ce36f95aa879c13245772fed21b553e6033292ea4edc2a9f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/checks/CheckPoW.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"./CheckReceiptsProof.sol\\\";\\nimport \\\"./CheckPoW_Ethash.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n\\ncontract CheckPoW is Initializable, CheckReceiptsProof, Ethash {\\n    struct BlockPoW {\\n        bytes3 p0WithNonce;\\n        bytes3 p0WithoutNonce;\\n\\n        bytes p1;\\n        bytes32 parentOrReceiptHash;\\n        bytes p2;\\n        bytes difficulty;\\n        bytes p3;\\n        bytes number;\\n        bytes p4;  // end when extra end\\n        bytes p5;  // after extra\\n        bytes nonce;\\n        bytes p6;\\n\\n        uint[] dataSetLookup;\\n        uint[] witnessForLookup;\\n    }\\n\\n    struct PoWProof {\\n        BlockPoW[] blocks;\\n        CommonStructs.TransferProof transfer;\\n    }\\n\\n    uint256 minimumDifficulty;\\n\\n    function __CheckPoW_init(\\n        uint256 minimumDifficulty_\\n    ) internal initializer {\\n        minimumDifficulty = minimumDifficulty_;\\n    }\\n\\n    function checkPoW_(PoWProof calldata powProof, address sideBridgeAddress) internal view\\n    {\\n        bytes32 hash = calcTransferReceiptsHash(powProof.transfer, sideBridgeAddress);\\n        for (uint i = 0; i < powProof.blocks.length; i++) {\\n            require(powProof.blocks[i].parentOrReceiptHash == hash, \\\"parentHash or receiptHash wrong\\\");\\n            hash = blockHash(powProof.blocks[i]);\\n\\n            verifyEthash(powProof.blocks[i]);\\n        }\\n    }\\n\\n\\n    function verifyEthash(BlockPoW calldata block_) internal view {\\n        uint difficulty = bytesToUint(block_.difficulty);\\n        require(difficulty >= minimumDifficulty, \\\"difficulty too low\\\");\\n        verifyPoW(\\n            bytesToUint(block_.number),\\n            blockHashWithoutNonce(block_),\\n            bytesToUint(block_.nonce),\\n            difficulty,\\n            block_.dataSetLookup,\\n            block_.witnessForLookup\\n        );\\n    }\\n\\n    function blockHash(BlockPoW calldata block_) internal pure returns (bytes32) {\\n        // Note: too much arguments in abi.encodePacked() function cause CompilerError: Stack too deep...\\n        return keccak256(abi.encodePacked(\\n                abi.encodePacked(\\n                    block_.p0WithNonce,\\n                    block_.p1,\\n                    block_.parentOrReceiptHash,\\n                    block_.p2,\\n                    block_.difficulty,\\n                    block_.p3\\n                ),\\n                abi.encodePacked(\\n                    block_.number,\\n                    block_.p4,\\n                    block_.p5,\\n                    block_.nonce,\\n                    block_.p6\\n                )\\n            ));\\n    }\\n\\n    function blockHashWithoutNonce(BlockPoW calldata block_) internal pure returns (bytes32) {\\n        bytes memory rlpHeaderHashWithoutNonce = abi.encodePacked(\\n            abi.encodePacked(\\n                block_.p0WithoutNonce,\\n                block_.p1,\\n                block_.parentOrReceiptHash,\\n                block_.p2\\n            ),\\n            abi.encodePacked(\\n                block_.difficulty,\\n                block_.p3,\\n                block_.number,\\n                block_.p4,\\n                block_.p6\\n            )\\n        );\\n\\n        return keccak256(rlpHeaderHashWithoutNonce);\\n    }\\n\\n\\n    function bytesToUint(bytes memory b) private pure returns (uint){\\n        return uint(bytes32(b)) >> (256 - b.length * 8);\\n    }\\n}\\n\",\"keccak256\":\"0x2a5857a9dd3e474dbb6fb83cefb1c5aa2a9ccc75a3a1f762927fa7e4adcbfc5b\",\"license\":\"MIT\"},\"contracts/checks/CheckPoW_Ethash.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @dev These contracts are used to verify Proof of Work within a smart contract.\\n///      The algorithms have been extracted from the implementation of smart pool (https://github.com/smartpool)\\ncontract SHA3_512 {\\n    constructor() {}\\n\\n    function keccak_f(uint[25] memory A) pure private returns (uint[25] memory) {\\n        uint[25] memory B;\\n        uint[5]  memory C;\\n        uint[5]  memory D;\\n\\n        uint[24] memory RC = [\\n        uint(0x0000000000000001),\\n        0x0000000000008082,\\n        0x800000000000808A,\\n        0x8000000080008000,\\n        0x000000000000808B,\\n        0x0000000080000001,\\n        0x8000000080008081,\\n        0x8000000000008009,\\n        0x000000000000008A,\\n        0x0000000000000088,\\n        0x0000000080008009,\\n        0x000000008000000A,\\n        0x000000008000808B,\\n        0x800000000000008B,\\n        0x8000000000008089,\\n        0x8000000000008003,\\n        0x8000000000008002,\\n        0x8000000000000080,\\n        0x000000000000800A,\\n        0x800000008000000A,\\n        0x8000000080008081,\\n        0x8000000000008080,\\n        0x0000000080000001,\\n        0x8000000080008008];\\n\\n        for (uint i = 0; i < 24; i++) {\\n\\n            C[0] = A[0] ^ A[1] ^ A[2] ^ A[3] ^ A[4];\\n            C[1] = A[5] ^ A[6] ^ A[7] ^ A[8] ^ A[9];\\n            C[2] = A[10] ^ A[11] ^ A[12] ^ A[13] ^ A[14];\\n            C[3] = A[15] ^ A[16] ^ A[17] ^ A[18] ^ A[19];\\n            C[4] = A[20] ^ A[21] ^ A[22] ^ A[23] ^ A[24];\\n\\n            D[0] = C[4] ^ ((C[1] * 2) & 0xffffffffffffffff | (C[1] / (2 ** 63)));\\n            D[1] = C[0] ^ ((C[2] * 2) & 0xffffffffffffffff | (C[2] / (2 ** 63)));\\n            D[2] = C[1] ^ ((C[3] * 2) & 0xffffffffffffffff | (C[3] / (2 ** 63)));\\n            D[3] = C[2] ^ ((C[4] * 2) & 0xffffffffffffffff | (C[4] / (2 ** 63)));\\n            D[4] = C[3] ^ ((C[0] * 2) & 0xffffffffffffffff | (C[0] / (2 ** 63)));\\n\\n            A[0] = A[0] ^ D[0];\\n            A[1] = A[1] ^ D[0];\\n            A[2] = A[2] ^ D[0];\\n            A[3] = A[3] ^ D[0];\\n            A[4] = A[4] ^ D[0];\\n            A[5] = A[5] ^ D[1];\\n            A[6] = A[6] ^ D[1];\\n            A[7] = A[7] ^ D[1];\\n            A[8] = A[8] ^ D[1];\\n            A[9] = A[9] ^ D[1];\\n            A[10] = A[10] ^ D[2];\\n            A[11] = A[11] ^ D[2];\\n            A[12] = A[12] ^ D[2];\\n            A[13] = A[13] ^ D[2];\\n            A[14] = A[14] ^ D[2];\\n            A[15] = A[15] ^ D[3];\\n            A[16] = A[16] ^ D[3];\\n            A[17] = A[17] ^ D[3];\\n            A[18] = A[18] ^ D[3];\\n            A[19] = A[19] ^ D[3];\\n            A[20] = A[20] ^ D[4];\\n            A[21] = A[21] ^ D[4];\\n            A[22] = A[22] ^ D[4];\\n            A[23] = A[23] ^ D[4];\\n            A[24] = A[24] ^ D[4];\\n\\n            /*Rho and pi steps*/\\n            B[0] = A[0];\\n            B[8] = ((A[1] * (2 ** 36)) & 0xffffffffffffffff | (A[1] / (2 ** 28)));\\n            B[11] = ((A[2] * (2 ** 3)) & 0xffffffffffffffff | (A[2] / (2 ** 61)));\\n            B[19] = ((A[3] * (2 ** 41)) & 0xffffffffffffffff | (A[3] / (2 ** 23)));\\n            B[22] = ((A[4] * (2 ** 18)) & 0xffffffffffffffff | (A[4] / (2 ** 46)));\\n            B[2] = ((A[5] * (2 ** 1)) & 0xffffffffffffffff | (A[5] / (2 ** 63)));\\n            B[5] = ((A[6] * (2 ** 44)) & 0xffffffffffffffff | (A[6] / (2 ** 20)));\\n            B[13] = ((A[7] * (2 ** 10)) & 0xffffffffffffffff | (A[7] / (2 ** 54)));\\n            B[16] = ((A[8] * (2 ** 45)) & 0xffffffffffffffff | (A[8] / (2 ** 19)));\\n            B[24] = ((A[9] * (2 ** 2)) & 0xffffffffffffffff | (A[9] / (2 ** 62)));\\n            B[4] = ((A[10] * (2 ** 62)) & 0xffffffffffffffff | (A[10] / (2 ** 2)));\\n            B[7] = ((A[11] * (2 ** 6)) & 0xffffffffffffffff | (A[11] / (2 ** 58)));\\n            B[10] = ((A[12] * (2 ** 43)) & 0xffffffffffffffff | (A[12] / (2 ** 21)));\\n            B[18] = ((A[13] * (2 ** 15)) & 0xffffffffffffffff | (A[13] / (2 ** 49)));\\n            B[21] = ((A[14] * (2 ** 61)) & 0xffffffffffffffff | (A[14] / (2 ** 3)));\\n            B[1] = ((A[15] * (2 ** 28)) & 0xffffffffffffffff | (A[15] / (2 ** 36)));\\n            B[9] = ((A[16] * (2 ** 55)) & 0xffffffffffffffff | (A[16] / (2 ** 9)));\\n            B[12] = ((A[17] * (2 ** 25)) & 0xffffffffffffffff | (A[17] / (2 ** 39)));\\n            B[15] = ((A[18] * (2 ** 21)) & 0xffffffffffffffff | (A[18] / (2 ** 43)));\\n            B[23] = ((A[19] * (2 ** 56)) & 0xffffffffffffffff | (A[19] / (2 ** 8)));\\n            B[3] = ((A[20] * (2 ** 27)) & 0xffffffffffffffff | (A[20] / (2 ** 37)));\\n            B[6] = ((A[21] * (2 ** 20)) & 0xffffffffffffffff | (A[21] / (2 ** 44)));\\n            B[14] = ((A[22] * (2 ** 39)) & 0xffffffffffffffff | (A[22] / (2 ** 25)));\\n            B[17] = ((A[23] * (2 ** 8)) & 0xffffffffffffffff | (A[23] / (2 ** 56)));\\n            B[20] = ((A[24] * (2 ** 14)) & 0xffffffffffffffff | (A[24] / (2 ** 50)));\\n\\n            /*Xi state*/\\n            A[0] = B[0] ^ ((~B[5]) & B[10]);\\n            A[1] = B[1] ^ ((~B[6]) & B[11]);\\n            A[2] = B[2] ^ ((~B[7]) & B[12]);\\n            A[3] = B[3] ^ ((~B[8]) & B[13]);\\n            A[4] = B[4] ^ ((~B[9]) & B[14]);\\n            A[5] = B[5] ^ ((~B[10]) & B[15]);\\n            A[6] = B[6] ^ ((~B[11]) & B[16]);\\n            A[7] = B[7] ^ ((~B[12]) & B[17]);\\n            A[8] = B[8] ^ ((~B[13]) & B[18]);\\n            A[9] = B[9] ^ ((~B[14]) & B[19]);\\n            A[10] = B[10] ^ ((~B[15]) & B[20]);\\n            A[11] = B[11] ^ ((~B[16]) & B[21]);\\n            A[12] = B[12] ^ ((~B[17]) & B[22]);\\n            A[13] = B[13] ^ ((~B[18]) & B[23]);\\n            A[14] = B[14] ^ ((~B[19]) & B[24]);\\n            A[15] = B[15] ^ ((~B[20]) & B[0]);\\n            A[16] = B[16] ^ ((~B[21]) & B[1]);\\n            A[17] = B[17] ^ ((~B[22]) & B[2]);\\n            A[18] = B[18] ^ ((~B[23]) & B[3]);\\n            A[19] = B[19] ^ ((~B[24]) & B[4]);\\n            A[20] = B[20] ^ ((~B[0]) & B[5]);\\n            A[21] = B[21] ^ ((~B[1]) & B[6]);\\n            A[22] = B[22] ^ ((~B[2]) & B[7]);\\n            A[23] = B[23] ^ ((~B[3]) & B[8]);\\n            A[24] = B[24] ^ ((~B[4]) & B[9]);\\n\\n            /*Last step*/\\n            A[0] = A[0] ^ RC[i];\\n        }\\n\\n        return A;\\n    }\\n\\n\\n    function sponge(uint[9] memory M) pure internal returns (uint[16] memory) {\\n        require((M.length * 8) == 72, \\\"sponge error\\\");\\n\\n        M[5] = 0x01;\\n        M[8] = 0x8000000000000000;\\n\\n        uint r = 72;\\n        uint w = 8;\\n        uint size = M.length * 8;\\n\\n        uint[25] memory S;\\n        uint i;\\n        uint y;\\n        uint x;\\n        /*Absorbing Phase*/\\n        for (i = 0; i < size / r; i++) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w)) {\\n                        S[5 * x + y] = S[5 * x + y] ^ M[i * 9 + x + 5 * y];\\n                    }\\n                }\\n            }\\n            S = keccak_f(S);\\n        }\\n\\n        /*Squeezing phase*/\\n        uint[16] memory result;\\n        uint b = 0;\\n        while (b < 16) {\\n            for (y = 0; y < 5; y++) {\\n                for (x = 0; x < 5; x++) {\\n                    if ((x + 5 * y) < (r / w) && (b < 16)) {\\n                        result[b] = S[5 * x + y] & 0xFFFFFFFF;\\n                        result[b + 1] = S[5 * x + y] / 0x100000000;\\n                        b += 2;\\n                    }\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n}\\n\\n////////////////////////////////////////////////////////////////////////////////\\n\\ncontract Ethash is SHA3_512 {\\n\\n    uint constant EPOCH_LENGTH = 30000;   // blocks per epoch\\n\\n    constructor() {\\n    }\\n\\n    struct EthashCacheOptData {\\n        uint[512] merkleNodes;\\n        uint fullSizeIn128Resultion;\\n        uint branchDepth;\\n    }\\n\\n    mapping(uint => EthashCacheOptData) epochData;\\n\\n\\n    function verifyPoW(uint blockNumber, bytes32 rlpHeaderHashWithoutNonce, uint nonce, uint difficulty,\\n        uint[] memory dataSetLookup, uint[] memory witnessForLookup) internal view {\\n\\n        uint epoch = blockNumber / EPOCH_LENGTH;\\n        uint ethash = hashimoto(rlpHeaderHashWithoutNonce, nonce, dataSetLookup, witnessForLookup, epoch);\\n\\n        require(ethash <= (2 ** 256 - 1) / difficulty, \\\"Ethash difficulty too low\\\");\\n    }\\n\\n    function isEpochDataSet(uint epochIndex) public view returns (bool) {\\n        return epochData[epochIndex].fullSizeIn128Resultion != 0;\\n    }\\n\\n    function setEpochData(\\n        uint epochNum,\\n        uint fullSizeIn128Resultion,\\n        uint branchDepth,\\n        uint[] calldata merkleNodes\\n    ) public {\\n\\n        // we store only previous and current epochs\\n        // so, delete second from the end epoch\\n        if (epochNum >= 2)  // underflow check\\n            delete epochData[epochNum - 2];\\n\\n\\n        uint l = merkleNodes.length;\\n        uint[512] storage nodes = epochData[epochNum].merkleNodes;\\n\\n        for (uint i = 0; i < l; i++) {\\n            nodes[i] = merkleNodes[i];\\n        }\\n\\n        epochData[epochNum].fullSizeIn128Resultion = fullSizeIn128Resultion;\\n        epochData[epochNum].branchDepth = branchDepth;\\n    }\\n\\n\\n    function hashimoto(bytes32 header,\\n        uint nonceLe,\\n        uint[] memory dataSetLookup,\\n        uint[] memory witnessForLookup,\\n        uint epochIndex) private view returns (uint) {\\n\\n        uint[16] memory s = computeS(uint(header), nonceLe);\\n        uint[32] memory mix;\\n        uint[8]  memory cmix;\\n\\n\\n        uint depth = epochData[epochIndex].branchDepth;\\n        uint fullSize = epochData[epochIndex].fullSizeIn128Resultion;\\n\\n        uint i;\\n        uint j;\\n\\n        require(fullSize != 0, \\\"EpochData not set\\\");\\n\\n\\n        for (i = 0; i < 16; i++) {\\n            assembly {\\n                let offset := mul(i, 0x20)\\n\\n            //mix[i] = s[i];\\n                mstore(add(mix, offset), mload(add(s, offset)))\\n\\n            // mix[i+16] = s[i];\\n                mstore(add(mix, add(0x200, offset)), mload(add(s, offset)))\\n            }\\n        }\\n\\n        for (i = 0; i < 64; i++) {\\n            uint p = fnv(i ^ s[0], mix[i % 32]) % fullSize;\\n\\n            // console.log(computeCacheRoot( p, i, dataSetLookup,  witnessForLookup, depthAndFullSize[0]));\\n            // console.log(getMerkleLeave( epochIndex, p ));\\n\\n            if (computeCacheRoot(p, i, dataSetLookup, witnessForLookup, depth) != getMerkleLeave(epochIndex, p)) {\\n                // PoW failed\\n                revert(\\\"PoW failed\\\");\\n            }\\n\\n            for (j = 0; j < 8; j++) {\\n\\n                assembly{\\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & varFFFFFFFF );\\n                    let dataOffset := add(mul(0x80, i), add(dataSetLookup, 0x20))\\n                    let dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    let mixOffset := add(mix, mul(0x20, j))\\n                    let mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    let fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\\n                    dataOffset := add(dataOffset, 0x20)\\n                    dataValue := and(mload(dataOffset), 0xFFFFFFFF)\\n\\n                    mixOffset := add(mixOffset, 0x100)\\n                    mixValue := mload(mixOffset)\\n\\n                // fnv = return ((v1*0x01000193) ^ v2) & 0xFFFFFFFF;\\n                    fnvValue := and(xor(mul(mixValue, 0x01000193), dataValue), 0xFFFFFFFF)\\n                    mstore(mixOffset, fnvValue)\\n\\n                }\\n\\n\\n                //mix[j] = fnv(mix[j], dataSetLookup[4*i] & 0xFFFFFFFF );\\n                //mix[j+8] = fnv(mix[j+8], dataSetLookup[4*i + 1] & 0xFFFFFFFF );\\n                //mix[j+16] = fnv(mix[j+16], dataSetLookup[4*i + 2] & 0xFFFFFFFF );\\n                //mix[j+24] = fnv(mix[j+24], dataSetLookup[4*i + 3] & 0xFFFFFFFF );\\n\\n\\n                //dataSetLookup[4*i    ] = dataSetLookup[4*i    ]/(2**32);\\n                //dataSetLookup[4*i + 1] = dataSetLookup[4*i + 1]/(2**32);\\n                //dataSetLookup[4*i + 2] = dataSetLookup[4*i + 2]/(2**32);\\n                //dataSetLookup[4*i + 3] = dataSetLookup[4*i + 3]/(2**32);\\n\\n                assembly{\\n                    let offset := add(add(dataSetLookup, 0x20), mul(i, 0x80))\\n                    let value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n\\n                    offset := add(offset, 0x20)\\n                    value := div(mload(offset), 0x100000000)\\n                    mstore(offset, value)\\n                }\\n            }\\n        }\\n\\n\\n        for (i = 0; i < 32; i += 4) {\\n            cmix[i / 4] = (fnv(fnv(fnv(mix[i], mix[i + 1]), mix[i + 2]), mix[i + 3]));\\n        }\\n\\n        return computeSha3(s, cmix);\\n\\n    }\\n\\n\\n    function fnv(uint v1, uint v2) pure internal returns (uint) {\\n        return ((v1 * 0x01000193) ^ v2) & 0xFFFFFFFF;\\n    }\\n\\n    function computeCacheRoot(uint index,\\n        uint indexInElementsArray,\\n        uint[] memory elements,\\n        uint[] memory witness,\\n        uint branchSize) pure private returns (uint) {\\n\\n        uint leaf = computeLeaf(elements, indexInElementsArray) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n        uint left;\\n        uint right;\\n        uint node;\\n        bool oddBranchSize = (branchSize % 2) > 0;\\n\\n        assembly {\\n            branchSize := div(branchSize, 2)\\n        //branchSize /= 2;\\n        }\\n        uint witnessIndex = indexInElementsArray * branchSize;\\n        if (oddBranchSize) witnessIndex += indexInElementsArray;\\n\\n        uint depth;\\n        for (depth = 0; depth < branchSize; depth++) {\\n            assembly {\\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\\n            }\\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n\\n            }\\n            else {\\n                assembly{\\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            assembly {\\n                index := div(index, 2)\\n            }\\n\\n            //node  = witness[witnessIndex + depth] / (2**128);\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := div(node, 0x100000000000000000000000000000000)\\n                }\\n            }\\n            else {\\n                assembly {\\n                    left := div(node, 0x100000000000000000000000000000000)\\n                }\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            assembly {\\n                index := div(index, 2)\\n            }\\n        }\\n\\n        if (oddBranchSize) {\\n            assembly {\\n                node := mload(add(add(witness, 0x20), mul(add(depth, witnessIndex), 0x20)))\\n            }\\n\\n            //node  = witness[witnessIndex + depth] & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n            if (index & 0x1 == 0) {\\n                left = leaf;\\n                assembly{\\n                    right := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n            }\\n            else {\\n                assembly{\\n                    left := and(node, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n                }\\n\\n                right = leaf;\\n            }\\n\\n            leaf = uint(keccak256(abi.encodePacked(left, right))) & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        }\\n\\n\\n        return leaf;\\n    }\\n\\n\\n    function computeSha3(uint[16] memory s, uint[8] memory cmix) pure internal returns (uint) {\\n        uint s0 = s[0] + s[1] * (2 ** 32) + s[2] * (2 ** 64) + s[3] * (2 ** 96) +\\n        (s[4] + s[5] * (2 ** 32) + s[6] * (2 ** 64) + s[7] * (2 ** 96)) * (2 ** 128);\\n\\n        uint s1 = s[8] + s[9] * (2 ** 32) + s[10] * (2 ** 64) + s[11] * (2 ** 96) +\\n        (s[12] + s[13] * (2 ** 32) + s[14] * (2 ** 64) + s[15] * (2 ** 96)) * (2 ** 128);\\n\\n        uint c = cmix[0] + cmix[1] * (2 ** 32) + cmix[2] * (2 ** 64) + cmix[3] * (2 ** 96) +\\n        (cmix[4] + cmix[5] * (2 ** 32) + cmix[6] * (2 ** 64) + cmix[7] * (2 ** 96)) * (2 ** 128);\\n\\n\\n        /* god knows why need to convert to big endian */\\n        return uint(keccak256(abi.encodePacked(reverseBytes(s0), reverseBytes(s1), reverseBytes(c))));\\n    }\\n\\n\\n    function computeLeaf(uint[] memory dataSetLookup, uint index) pure internal returns (uint) {\\n        return uint(keccak256(abi.encodePacked(\\n                dataSetLookup[4 * index],\\n                dataSetLookup[4 * index + 1],\\n                dataSetLookup[4 * index + 2],\\n                dataSetLookup[4 * index + 3]\\n            )));\\n\\n    }\\n\\n    function computeS(uint header, uint nonceLe) pure internal returns (uint[16] memory) {\\n        uint[9] memory M;\\n\\n        header = reverseBytes(header);\\n\\n        M[0] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[1] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[2] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n        header = header / 2 ** 64;\\n        M[3] = uint(header) & 0xFFFFFFFFFFFFFFFF;\\n\\n        // make little endian nonce\\n        M[4] = nonceLe;\\n        return sponge(M);\\n    }\\n\\n    function reverseBytes(uint input) pure internal returns (uint) {\\n        uint result;\\n        for (uint i = 0; i < 32; i++) {\\n            result = (result << 8) + (input & 0xff);\\n            input = input >> 8;\\n        }\\n        return result;\\n    }\\n\\n\\n    function getMerkleLeave(uint epochIndex, uint p) view internal returns (uint) {\\n        uint rootIndex = uint(p >> epochData[epochIndex].branchDepth);\\n        uint expectedRoot = epochData[epochIndex].merkleNodes[(rootIndex >> 1)];\\n\\n        if ((rootIndex % 2) == 0)\\n            return expectedRoot & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n        return expectedRoot >> 128;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x3edec4c4c9ee84dfd198fcb19c0038ef88129192d5cfa61e14af72b7159e2623\",\"license\":\"MIT\"},\"contracts/checks/CheckReceiptsProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonStructs.sol\\\";\\n\\n\\ncontract CheckReceiptsProof {\\n    // check readme for focs\\n    function calcReceiptsHash(bytes[] memory proof, bytes32 el, uint proofStart) internal pure returns (bytes32) {\\n        bytes memory s;\\n\\n        for (uint i = proofStart; i < proof.length; i += 2) {\\n            s = abi.encodePacked(proof[i], el, proof[i + 1]);\\n            el = (s.length > 32) ? keccak256(s) : bytes32(s);\\n        }\\n\\n        return el;\\n    }\\n\\n\\n    function calcTransferReceiptsHash(CommonStructs.TransferProof memory p, address eventContractAddress) internal pure returns (bytes32) {\\n        bytes32 el = keccak256(abi.encodePacked(\\n                p.receiptProof[0],\\n                eventContractAddress,\\n                p.receiptProof[1],\\n                toBinary(p.eventId),\\n                p.receiptProof[2],\\n                abi.encode(p.transfers),\\n                p.receiptProof[3]\\n            ));\\n        return calcReceiptsHash(p.receiptProof, el, 4);\\n        // start from proof[4]\\n    }\\n\\n\\n    function toBinary(uint _x) private pure returns (bytes memory) {\\n        bytes memory b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), _x)\\n        }\\n        uint i;\\n        for (i = 0; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n        bytes memory res = new bytes(32 - i);\\n        for (uint j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n        return res;\\n    }\\n}\\n\",\"keccak256\":\"0x7e46637724acc19ef57e50ac3bfc07826fe26f51aafb128d4f3f88e860ed869e\",\"license\":\"MIT\"},\"contracts/common/CommonBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./CommonStructs.sol\\\";\\nimport \\\"../tokens/IWrapper.sol\\\";\\n\\n\\n\\ncontract CommonBridge is Initializable, AccessControlUpgradeable, PausableUpgradeable {\\n    // OWNER_ROLE must be DEFAULT_ADMIN_ROLE because by default only this role able to grant or revoke other roles\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant RELAY_ROLE = keccak256(\\\"RELAY_ROLE\\\");\\n\\n\\n    // queue to be pushed in another network\\n    CommonStructs.Transfer[] queue;\\n\\n    // locked transfers from another network\\n    mapping(uint => CommonStructs.LockedTransfers) public lockedTransfers;\\n    uint public oldestLockedEventId;  // head index of lockedTransfers 'queue' mapping\\n\\n\\n    // this network to side network token addresses mapping\\n    mapping(address => address) public tokenAddresses;\\n    address public wrapperAddress;\\n\\n    uint public fee;\\n    address payable feeRecipient;\\n\\n    address public sideBridgeAddress;\\n    uint public minSafetyBlocks;\\n    uint public timeframeSeconds;\\n    uint public lockTime;\\n\\n    uint public inputEventId; // last processed event from side network\\n    uint outputEventId;  // last created event in this network. start from 1 coz 0 consider already processed\\n\\n    uint lastTimeframe;\\n\\n    event Withdraw(address indexed from, address tokenFrom, address tokenTo, uint eventId, uint feeAmount);\\n    event Transfer(uint indexed eventId, CommonStructs.Transfer[] queue);\\n    event TransferSubmit(uint indexed eventId);\\n    event TransferFinish(uint indexed eventId);\\n\\n    function __CommonBridge_init(CommonStructs.ConstructorArgs memory args) internal initializer {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(RELAY_ROLE, args.relayAddress);\\n        _setupRole(ADMIN_ROLE, args.adminAddress);\\n\\n        // initialise tokenAddresses with start values\\n        _tokensAddBatch(args.tokenThisAddresses, args.tokenSideAddresses);\\n        wrapperAddress = args.wrappingTokenAddress;\\n\\n        sideBridgeAddress = args.sideBridgeAddress;\\n        fee = args.fee;\\n        feeRecipient = args.feeRecipient;\\n        minSafetyBlocks = args.minSafetyBlocks;\\n        timeframeSeconds = args.timeframeSeconds;\\n        lockTime = args.lockTime;\\n\\n        oldestLockedEventId = 1;\\n        outputEventId = 1;\\n    }\\n\\n\\n    function wrapWithdraw(address toAddress) public payable {\\n        address tokenSideAddress = tokenAddresses[wrapperAddress];\\n        require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n\\n        require(msg.value > fee, \\\"Sent value <= fee\\\");\\n        feeRecipient.transfer(fee);\\n\\n        uint restOfValue = msg.value - fee;\\n        IWrapper(wrapperAddress).deposit{value : restOfValue}();\\n\\n        //\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, restOfValue));\\n        emit Withdraw(msg.sender, address(0), tokenSideAddress, outputEventId, fee);\\n\\n        withdrawFinish();\\n    }\\n\\n    function withdraw(address tokenThisAddress, address toAddress, uint amount, bool unwrapSide) payable public {\\n        address tokenSideAddress;\\n        if (unwrapSide) {\\n            require(tokenAddresses[address(0)] == tokenThisAddress, \\\"Token not point to native token\\\");\\n            // tokenSideAddress will be 0x0000000000000000000000000000000000000000 - for native token\\n        } else {\\n            tokenSideAddress = tokenAddresses[tokenThisAddress];\\n            require(tokenSideAddress != address(0), \\\"Unknown token address\\\");\\n        }\\n\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(msg.value == fee, \\\"Sent value != fee\\\");\\n        feeRecipient.transfer(msg.value);\\n\\n        require(IERC20(tokenThisAddress).transferFrom(msg.sender, address(this), amount), \\\"Fail transfer coins\\\");\\n\\n        queue.push(CommonStructs.Transfer(tokenSideAddress, toAddress, amount));\\n        emit Withdraw(msg.sender, tokenThisAddress, tokenSideAddress, outputEventId, fee);\\n\\n        withdrawFinish();\\n    }\\n\\n    function withdrawFinish() internal {\\n        uint nowTimeframe = block.timestamp / timeframeSeconds;\\n        if (nowTimeframe != lastTimeframe) {\\n            emit Transfer(outputEventId++, queue);\\n            delete queue;\\n\\n            lastTimeframe = nowTimeframe;\\n        }\\n    }\\n\\n\\n    // locked transfers from another network\\n    function getLockedTransfers(uint eventId) public view returns (CommonStructs.LockedTransfers memory) {\\n        return lockedTransfers[eventId];\\n    }\\n\\n\\n    function proceedTransfers(CommonStructs.Transfer[] memory transfers) internal {\\n        for (uint i = 0; i < transfers.length; i++) {\\n\\n            if (transfers[i].tokenAddress == address(0)) {// native token\\n                IWrapper(wrapperAddress).withdraw(transfers[i].amount);\\n                payable(transfers[i].toAddress).transfer(transfers[i].amount);\\n            } else {// ERC20 token\\n                require(\\n                    IERC20(transfers[i].tokenAddress).transfer(transfers[i].toAddress, transfers[i].amount),\\n                    \\\"Fail transfer coins\\\");\\n            }\\n\\n        }\\n    }\\n\\n\\n    // submitted transfers save here for `lockTime` period\\n    function lockTransfers(CommonStructs.Transfer[] memory events, uint eventId) internal {\\n        lockedTransfers[eventId].endTimestamp = block.timestamp + lockTime;\\n        for (uint i = 0; i < events.length; i++)\\n            lockedTransfers[eventId].transfers.push(events[i]);\\n    }\\n\\n    // after `lockTime` period, transfers can  be unlocked\\n    function unlockTransfers(uint eventId) public whenNotPaused {\\n        require(eventId == oldestLockedEventId, \\\"can unlock only oldest event\\\");\\n\\n        CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n        require(transfersLocked.endTimestamp > 0, \\\"no locked transfers with this id\\\");\\n        require(transfersLocked.endTimestamp < block.timestamp, \\\"lockTime has not yet passed\\\");\\n\\n        proceedTransfers(transfersLocked.transfers);\\n\\n        delete lockedTransfers[eventId];\\n        emit TransferFinish(eventId);\\n\\n        oldestLockedEventId = eventId + 1;\\n    }\\n\\n    // optimized version of unlockTransfers that unlock all transfer that can be unlocked in one call\\n    function unlockTransfersBatch() public whenNotPaused {\\n        uint eventId = oldestLockedEventId;\\n        for (;; eventId++) {\\n            CommonStructs.LockedTransfers memory transfersLocked = lockedTransfers[eventId];\\n            if (transfersLocked.endTimestamp == 0 || transfersLocked.endTimestamp > block.timestamp) break;\\n\\n            proceedTransfers(transfersLocked.transfers);\\n\\n            delete lockedTransfers[eventId];\\n            emit TransferFinish(eventId);\\n        }\\n        oldestLockedEventId = eventId;\\n    }\\n\\n    // delete transfers with passed eventId and all after it\\n    function removeLockedTransfers(uint eventId) public onlyRole(ADMIN_ROLE) whenPaused {\\n        require(eventId >= oldestLockedEventId, \\\"eventId must be >= oldestLockedEventId\\\");\\n        for (; lockedTransfers[eventId].endTimestamp != 0; eventId++)\\n            delete lockedTransfers[eventId];\\n        inputEventId = eventId-1; // pretend like we don't receive that event\\n    }\\n\\n\\n    // admin setters\\n\\n    function changeMinSafetyBlocks(uint minSafetyBlocks_) public onlyRole(ADMIN_ROLE) {\\n        minSafetyBlocks = minSafetyBlocks_;\\n    }\\n\\n    function changeFee(uint fee_) public onlyRole(ADMIN_ROLE) {\\n        fee = fee_;\\n    }\\n\\n    function changeFeeRecipient(address payable feeRecipient_) public onlyRole(ADMIN_ROLE) {\\n        feeRecipient = feeRecipient_;\\n    }\\n\\n    function changeTimeframeSeconds(uint timeframeSeconds_) public onlyRole(ADMIN_ROLE) {\\n        timeframeSeconds = timeframeSeconds_;\\n    }\\n\\n    function changeLockTime(uint lockTime_) public onlyRole(ADMIN_ROLE) {\\n        lockTime = lockTime_;\\n    }\\n\\n\\n    // token addressed mapping\\n\\n    function tokensAdd(address tokenThisAddress, address tokenSideAddress) public onlyRole(ADMIN_ROLE) {\\n        tokenAddresses[tokenThisAddress] = tokenSideAddress;\\n    }\\n\\n    function tokensRemove(address tokenThisAddress) public onlyRole(ADMIN_ROLE) {\\n        delete tokenAddresses[tokenThisAddress];\\n    }\\n\\n    function tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) public onlyRole(ADMIN_ROLE) {\\n        _tokensAddBatch(tokenThisAddresses, tokenSideAddresses);\\n    }\\n\\n    function _tokensAddBatch(address[] memory tokenThisAddresses, address[] memory tokenSideAddresses) private {\\n        require(tokenThisAddresses.length == tokenSideAddresses.length, \\\"sizes of tokenThisAddresses and tokenSideAddresses must be same\\\");\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            tokenAddresses[tokenThisAddresses[i]] = tokenSideAddresses[i];\\n    }\\n\\n    function tokensRemoveBatch(address[] memory tokenThisAddresses) public onlyRole(ADMIN_ROLE) {\\n        uint arrayLength = tokenThisAddresses.length;\\n        for (uint i = 0; i < arrayLength; i++)\\n            delete tokenAddresses[tokenThisAddresses[i]];\\n    }\\n\\n    // pause\\n\\n    function pause() public onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // internal\\n\\n    function checkEventId(uint eventId) internal {\\n        require(eventId == ++inputEventId, \\\"EventId out of order\\\");\\n    }\\n\\n    receive() external payable {}  // need to receive native token from wrapper contract\\n\\n}\\n\",\"keccak256\":\"0x9086f4e684728707a3f290643b3e289ef63340a477d320eea0cbf8a6bf2fd278\",\"license\":\"MIT\"},\"contracts/common/CommonStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nlibrary CommonStructs {\\n    struct Transfer {\\n        address tokenAddress;\\n        address toAddress;\\n        uint amount;\\n    }\\n\\n    struct TransferProof {\\n        bytes[] receiptProof;\\n        uint eventId;\\n        Transfer[] transfers;\\n    }\\n\\n    struct LockedTransfers {\\n        Transfer[] transfers;\\n        uint endTimestamp;\\n    }\\n\\n    struct ConstructorArgs {\\n        address sideBridgeAddress; address adminAddress;\\n        address relayAddress; address wrappingTokenAddress;\\n        address[] tokenThisAddresses; address[] tokenSideAddresses;\\n        uint fee; address payable feeRecipient;\\n        uint timeframeSeconds; uint lockTime; uint minSafetyBlocks;\\n    }\\n}\\n\",\"keccak256\":\"0x21ed033271ffa50d60805037e81197610a3764b9647f8b67b85f7454b8ac0bd8\",\"license\":\"MIT\"},\"contracts/networks/ETH_AmbBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport \\\"../common/CommonBridge.sol\\\";\\nimport \\\"../checks/CheckPoW.sol\\\";\\n\\n\\ncontract ETH_AmbBridge is CommonBridge, CheckPoW {\\n\\n    function initialize(\\n        CommonStructs.ConstructorArgs memory args,\\n        uint minimumDifficulty\\n    ) public initializer {\\n        __CommonBridge_init(args);\\n        __CheckPoW_init(minimumDifficulty);\\n        emit Transfer(0, queue); // used to sync validatorSet\\n    }\\n\\n    function submitTransferPoW(PoWProof calldata powProof) public onlyRole(RELAY_ROLE) whenNotPaused {\\n        emit TransferSubmit(powProof.transfer.eventId);\\n        checkEventId(powProof.transfer.eventId);\\n        checkPoW_(powProof, sideBridgeAddress);\\n        lockTransfers(powProof.transfer.transfers, powProof.transfer.eventId);\\n    }\\n\\n    function setSideBridge(address _sideBridgeAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(sideBridgeAddress == address(0), \\\"sideBridgeAddress already set\\\");\\n        sideBridgeAddress = _sideBridgeAddress;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x1fc76029169b5971d6ea8d8f9a2ddcaa903d8cc6f452888c18f1e37f20730ba1\",\"license\":\"MIT\"},\"contracts/tokens/IWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\ninterface IWrapper {\\n    event Deposit(address indexed dst, uint amount);\\n    event Withdrawal(address indexed src, uint amount);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint amount) external;\\n}\\n\",\"keccak256\":\"0xbe5bc17241b9a14b78e18e4562e2a4c02e2b941fae0f1a896bbd795e49af136e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506159f080620000216000396000f3fe6080604052600436106102595760003560e060020a900480638ac1f86f1161013d578063baeebe75116100ba578063e31be0871161007e578063e31be08714610704578063e4e6bba614610731578063e88b662614610744578063f33fe10f14610764578063f862b7eb14610784578063fd5d2ef3146107a457600080fd5b8063baeebe7514610665578063c7b81f4f1461067b578063d547741f146106ae578063ddca3f43146106ce578063e1d862be146106e457600080fd5b806396cf52271161010157806396cf5227146105ce57806399b5bb64146105ee578063a217fddf14610604578063b6d3385e14610619578063ba8bbbe01461064f57600080fd5b80638ac1f86f146105505780638e5df9c71461056557806391d1485414610585578063924cf6e0146105a5578063934785b7146105bb57600080fd5b806336568abe116101d65780635c975abb1161019a5780635c975abb146104895780636a1db1bf146104a157806375b238fc146104c15780637df8b802146104e35780638456cb591461051b578063853890ae1461053057600080fd5b806336568abe146103e45780633f4ba83a1461040457806342180fb8146104195780634a1856de146104395780635249a7051461046957600080fd5b8063236040711161021d5780632360407114610334578063248a9ca31461035457806327ab61fb146103845780632f2ff15d146103a4578063331a891a146103c457600080fd5b806301ffc9a714610265578063044218231461029a57806309fce356146102dc5780630d668087146102fe57806321d3d5361461031457600080fd5b3661026057005b600080fd5b34801561027157600080fd5b50610285610280366004614e64565b6107c4565b60405190151581526020015b60405180910390f35b3480156102a657600080fd5b506102ce7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b604051908152602001610291565b3480156102e857600080fd5b506102fc6102f7366004614d65565b610857565b005b34801561030a57600080fd5b506102ce60d35481565b34801561032057600080fd5b506102fc61032f366004614c87565b61087f565b34801561034057600080fd5b506102fc61034f366004614c87565b61090f565b34801561036057600080fd5b506102ce61036f366004614e26565b60009081526065602052604090206001015490565b34801561039057600080fd5b506102fc61039f366004614ea3565b61094b565b3480156103b057600080fd5b506102fc6103bf366004614e3f565b610a07565b3480156103d057600080fd5b506102fc6103df366004614e26565b610a2d565b3480156103f057600080fd5b506102fc6103ff366004614e3f565b610b74565b34801561041057600080fd5b506102fc610c03565b34801561042557600080fd5b506102fc610434366004614e26565b610c27565b34801561044557600080fd5b506102ce610454366004614e26565b60ca6020526000908152604090206001015481565b34801561047557600080fd5b506102fc610484366004614d30565b610c46565b34801561049557600080fd5b5060975460ff16610285565b3480156104ad57600080fd5b506102fc6104bc366004614e26565b610ccb565b3480156104cd57600080fd5b506102ce60008051602061599b83398151915281565b3480156104ef57600080fd5b5060cd5461050390600160a060020a031681565b604051600160a060020a039091168152602001610291565b34801561052757600080fd5b506102fc610cea565b34801561053c57600080fd5b506102fc61054b366004614ca4565b610d0b565b34801561055c57600080fd5b506102fc610d53565b34801561057157600080fd5b506102fc610580366004614c87565b610eab565b34801561059157600080fd5b506102856105a0366004614e3f565b610eec565b3480156105b157600080fd5b506102ce60d15481565b6102fc6105c9366004614cdd565b610f17565b3480156105da57600080fd5b506102fc6105e9366004614e26565b611314565b3480156105fa57600080fd5b506102ce60d45481565b34801561061057600080fd5b506102ce600081565b34801561062557600080fd5b50610503610634366004614c87565b60cc60205260009081526040902054600160a060020a031681565b34801561065b57600080fd5b506102ce60cb5481565b34801561067157600080fd5b506102ce60d25481565b34801561068757600080fd5b50610285610696366004614e26565b600090815260d7602052604090206102000154151590565b3480156106ba57600080fd5b506102fc6106c9366004614e3f565b611333565b3480156106da57600080fd5b506102ce60ce5481565b3480156106f057600080fd5b506102fc6106ff366004614fbf565b611359565b34801561071057600080fd5b5061072461071f366004614e26565b61149f565b60405161029191906154ef565b6102fc61073f366004614c87565b61155b565b34801561075057600080fd5b506102fc61075f366004615016565b611801565b34801561077057600080fd5b5060d05461050390600160a060020a031681565b34801561079057600080fd5b506102fc61079f366004614e26565b6118c7565b3480156107b057600080fd5b506102fc6107bf366004614e26565b611afa565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b00000000000000000000000000000000000000000000000000000000148061085157507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b60008051602061599b8339815191526108708133611b19565b61087a8383611b80565b505050565b600061088b8133611b19565b60d054600160a060020a0316156108ec5760405160e560020a62461bcd02815260206004820152601d60248201527f736964654272696467654164647265737320616c72656164792073657400000060448201526064015b60405180910390fd5b5060d08054600160a060020a031916600160a060020a0392909216919091179055565b60008051602061599b8339815191526109288133611b19565b5060cf8054600160a060020a031916600160a060020a0392909216919091179055565b600054610100900460ff1680610964575060005460ff16155b6109835760405160e560020a62461bcd0281526004016108e390615492565b600054610100900460ff161580156109a5576000805461ffff19166101011790555b6109ae83611c96565b6109b782611de1565b60007fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c96040516109e991906153b8565b60405180910390a2801561087a576000805461ff0019169055505050565b600082815260656020526040902060010154610a238133611b19565b61087a8383611e55565b60008051602061599b833981519152610a468133611b19565b60975460ff16610a9b5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108e3565b60cb54821015610b165760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e744964000000000000000000000000000000000000000000000000000060648201526084016108e3565b600082815260ca602052604090206001015415610b6257600082815260ca6020526040812090610b468282614a06565b5060006001919091015581610b5a816158e4565b925050610b16565b610b6d600183615725565b60d4555050565b600160a060020a0381163314610bf55760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108e3565b610bff8282611edb565b5050565b60008051602061599b833981519152610c1c8133611b19565b610c24611f42565b50565b60008051602061599b833981519152610c408133611b19565b5060d255565b60008051602061599b833981519152610c5f8133611b19565b815160005b81811015610cc55760cc6000858381518110610c8257610c82615945565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610cbd816158e4565b915050610c64565b50505050565b60008051602061599b833981519152610ce48133611b19565b5060ce55565b60008051602061599b833981519152610d038133611b19565b610c24611fe1565b60008051602061599b833981519152610d248133611b19565b50600160a060020a03918216600090815260cc602052604090208054600160a060020a03191691909216179055565b60975460ff1615610d795760405160e560020a62461bcd0281526004016108e39061545b565b60cb545b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610e0b57600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610db1565b5050505081526020016001820154815250509050806020015160001480610e355750428160200151115b15610e40575060cb55565b8051610e4b9061203c565b600082815260ca6020526040812090610e648282614a06565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610ea3816158e4565b915050610d7d565b60008051602061599b833981519152610ec48133611b19565b50600160a060020a0316600090815260cc602052604090208054600160a060020a0319169055565b6000918252606560209081526040808420600160a060020a0393909316845291905290205460ff1690565b60008115610fac576000805260cc6020527f435daec636ce435a90bde0aeec309a303a359a854c5a51b7d6a5a941d6db609454600160a060020a03868116911614610fa75760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e0060448201526064016108e3565b611018565b50600160a060020a03808516600090815260cc602052604090205416806110185760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108e3565b6000831161106b5760405160e560020a62461bcd02815260206004820152601160248201527f43616e6e6f74207769746864726177203000000000000000000000000000000060448201526064016108e3565b60ce5434146110bf5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d2066656500000000000000000000000000000060448201526064016108e3565b60cf54604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156110f8573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101849052600160a060020a038616906323b872dd90606401602060405180830381600087803b15801561116057600080fd5b505af1158015611174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111989190614dc9565b6111e75760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108e3565b6040805160608082018352600160a060020a0384811680845288821660208086019182528587018a815260c98054600181018255600091909152965160039097027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054988716600160a060020a0319998a1617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2984018054918716919098161790965594517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55460ce548651938c168452948301919091529381019390935282015233907ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9060800160405180910390a261130d6122d0565b5050505050565b60008051602061599b83398151915261132d8133611b19565b5060d355565b60008281526065602052604090206001015461134f8133611b19565b61087a8383611edb565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d76113848133611b19565b60975460ff16156113aa5760405160e560020a62461bcd0281526004016108e39061545b565b6113b76020830183615622565b602001357f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b60405160405180910390a26114006113f76020840184615622565b60200135612348565b60d054611417908390600160a060020a03166123ad565b610bff6114276020840184615622565b611435906040810190615571565b808060200260200160405190810160405280939291908181526020016000905b828210156114815761147260608302860136819003810190614ffa565b81526020019060010190611455565b50505050508380602001906114969190615622565b602001356124e3565b604080518082019091526060815260006020820152600082815260ca60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b8282101561154257600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016114e8565b5050505081526020016001820154815250509050919050565b60cd54600160a060020a03908116600090815260cc602052604090205416806115c95760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108e3565b60ce54341161161d5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c7565203c3d2066656500000000000000000000000000000060448201526064016108e3565b60cf5460ce54604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015611659573d6000803e3d6000fd5b50600060ce543461166a9190615725565b905060cd60009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156116bf57600080fd5b505af11580156116d3573d6000803e3d6000fd5b50506040805160608082018352600160a060020a038881168084528a821660208086019182528587018b815260c980546001810182556000918252975160039098027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054998816600160a060020a03199a8b1617905593517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d29850180549190971698169790971790945592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55460ce54865195865292850191909152938301939093528101919091523393507ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9250608001905060405180910390a261087a6122d0565b6002851061184a5760d76000611818600288615725565b8152602001908152602001600020600080820160006118379190614a27565b5060006102008201819055610201909101555b600085815260d76020526040812082915b828110156118a35784848281811061187557611875615945565b905060200201358282610200811061188f5761188f615945565b01558061189b816158e4565b91505061185b565b5050506000948552505060d760205260409092206102008101919091556102010155565b60975460ff16156118ed5760405160e560020a62461bcd0281526004016108e39061545b565b60cb5481146119415760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e740000000060448201526064016108e3565b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b828210156119cf57600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101611975565b50505050815260200160018201548152505090506000816020015111611a3a5760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e73666572732077697468207468697320696460448201526064016108e3565b42816020015110611a905760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f742079657420706173736564000000000060448201526064016108e3565b8051611a9b9061203c565b600082815260ca6020526040812090611ab48282614a06565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2611af38260016156da565b60cb555050565b60008051602061599b833981519152611b138133611b19565b5060d155565b611b238282610eec565b610bff57611b3b81600160a060020a031660146125a6565b611b468360206125a6565b604051602001611b57929190615324565b60408051601f198184030181529082905260e560020a62461bcd0282526108e391600401615428565b8051825114611bfa5760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d650060648201526084016108e3565b815160005b81811015610cc557828181518110611c1957611c19615945565b602002602001015160cc6000868481518110611c3757611c37615945565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611c8e906158e4565b915050611bff565b600054610100900460ff1680611caf575060005460ff16155b611cce5760405160e560020a62461bcd0281526004016108e390615492565b600054610100900460ff16158015611cf0576000805461ffff19166101011790555b611cfb600033612793565b611d297f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d78360400151612793565b611d4560008051602061599b8339815191528360200151612793565b611d5782608001518360a00151611b80565b606082015160cd8054600160a060020a03928316600160a060020a031991821617909155835160d0805491841691831691909117905560c084015160ce5560e084015160cf805491909316911617905561014082015160d15561010082015160d25561012082015160d355600160cb81905560d5558015610bff576000805461ff00191690555050565b600054610100900460ff1680611dfa575060005460ff16155b611e195760405160e560020a62461bcd0281526004016108e390615492565b600054610100900460ff16158015611e3b576000805461ffff19166101011790555b60d88290558015610bff576000805461ff00191690555050565b611e5f8282610eec565b610bff576000828152606560209081526040808320600160a060020a03851684529091529020805460ff19166001179055611e973390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ee58282610eec565b15610bff576000828152606560209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff16611f975760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108e3565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60975460ff16156120075760405160e560020a62461bcd0281526004016108e39061545b565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611fc43390565b60005b8151811015610bff576000600160a060020a031682828151811061206557612065615945565b602002602001015160000151600160a060020a031614156121815760cd548251600160a060020a0390911690632e1a7d4d908490849081106120a9576120a9615945565b6020026020010151604001516040518263ffffffff1660e060020a0281526004016120d691815260200190565b600060405180830381600087803b1580156120f057600080fd5b505af1158015612104573d6000803e3d6000fd5b5050505081818151811061211a5761211a615945565b602002602001015160200151600160a060020a03166108fc83838151811061214457612144615945565b6020026020010151604001519081150290604051600060405180830381858888f1935050505015801561217b573d6000803e3d6000fd5b506122be565b81818151811061219357612193615945565b602002602001015160000151600160a060020a031663a9059cbb8383815181106121bf576121bf615945565b6020026020010151602001518484815181106121dd576121dd615945565b6020026020010151604001516040518363ffffffff1660e060020a02815260040161221d929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b15801561223757600080fd5b505af115801561224b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226f9190614dc9565b6122be5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108e3565b806122c8816158e4565b91505061203f565b600060d254426122e091906156f2565b905060d6548114610c245760d580549060006122fb836158e4565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c960405161232f91906153b8565b60405180910390a261234360c96000614a06565b60d655565b60d460008154612357906158e4565b91829055508114610c245760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f7264657200000000000000000000000060448201526064016108e3565b60006123ce6123bf6020850185615622565b6123c890615765565b8361279d565b905060005b6123dd8480615521565b9050811015610cc557816123f18580615521565b8381811061240157612401615945565b90506020028101906124139190615601565b60600135146124675760405160e560020a62461bcd02815260206004820152601f60248201527f706172656e7448617368206f722072656365697074486173682077726f6e670060448201526064016108e3565b61249b6124748580615521565b8381811061248457612484615945565b90506020028101906124969190615601565b612892565b91506124d16124aa8580615521565b838181106124ba576124ba615945565b90506020028101906124cc9190615601565b61299c565b806124db816158e4565b9150506123d3565b60d3546124f090426156da565b600082815260ca60205260408120600101919091555b825181101561087a57600082815260ca60205260409020835184908390811061253157612531615945565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a039384161782559383015194810180549094169490911693909317909155604001516002909101558061259e816158e4565b915050612506565b606060006125b5836002615706565b6125c09060026156da565b67ffffffffffffffff8111156125d8576125d861595e565b6040519080825280601f01601f191660200182016040528015612602576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061263957612639615945565b6020010190600160f860020a031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061268457612684615945565b6020010190600160f860020a031916908160001a90535060006126a8846002615706565b6126b39060016156da565b90505b600181111561273a577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106126f4576126f4615945565b1a60f860020a0282828151811061270d5761270d615945565b6020010190600160f860020a031916908160001a905350601090940493612733816158cd565b90506126b6565b50831561278c5760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108e3565b9392505050565b610bff8282611e55565b60008083600001516000815181106127b7576127b7615945565b60200260200101518385600001516001815181106127d7576127d7615945565b60200260200101516127ec8760200151612af2565b87518051600290811061280157612801615945565b6020026020010151886040015160405160200161281e91906153a5565b604051602081830303815290604052896000015160038151811061284457612844615945565b60200260200101516040516020016128629796959493929190615213565b60405160208183030381529060405280519060200120905061288a8460000151826004612c5a565b949350505050565b60006128a16020830183614de6565b6128ae60408401846155ba565b60608501356128c060808701876155ba565b6128cd60a08901896155ba565b6128da60c08b018b6155ba565b6040516020016128f39a9998979695949392919061514b565b60408051601f1981840301815291905261291060e08401846155ba565b61291e6101008601866155ba565b61292c6101208801886155ba565b61293a6101408a018a6155ba565b6129486101608c018c6155ba565b6040516020016129619a999897969594939291906151c7565b60408051601f198184030181529082905261297f92916020016152f5565b604051602081830303815290604052805190602001209050919050565b60006129e86129ae60a08401846155ba565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d0a92505050565b905060d854811015612a3f5760405160e560020a62461bcd02815260206004820152601260248201527f646966666963756c747920746f6f206c6f77000000000000000000000000000060448201526064016108e3565b610bff612a526129ae60e08501856155ba565b612a5b84612d3d565b612a6c6129ae6101408701876155ba565b84612a7b610180880188615521565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612abb925050506101a0890189615521565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612e2d92505050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b6020811015612b8957818181518110612b3b57612b3b615945565b60209101015160f860020a90819004027fff000000000000000000000000000000000000000000000000000000000000001615612b7757612b89565b80612b81816158e4565b915050612b20565b6000612b96826020615725565b67ffffffffffffffff811115612bae57612bae61595e565b6040519080825280601f01601f191660200182016040528015612bd8576020820181803683370190505b50905060005b8151811015612c51578383612bf2816158e4565b945081518110612c0457612c04615945565b602001015160f860020a900460f860020a02828281518110612c2857612c28615945565b6020010190600160f860020a031916908160001a90535080612c49816158e4565b915050612bde565b50949350505050565b60006060825b8551811015612d0057858181518110612c7b57612c7b615945565b60200260200101518587836001612c9291906156da565b81518110612ca257612ca2615945565b6020026020010151604051602001612cbc939291906152be565b60405160208183030381529060405291506020825111612ce457612cdf8261573c565b612cec565b815160208301205b9450612cf96002826156da565b9050612c60565b5092949350505050565b600081516008612d1a9190615706565b612d2690610100615725565b612d2f8361573c565b60029190910a900492915050565b600080612d506040840160208501614de6565b612d5d60408501856155ba565b6060860135612d6f60808801886155ba565b604051602001612d84969594939291906150f7565b60408051601f19818403018152919052612da160a08501856155ba565b612dae60c08701876155ba565b612dbb60e08901896155ba565b612dc96101008b018b6155ba565b612dd76101608d018d6155ba565b604051602001612df09a999897969594939291906151c7565b60408051601f1981840301815290829052612e0e92916020016152f5565b60408051601f1981840301815291905280516020909101209392505050565b6000612e3b617530886156f2565b90506000612e4c8787868686612eb6565b9050612e5a856000196156f2565b811115612eac5760405160e560020a62461bcd02815260206004820152601960248201527f45746861736820646966666963756c747920746f6f206c6f770000000000000060448201526064016108e3565b5050505050505050565b600080612ec387876131a3565b9050612ecd614a37565b612ed5614a56565b600085815260d7602052604081206102018101546102009091015490918082612f435760405160e560020a62461bcd02815260206004820152601160248201527f45706f636844617461206e6f742073657400000000000000000000000000000060448201526064016108e3565b600091505b6010821015612f7a57602082028781018051918801918252516102009091015281612f72816158e4565b925050612f48565b600091505b60408210156131035786516000908490612fbb90851889612fa16020886158ff565b60208110612fb157612fb1615945565b602002015161324a565b612fc591906158ff565b9050612fd18a8261326a565b612fde82858f8f8a6132cf565b1461302e5760405160e560020a62461bcd02815260206004820152600a60248201527f506f57206661696c65640000000000000000000000000000000000000000000060448201526064016108e3565b600091505b60088210156130f057602060808481028e0182810180519386028b01805163ffffffff9586166301000193918202188616825260408401805161010084018051918916918402919091188816905260608501805161020085018051918a169185029190911889169052949095018051610300909301805193881693909202929092189095169094528051640100000000908190049091528251819004909252805182900490528151049052816130e8816158e4565b925050613033565b50816130fb816158e4565b925050612f7f565b600091505b60208210156131885761315561314961313d88856020811061312c5761312c615945565b602002015189612fa18760016156da565b88612fa18660026156da565b87612fa18560036156da565b856131616004856156f2565b6008811061317157613171615945565b60200201526131816004836156da565b9150613108565b61319287866134aa565b9d9c50505050505050505050505050565b6131ab614a75565b6131b3614a94565b6131bc846137e2565b67ffffffffffffffff8116825293506131de68010000000000000000856156f2565b67ffffffffffffffff81166020830152935061320368010000000000000000856156f2565b67ffffffffffffffff81166040830152935061322868010000000000000000856156f2565b67ffffffffffffffff8116606083015260808201849052935061288a81613824565b60008161325b846301000193615706565b1863ffffffff16905092915050565b600082815260d760205260408120610201810154600290810a84049183918304610200811061329b5761329b615945565b015490506132aa6002836158ff565b6132c0576001608060020a031691506108519050565b608060020a9004949350505050565b6000806132dc8587613b39565b6001608060020a031690506000808080806132f86002896158ff565b600290980497119050600061330d888c615706565b905081156133225761331f8b826156da565b90505b60005b8881101561341d5760208282010260208b01015193508c6001166000141561335b578695506001608060020a038416945061336b565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965060018d166133c157869550608060020a840494506133ce565b608060020a840495508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965080613415816158e4565b915050613325565b82156134995760208282010260208b01015193508c60011660001415613451578695506001608060020a0384169450613461565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206001608060020a031696505b50949b9a5050505050505050505050565b60008083600760200201516134cc906c01000000000000000000000000615706565b60c08501516134e49068010000000000000000615706565b60a08601516134f890640100000000615706565b608087015161350791906156da565b61351191906156da565b61351b91906156da565b61352990608060020a615706565b6060850151613545906c01000000000000000000000000615706565b604086015161355d9068010000000000000000615706565b602087015161357190640100000000615706565b875161357d91906156da565b61358791906156da565b61359191906156da565b61359b91906156da565b9050600084600f60200201516135be906c01000000000000000000000000615706565b6101c08601516135d79068010000000000000000615706565b6101a08701516135ec90640100000000615706565b6101808801516135fc91906156da565b61360691906156da565b61361091906156da565b61361e90608060020a615706565b61016086015161363b906c01000000000000000000000000615706565b6101408701516136549068010000000000000000615706565b61012088015161366990640100000000615706565b61010089015161367991906156da565b61368391906156da565b61368d91906156da565b61369791906156da565b9050600084600760200201516136ba906c01000000000000000000000000615706565b60c08601516136d29068010000000000000000615706565b60a08701516136e690640100000000615706565b60808801516136f591906156da565b6136ff91906156da565b61370991906156da565b61371790608060020a615706565b6060860151613733906c01000000000000000000000000615706565b604087015161374b9068010000000000000000615706565b602088015161375f90640100000000615706565b885161376b91906156da565b61377591906156da565b61377f91906156da565b61378991906156da565b9050613794836137e2565b61379d836137e2565b6137a6836137e2565b604080516020810194909452830191909152606082015260800160408051808303601f1901815291905280516020909101209695505050505050565b60008060005b602081101561381d5761380260ff851661010084026156da565b61010090940493915080613815816158e4565b9150506137e8565b5092915050565b61382c614a75565b61383860096008615706565b60481461388a5760405160e560020a62461bcd02815260206004820152600c60248201527f73706f6e6765206572726f72000000000000000000000000000000000000000060448201526064016108e3565b600160a08301526780000000000000006101008301526048600860006138b1600983615706565b90506138bb614ab3565b600080805b6138ca87866156f2565b8310156139ed57600091505b60058210156139d0575060005b60058110156139be576138f686886156f2565b613901836005615706565b61390b90836156da565b10156139ac578861391d836005615706565b82613929866009615706565b61393391906156da565b61393d91906156da565b6009811061394d5761394d615945565b6020020151848361395f846005615706565b61396991906156da565b6019811061397957613979615945565b602002015118848361398c846005615706565b61399691906156da565b601981106139a6576139a6615945565b60200201525b806139b6816158e4565b9150506138e3565b816139c8816158e4565b9250506138d6565b6139d984613c3a565b9350826139e5816158e4565b9350506138c0565b6139f5614a75565b60005b6010811015613b2b57600093505b6005841015613b2657600092505b6005831015613b1457613a27888a6156f2565b613a32856005615706565b613a3c90856156da565b108015613a495750601081105b15613b02578584613a5b856005615706565b613a6591906156da565b60198110613a7557613a75615945565b602002015163ffffffff16828260108110613a9257613a92615945565b60200201526401000000008685613aaa866005615706565b613ab491906156da565b60198110613ac457613ac4615945565b6020020151613ad391906156f2565b82613adf8360016156da565b60108110613aef57613aef615945565b6020020152613aff6002826156da565b90505b82613b0c816158e4565b935050613a14565b83613b1e816158e4565b945050613a06565b6139f8565b509998505050505050505050565b600082613b47836004615706565b81518110613b5757613b57615945565b602002602001015183836004613b6d9190615706565b613b789060016156da565b81518110613b8857613b88615945565b602002602001015184846004613b9e9190615706565b613ba99060026156da565b81518110613bb957613bb9615945565b602002602001015185856004613bcf9190615706565b613bda9060036156da565b81518110613bea57613bea615945565b6020026020010151604051602001613c1b949392919093845260208401929092526040830152606082015260800190565b60408051808303601f1901815291905280516020909101209392505050565b613c42614ab3565b613c4a614ab3565b613c52614ad2565b613c5a614ad2565b600060405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b60188110156149fb576080808801516060808a01516040808c01516020808e01518e511890911890921890931888526101208b01516101008c015160e08d015160c08e015160a08f0151181818189088018190526101c08b01516101a08c01516101808d01516101608e01516101408f015118181818928801929092526102608a01516102408b01516102208c01516102008d01516101e08e015118181818908701526103008901516102e08a01516102c08b01516102a08c01516102808d01511818181891860191909152613e5f90678000000000000000906156f2565b6020850151613e6f906002615706565b608086015167ffffffffffffffff91909116919091171883526040840151613ea090678000000000000000906156f2565b6040850151613eb0906002615706565b855167ffffffffffffffff91909116919091171860208401526060840151613ee190678000000000000000906156f2565b6060850151613ef1906002615706565b67ffffffffffffffff161784600160200201511883600260200201526780000000000000008460046020020151613f2891906156f2565b6080850151613f38906002615706565b604086015167ffffffffffffffff91909116919091171860608401528351613f6990678000000000000000906156f2565b8451613f76906002615706565b60608087015167ffffffffffffffff929092169290921718608080860191825285518a5118808b52865160208c81018051909218825288516040808f01805190921890915289518e8801805190911890528951948e0180519095189094528801805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291870180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292860180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a018051909118905290865251614101906310000000906156f2565b602088015161411590641000000000615706565b67ffffffffffffffff1617610100860152604087015161413e90672000000000000000906156f2565b604088015161414e906008615706565b67ffffffffffffffff161761016086015260608701516141729062800000906156f2565b60608801516141879065020000000000615706565b67ffffffffffffffff161761026086015260808701516141ae9065400000000000906156f2565b60808801516141c09062040000615706565b67ffffffffffffffff16176102c086015260a08701516141e990678000000000000000906156f2565b60a08801516141f9906002615706565b67ffffffffffffffff1617604086015260c087015161421c9062100000906156f2565b60c08801516142319065100000000000615706565b67ffffffffffffffff161760a086015260e0870151614258906640000000000000906156f2565b60e088015161426990610400615706565b67ffffffffffffffff16176101a086015261010087015161428e9062080000906156f2565b6101008801516142a49065200000000000615706565b67ffffffffffffffff16176102008601526101208701516142ce90674000000000000000906156f2565b6101208801516142df906004615706565b67ffffffffffffffff1617610300860152610140870151614302906004906156f2565b61014088015161431a90674000000000000000615706565b67ffffffffffffffff1617608086015261016087015161434390670400000000000000906156f2565b610160880151614354906040615706565b67ffffffffffffffff161760e08601526101808701516143789062200000906156f2565b61018088015161438e9065080000000000615706565b67ffffffffffffffff16176101408601526101a08701516143b7906602000000000000906156f2565b6101a08801516143c990618000615706565b67ffffffffffffffff16176102408601526101c08701516143ec906008906156f2565b6101c088015161440490672000000000000000615706565b67ffffffffffffffff16176102a08601526101e087015161442b90641000000000906156f2565b6101e088015161443f906310000000615706565b67ffffffffffffffff161760208601526102008781015161446091906156f2565b610200880151614477906680000000000000615706565b67ffffffffffffffff161761012086015261022087015161449e90648000000000906156f2565b6102208801516144b2906302000000615706565b67ffffffffffffffff16176101808601526102408701516144da9065080000000000906156f2565b6102408801516144ed9062200000615706565b67ffffffffffffffff16176101e086015261026087015161451190610100906156f2565b61026088015161452990670100000000000000615706565b67ffffffffffffffff16176102e086015261028087015161455090642000000000906156f2565b610280880151614564906308000000615706565b67ffffffffffffffff161760608601526102a087015161458b9065100000000000906156f2565b6102a088015161459e9062100000615706565b67ffffffffffffffff161760c08601526102c08701516145c3906302000000906156f2565b6102c08801516145d890648000000000615706565b67ffffffffffffffff16176101c08601526102e087015161460290670100000000000000906156f2565b6102e088015161461490610100615706565b67ffffffffffffffff161761022086015261030087015161463d906604000000000000906156f2565b61030088015161464f90614000615706565b67ffffffffffffffff1617856014602002015284600a602002015185600560200201511916856000602002015118876000602002015284600b602002015185600660200201511916856001602002015118876001602002015284600c602002015185600760200201511916856002602002015118876002602002015284600d602002015185600860200201511916856003602002015118876003602002015284600e602002015185600960200201511916856004602002015118876004602002015284600f602002015185600a602002015119168560056020020151188760056020020152846010602002015185600b602002015119168560066020020151188760066020020152846011602002015185600c602002015119168560076020020151188760076020020152846012602002015185600d602002015119168560086020020151188760086020020152846013602002015185600e602002015119168560096020020151188760096020020152846014602002015185600f6020020151191685600a60200201511887600a602002015284601560200201518560106020020151191685600b60200201511887600b602002015284601660200201518560116020020151191685600c60200201511887600c602002015284601760200201518560126020020151191685600d60200201511887600d602002015284601860200201518560136020020151191685600e60200201511887600e602002015284600060200201518560146020020151191685600f60200201511887600fdf576149df615945565b60200201518751188752806149f3816158e4565b915050613d80565b509495945050505050565b5080546000825560030290600052602060002090810190610c249190614af0565b50610c2490610200810190614b27565b6040518061040001604052806020906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b6040518061020001604052806010906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b5b80821115614b23578054600160a060020a03199081168255600182018054909116905560006002820155600301614af1565b5090565b5b80821115614b235760008155600101614b28565b8035614b4781615977565b919050565b600082601f830112614b5d57600080fd5b81356020614b72614b6d836156b6565b615685565b8281528181019085830183850287018401881015614b8f57600080fd5b60005b85811015614bb7578135614ba581615977565b84529284019290840190600101614b92565b5090979650505050505050565b600082601f830112614bd557600080fd5b81356020614be5614b6d836156b6565b82815281810190858301606080860288018501891015614c0457600080fd5b60005b86811015614c2b57614c198a84614c39565b85529385019391810191600101614c07565b509198975050505050505050565b600060608284031215614c4b57600080fd5b614c53615638565b90508135614c6081615977565b81526020820135614c7081615977565b806020830152506040820135604082015292915050565b600060208284031215614c9957600080fd5b813561278c81615977565b60008060408385031215614cb757600080fd5b8235614cc281615977565b91506020830135614cd281615977565b809150509250929050565b60008060008060808587031215614cf357600080fd5b8435614cfe81615977565b93506020850135614d0e81615977565b9250604085013591506060850135614d258161598c565b939692955090935050565b600060208284031215614d4257600080fd5b813567ffffffffffffffff811115614d5957600080fd5b61288a84828501614b4c565b60008060408385031215614d7857600080fd5b823567ffffffffffffffff80821115614d9057600080fd5b614d9c86838701614b4c565b93506020850135915080821115614db257600080fd5b50614dbf85828601614b4c565b9150509250929050565b600060208284031215614ddb57600080fd5b815161278c8161598c565b600060208284031215614df857600080fd5b81357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198116811461278c57600080fd5b600060208284031215614e3857600080fd5b5035919050565b60008060408385031215614e5257600080fd5b823591506020830135614cd281615977565b600060208284031215614e7657600080fd5b81357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198116811461278c57600080fd5b60008060408385031215614eb657600080fd5b823567ffffffffffffffff80821115614ece57600080fd5b908401906101608287031215614ee357600080fd5b614eeb615661565b614ef483614b3c565b8152614f0260208401614b3c565b6020820152614f1360408401614b3c565b6040820152614f2460608401614b3c565b6060820152608083013582811115614f3b57600080fd5b614f4788828601614b4c565b60808301525060a083013582811115614f5f57600080fd5b614f6b88828601614b4c565b60a08301525060c083013560c0820152614f8760e08401614b3c565b60e082015261010083810135908201526101208084013590820152610140928301359281019290925250946020939093013593505050565b600060208284031215614fd157600080fd5b813567ffffffffffffffff811115614fe857600080fd5b82016040818503121561278c57600080fd5b60006060828403121561500c57600080fd5b61278c8383614c39565b60008060008060006080868803121561502e57600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff8082111561505b57600080fd5b818801915088601f83011261506f57600080fd5b81358181111561507e57600080fd5b896020808302850101111561509257600080fd5b9699959850939650602001949392505050565b600081518084526020808501945080840160005b838110156149fb5781518051600160a060020a03908116895284820151168489015260409081015190880152606090960195908201906001016150b9565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19871681528486600383013784810160038101859052600090838560238301376000930160230192835250909695505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198b168152888a600383013788810160038101899052600090878960238301378781019050602381016000815286888237508581019050602381016000815284868237506000930160230192835250909a9950505050505050505050565b898b823760008a820160008152898b82376000908a01908152878982376000908801908152858782376000908601908152838582376000930192835250909a9950505050505050505050565b6000885160206152268285838e016158a1565b81840191506c01000000000000000000000000600160a060020a038b160282526014895161525981838601858e016158a1565b895193019261526d81838601858d016158a1565b885193019261528181838601858c016158a1565b875193019261529581838601858b016158a1565b86519301926152a981838601858a016158a1565b929092019091019a9950505050505050505050565b600084516152d08184602089016158a1565b820184815283516152e88160208085019088016158a1565b0160200195945050505050565b600083516153078184602088016158a1565b83519083019061531b8183602088016158a1565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161535c8160178501602088016158a1565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516153998160288401602088016158a1565b01602801949350505050565b60208152600061278c60208301846150a5565b60006020808301818452808554808352604092508286019150866000528360002060005b8281101561541b578154600160a060020a03908116855260018084015490911687860152600283015486860152606090940193600390920191016153dc565b5091979650505050505050565b60208152600082518060208401526154478160408501602087016158a1565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208152600082516040602084015261550b60608401826150a5565b9050602084015160408401528091505092915050565b6000808335601e1984360301811261553857600080fd5b83018035915067ffffffffffffffff82111561555357600080fd5b602090810192508102360382131561556a57600080fd5b9250929050565b6000808335601e1984360301811261558857600080fd5b83018035915067ffffffffffffffff8211156155a357600080fd5b602001915060608102360382131561556a57600080fd5b6000808335601e198436030181126155d157600080fd5b83018035915067ffffffffffffffff8211156155ec57600080fd5b60200191503681900382131561556a57600080fd5b600082356101be1983360301811261561857600080fd5b9190910192915050565b60008235605e1983360301811261561857600080fd5b6040516060810167ffffffffffffffff8111828210171561565b5761565b61595e565b60405290565b604051610160810167ffffffffffffffff8111828210171561565b5761565b61595e565b604051601f8201601f1916810167ffffffffffffffff811182821017156156ae576156ae61595e565b604052919050565b600067ffffffffffffffff8211156156d0576156d061595e565b5060209081020190565b600082198211156156ed576156ed615913565b500190565b6000826157015761570161592c565b500490565b600081600019048311821515161561572057615720615913565b500290565b60008282101561573757615737615913565b500390565b8051602080830151919081101561575f578060200360080260020a600003821691505b50919050565b60006060823603121561577757600080fd5b61577f615638565b823567ffffffffffffffff8082111561579757600080fd5b90840190601f36818401126157ab57600080fd5b823560206157bb614b6d836156b6565b82815281810190868301368486028901850111156157d857600080fd5b60005b85811015615865578135888111156157f257600080fd5b890136603f82011261580357600080fd5b8581013560408a8211156158195761581961595e565b61582a828b01601f19168901615685565b828152368284860101111561583e57600080fd5b828285018a83013760009281018901929092525085525092840192908401906001016157db565b505087525087810135908601525050604085013591508082111561588857600080fd5b5061589536828601614bc4565b60408301525092915050565b60005b838110156158bc5781810151838201526020016158a4565b83811115610cc55750506000910152565b6000816158dc576158dc615913565b506000190190565b60006000198214156158f8576158f8615913565b5060010190565b60008261590e5761590e61592c565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610c2457600080fd5b8015158114610c2457600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220fc72767c7cc170583376348df66d6fdabaad068c7e692789e4b30e698d46604464736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106102595760003560e060020a900480638ac1f86f1161013d578063baeebe75116100ba578063e31be0871161007e578063e31be08714610704578063e4e6bba614610731578063e88b662614610744578063f33fe10f14610764578063f862b7eb14610784578063fd5d2ef3146107a457600080fd5b8063baeebe7514610665578063c7b81f4f1461067b578063d547741f146106ae578063ddca3f43146106ce578063e1d862be146106e457600080fd5b806396cf52271161010157806396cf5227146105ce57806399b5bb64146105ee578063a217fddf14610604578063b6d3385e14610619578063ba8bbbe01461064f57600080fd5b80638ac1f86f146105505780638e5df9c71461056557806391d1485414610585578063924cf6e0146105a5578063934785b7146105bb57600080fd5b806336568abe116101d65780635c975abb1161019a5780635c975abb146104895780636a1db1bf146104a157806375b238fc146104c15780637df8b802146104e35780638456cb591461051b578063853890ae1461053057600080fd5b806336568abe146103e45780633f4ba83a1461040457806342180fb8146104195780634a1856de146104395780635249a7051461046957600080fd5b8063236040711161021d5780632360407114610334578063248a9ca31461035457806327ab61fb146103845780632f2ff15d146103a4578063331a891a146103c457600080fd5b806301ffc9a714610265578063044218231461029a57806309fce356146102dc5780630d668087146102fe57806321d3d5361461031457600080fd5b3661026057005b600080fd5b34801561027157600080fd5b50610285610280366004614e64565b6107c4565b60405190151581526020015b60405180910390f35b3480156102a657600080fd5b506102ce7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d781565b604051908152602001610291565b3480156102e857600080fd5b506102fc6102f7366004614d65565b610857565b005b34801561030a57600080fd5b506102ce60d35481565b34801561032057600080fd5b506102fc61032f366004614c87565b61087f565b34801561034057600080fd5b506102fc61034f366004614c87565b61090f565b34801561036057600080fd5b506102ce61036f366004614e26565b60009081526065602052604090206001015490565b34801561039057600080fd5b506102fc61039f366004614ea3565b61094b565b3480156103b057600080fd5b506102fc6103bf366004614e3f565b610a07565b3480156103d057600080fd5b506102fc6103df366004614e26565b610a2d565b3480156103f057600080fd5b506102fc6103ff366004614e3f565b610b74565b34801561041057600080fd5b506102fc610c03565b34801561042557600080fd5b506102fc610434366004614e26565b610c27565b34801561044557600080fd5b506102ce610454366004614e26565b60ca6020526000908152604090206001015481565b34801561047557600080fd5b506102fc610484366004614d30565b610c46565b34801561049557600080fd5b5060975460ff16610285565b3480156104ad57600080fd5b506102fc6104bc366004614e26565b610ccb565b3480156104cd57600080fd5b506102ce60008051602061599b83398151915281565b3480156104ef57600080fd5b5060cd5461050390600160a060020a031681565b604051600160a060020a039091168152602001610291565b34801561052757600080fd5b506102fc610cea565b34801561053c57600080fd5b506102fc61054b366004614ca4565b610d0b565b34801561055c57600080fd5b506102fc610d53565b34801561057157600080fd5b506102fc610580366004614c87565b610eab565b34801561059157600080fd5b506102856105a0366004614e3f565b610eec565b3480156105b157600080fd5b506102ce60d15481565b6102fc6105c9366004614cdd565b610f17565b3480156105da57600080fd5b506102fc6105e9366004614e26565b611314565b3480156105fa57600080fd5b506102ce60d45481565b34801561061057600080fd5b506102ce600081565b34801561062557600080fd5b50610503610634366004614c87565b60cc60205260009081526040902054600160a060020a031681565b34801561065b57600080fd5b506102ce60cb5481565b34801561067157600080fd5b506102ce60d25481565b34801561068757600080fd5b50610285610696366004614e26565b600090815260d7602052604090206102000154151590565b3480156106ba57600080fd5b506102fc6106c9366004614e3f565b611333565b3480156106da57600080fd5b506102ce60ce5481565b3480156106f057600080fd5b506102fc6106ff366004614fbf565b611359565b34801561071057600080fd5b5061072461071f366004614e26565b61149f565b60405161029191906154ef565b6102fc61073f366004614c87565b61155b565b34801561075057600080fd5b506102fc61075f366004615016565b611801565b34801561077057600080fd5b5060d05461050390600160a060020a031681565b34801561079057600080fd5b506102fc61079f366004614e26565b6118c7565b3480156107b057600080fd5b506102fc6107bf366004614e26565b611afa565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1982167f7965db0b00000000000000000000000000000000000000000000000000000000148061085157507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198316145b92915050565b60008051602061599b8339815191526108708133611b19565b61087a8383611b80565b505050565b600061088b8133611b19565b60d054600160a060020a0316156108ec5760405160e560020a62461bcd02815260206004820152601d60248201527f736964654272696467654164647265737320616c72656164792073657400000060448201526064015b60405180910390fd5b5060d08054600160a060020a031916600160a060020a0392909216919091179055565b60008051602061599b8339815191526109288133611b19565b5060cf8054600160a060020a031916600160a060020a0392909216919091179055565b600054610100900460ff1680610964575060005460ff16155b6109835760405160e560020a62461bcd0281526004016108e390615492565b600054610100900460ff161580156109a5576000805461ffff19166101011790555b6109ae83611c96565b6109b782611de1565b60007fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c96040516109e991906153b8565b60405180910390a2801561087a576000805461ff0019169055505050565b600082815260656020526040902060010154610a238133611b19565b61087a8383611e55565b60008051602061599b833981519152610a468133611b19565b60975460ff16610a9b5760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108e3565b60cb54821015610b165760405160e560020a62461bcd02815260206004820152602660248201527f6576656e744964206d757374206265203e3d206f6c646573744c6f636b65644560448201527f76656e744964000000000000000000000000000000000000000000000000000060648201526084016108e3565b600082815260ca602052604090206001015415610b6257600082815260ca6020526040812090610b468282614a06565b5060006001919091015581610b5a816158e4565b925050610b16565b610b6d600183615725565b60d4555050565b600160a060020a0381163314610bf55760405160e560020a62461bcd02815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084016108e3565b610bff8282611edb565b5050565b60008051602061599b833981519152610c1c8133611b19565b610c24611f42565b50565b60008051602061599b833981519152610c408133611b19565b5060d255565b60008051602061599b833981519152610c5f8133611b19565b815160005b81811015610cc55760cc6000858381518110610c8257610c82615945565b602090810291909101810151600160a060020a031682528101919091526040016000208054600160a060020a031916905580610cbd816158e4565b915050610c64565b50505050565b60008051602061599b833981519152610ce48133611b19565b5060ce55565b60008051602061599b833981519152610d038133611b19565b610c24611fe1565b60008051602061599b833981519152610d248133611b19565b50600160a060020a03918216600090815260cc602052604090208054600160a060020a03191691909216179055565b60975460ff1615610d795760405160e560020a62461bcd0281526004016108e39061545b565b60cb545b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b82821015610e0b57600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101610db1565b5050505081526020016001820154815250509050806020015160001480610e355750428160200151115b15610e40575060cb55565b8051610e4b9061203c565b600082815260ca6020526040812090610e648282614a06565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a25080610ea3816158e4565b915050610d7d565b60008051602061599b833981519152610ec48133611b19565b50600160a060020a0316600090815260cc602052604090208054600160a060020a0319169055565b6000918252606560209081526040808420600160a060020a0393909316845291905290205460ff1690565b60008115610fac576000805260cc6020527f435daec636ce435a90bde0aeec309a303a359a854c5a51b7d6a5a941d6db609454600160a060020a03868116911614610fa75760405160e560020a62461bcd02815260206004820152601f60248201527f546f6b656e206e6f7420706f696e7420746f206e617469766520746f6b656e0060448201526064016108e3565b611018565b50600160a060020a03808516600090815260cc602052604090205416806110185760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108e3565b6000831161106b5760405160e560020a62461bcd02815260206004820152601160248201527f43616e6e6f74207769746864726177203000000000000000000000000000000060448201526064016108e3565b60ce5434146110bf5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c756520213d2066656500000000000000000000000000000060448201526064016108e3565b60cf54604051600160a060020a03909116903480156108fc02916000818181858888f193505050501580156110f8573d6000803e3d6000fd5b506040517f23b872dd00000000000000000000000000000000000000000000000000000000815233600482015230602482015260448101849052600160a060020a038616906323b872dd90606401602060405180830381600087803b15801561116057600080fd5b505af1158015611174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111989190614dc9565b6111e75760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108e3565b6040805160608082018352600160a060020a0384811680845288821660208086019182528587018a815260c98054600181018255600091909152965160039097027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054988716600160a060020a0319998a1617905592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2984018054918716919098161790965594517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55460ce548651938c168452948301919091529381019390935282015233907ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9060800160405180910390a261130d6122d0565b5050505050565b60008051602061599b83398151915261132d8133611b19565b5060d355565b60008281526065602052604090206001015461134f8133611b19565b61087a8383611edb565b7f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d76113848133611b19565b60975460ff16156113aa5760405160e560020a62461bcd0281526004016108e39061545b565b6113b76020830183615622565b602001357f196c47048e38df7a4fe6e581c8f4f2e2ba67ac0dd45b90da756e97bd61d9dd3b60405160405180910390a26114006113f76020840184615622565b60200135612348565b60d054611417908390600160a060020a03166123ad565b610bff6114276020840184615622565b611435906040810190615571565b808060200260200160405190810160405280939291908181526020016000905b828210156114815761147260608302860136819003810190614ffa565b81526020019060010190611455565b50505050508380602001906114969190615622565b602001356124e3565b604080518082019091526060815260006020820152600082815260ca60209081526040808320815181546060948102820185018452928101838152909491938593919285929185015b8282101561154257600084815260209081902060408051606081018252600386029092018054600160a060020a039081168452600180830154909116848601526002909101549183019190915290835290920191016114e8565b5050505081526020016001820154815250509050919050565b60cd54600160a060020a03908116600090815260cc602052604090205416806115c95760405160e560020a62461bcd02815260206004820152601560248201527f556e6b6e6f776e20746f6b656e2061646472657373000000000000000000000060448201526064016108e3565b60ce54341161161d5760405160e560020a62461bcd02815260206004820152601160248201527f53656e742076616c7565203c3d2066656500000000000000000000000000000060448201526064016108e3565b60cf5460ce54604051600160a060020a039092169181156108fc0291906000818181858888f19350505050158015611659573d6000803e3d6000fd5b50600060ce543461166a9190615725565b905060cd60009054906101000a9004600160a060020a0316600160a060020a031663d0e30db0826040518263ffffffff1660e060020a0281526004016000604051808303818588803b1580156116bf57600080fd5b505af11580156116d3573d6000803e3d6000fd5b50506040805160608082018352600160a060020a038881168084528a821660208086019182528587018b815260c980546001810182556000918252975160039098027f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2881018054998816600160a060020a03199a8b1617905593517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d29850180549190971698169790971790945592517f66be4f155c5ef2ebd3772b228f2f00681e4ed5826cdb3b1943cc11ad15ad1d2a9091015560d55460ce54865195865292850191909152938301939093528101919091523393507ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db9250608001905060405180910390a261087a6122d0565b6002851061184a5760d76000611818600288615725565b8152602001908152602001600020600080820160006118379190614a27565b5060006102008201819055610201909101555b600085815260d76020526040812082915b828110156118a35784848281811061187557611875615945565b905060200201358282610200811061188f5761188f615945565b01558061189b816158e4565b91505061185b565b5050506000948552505060d760205260409092206102008101919091556102010155565b60975460ff16156118ed5760405160e560020a62461bcd0281526004016108e39061545b565b60cb5481146119415760405160e560020a62461bcd02815260206004820152601c60248201527f63616e20756e6c6f636b206f6e6c79206f6c64657374206576656e740000000060448201526064016108e3565b600081815260ca60209081526040808320815181546060948102820185018452928101838152909391928492849190879085015b828210156119cf57600084815260209081902060408051606081018252600386029092018054600160a060020a03908116845260018083015490911684860152600290910154918301919091529083529092019101611975565b50505050815260200160018201548152505090506000816020015111611a3a5760405160e560020a62461bcd02815260206004820181905260248201527f6e6f206c6f636b6564207472616e73666572732077697468207468697320696460448201526064016108e3565b42816020015110611a905760405160e560020a62461bcd02815260206004820152601b60248201527f6c6f636b54696d6520686173206e6f742079657420706173736564000000000060448201526064016108e3565b8051611a9b9061203c565b600082815260ca6020526040812090611ab48282614a06565b50600060019190910181905560405183917f78ff9b3176bb0d6421590f3816e75cb15a9ffa2b7a1a028f40a3f4e029eb39f291a2611af38260016156da565b60cb555050565b60008051602061599b833981519152611b138133611b19565b5060d155565b611b238282610eec565b610bff57611b3b81600160a060020a031660146125a6565b611b468360206125a6565b604051602001611b57929190615324565b60408051601f198184030181529082905260e560020a62461bcd0282526108e391600401615428565b8051825114611bfa5760405160e560020a62461bcd02815260206004820152603f60248201527f73697a6573206f6620746f6b656e5468697341646472657373657320616e642060448201527f746f6b656e53696465416464726573736573206d7573742062652073616d650060648201526084016108e3565b815160005b81811015610cc557828181518110611c1957611c19615945565b602002602001015160cc6000868481518110611c3757611c37615945565b6020026020010151600160a060020a0316600160a060020a0316815260200190815260200160002060006101000a815481600160a060020a030219169083600160a060020a031602179055508080611c8e906158e4565b915050611bff565b600054610100900460ff1680611caf575060005460ff16155b611cce5760405160e560020a62461bcd0281526004016108e390615492565b600054610100900460ff16158015611cf0576000805461ffff19166101011790555b611cfb600033612793565b611d297f077a1d526a4ce8a773632ab13b4fbbf1fcc954c3dab26cd27ea0e2a6750da5d78360400151612793565b611d4560008051602061599b8339815191528360200151612793565b611d5782608001518360a00151611b80565b606082015160cd8054600160a060020a03928316600160a060020a031991821617909155835160d0805491841691831691909117905560c084015160ce5560e084015160cf805491909316911617905561014082015160d15561010082015160d25561012082015160d355600160cb81905560d5558015610bff576000805461ff00191690555050565b600054610100900460ff1680611dfa575060005460ff16155b611e195760405160e560020a62461bcd0281526004016108e390615492565b600054610100900460ff16158015611e3b576000805461ffff19166101011790555b60d88290558015610bff576000805461ff00191690555050565b611e5f8282610eec565b610bff576000828152606560209081526040808320600160a060020a03851684529091529020805460ff19166001179055611e973390565b600160a060020a031681600160a060020a0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ee58282610eec565b15610bff576000828152606560209081526040808320600160a060020a0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60975460ff16611f975760405160e560020a62461bcd02815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016108e3565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051600160a060020a03909116815260200160405180910390a1565b60975460ff16156120075760405160e560020a62461bcd0281526004016108e39061545b565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611fc43390565b60005b8151811015610bff576000600160a060020a031682828151811061206557612065615945565b602002602001015160000151600160a060020a031614156121815760cd548251600160a060020a0390911690632e1a7d4d908490849081106120a9576120a9615945565b6020026020010151604001516040518263ffffffff1660e060020a0281526004016120d691815260200190565b600060405180830381600087803b1580156120f057600080fd5b505af1158015612104573d6000803e3d6000fd5b5050505081818151811061211a5761211a615945565b602002602001015160200151600160a060020a03166108fc83838151811061214457612144615945565b6020026020010151604001519081150290604051600060405180830381858888f1935050505015801561217b573d6000803e3d6000fd5b506122be565b81818151811061219357612193615945565b602002602001015160000151600160a060020a031663a9059cbb8383815181106121bf576121bf615945565b6020026020010151602001518484815181106121dd576121dd615945565b6020026020010151604001516040518363ffffffff1660e060020a02815260040161221d929190600160a060020a03929092168252602082015260400190565b602060405180830381600087803b15801561223757600080fd5b505af115801561224b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226f9190614dc9565b6122be5760405160e560020a62461bcd02815260206004820152601360248201527f4661696c207472616e7366657220636f696e730000000000000000000000000060448201526064016108e3565b806122c8816158e4565b91505061203f565b600060d254426122e091906156f2565b905060d6548114610c245760d580549060006122fb836158e4565b919050557fe15729a2f427aa4572dab35eb692c902fcbce57d41642013259c741380809ae260c960405161232f91906153b8565b60405180910390a261234360c96000614a06565b60d655565b60d460008154612357906158e4565b91829055508114610c245760405160e560020a62461bcd02815260206004820152601460248201527f4576656e744964206f7574206f66206f7264657200000000000000000000000060448201526064016108e3565b60006123ce6123bf6020850185615622565b6123c890615765565b8361279d565b905060005b6123dd8480615521565b9050811015610cc557816123f18580615521565b8381811061240157612401615945565b90506020028101906124139190615601565b60600135146124675760405160e560020a62461bcd02815260206004820152601f60248201527f706172656e7448617368206f722072656365697074486173682077726f6e670060448201526064016108e3565b61249b6124748580615521565b8381811061248457612484615945565b90506020028101906124969190615601565b612892565b91506124d16124aa8580615521565b838181106124ba576124ba615945565b90506020028101906124cc9190615601565b61299c565b806124db816158e4565b9150506123d3565b60d3546124f090426156da565b600082815260ca60205260408120600101919091555b825181101561087a57600082815260ca60205260409020835184908390811061253157612531615945565b60209081029190910181015182546001808201855560009485529383902082516003909202018054600160a060020a0319908116600160a060020a039384161782559383015194810180549094169490911693909317909155604001516002909101558061259e816158e4565b915050612506565b606060006125b5836002615706565b6125c09060026156da565b67ffffffffffffffff8111156125d8576125d861595e565b6040519080825280601f01601f191660200182016040528015612602576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061263957612639615945565b6020010190600160f860020a031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061268457612684615945565b6020010190600160f860020a031916908160001a90535060006126a8846002615706565b6126b39060016156da565b90505b600181111561273a577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106126f4576126f4615945565b1a60f860020a0282828151811061270d5761270d615945565b6020010190600160f860020a031916908160001a905350601090940493612733816158cd565b90506126b6565b50831561278c5760405160e560020a62461bcd02815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016108e3565b9392505050565b610bff8282611e55565b60008083600001516000815181106127b7576127b7615945565b60200260200101518385600001516001815181106127d7576127d7615945565b60200260200101516127ec8760200151612af2565b87518051600290811061280157612801615945565b6020026020010151886040015160405160200161281e91906153a5565b604051602081830303815290604052896000015160038151811061284457612844615945565b60200260200101516040516020016128629796959493929190615213565b60405160208183030381529060405280519060200120905061288a8460000151826004612c5a565b949350505050565b60006128a16020830183614de6565b6128ae60408401846155ba565b60608501356128c060808701876155ba565b6128cd60a08901896155ba565b6128da60c08b018b6155ba565b6040516020016128f39a9998979695949392919061514b565b60408051601f1981840301815291905261291060e08401846155ba565b61291e6101008601866155ba565b61292c6101208801886155ba565b61293a6101408a018a6155ba565b6129486101608c018c6155ba565b6040516020016129619a999897969594939291906151c7565b60408051601f198184030181529082905261297f92916020016152f5565b604051602081830303815290604052805190602001209050919050565b60006129e86129ae60a08401846155ba565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250612d0a92505050565b905060d854811015612a3f5760405160e560020a62461bcd02815260206004820152601260248201527f646966666963756c747920746f6f206c6f77000000000000000000000000000060448201526064016108e3565b610bff612a526129ae60e08501856155ba565b612a5b84612d3d565b612a6c6129ae6101408701876155ba565b84612a7b610180880188615521565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612abb925050506101a0890189615521565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612e2d92505050565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b6020811015612b8957818181518110612b3b57612b3b615945565b60209101015160f860020a90819004027fff000000000000000000000000000000000000000000000000000000000000001615612b7757612b89565b80612b81816158e4565b915050612b20565b6000612b96826020615725565b67ffffffffffffffff811115612bae57612bae61595e565b6040519080825280601f01601f191660200182016040528015612bd8576020820181803683370190505b50905060005b8151811015612c51578383612bf2816158e4565b945081518110612c0457612c04615945565b602001015160f860020a900460f860020a02828281518110612c2857612c28615945565b6020010190600160f860020a031916908160001a90535080612c49816158e4565b915050612bde565b50949350505050565b60006060825b8551811015612d0057858181518110612c7b57612c7b615945565b60200260200101518587836001612c9291906156da565b81518110612ca257612ca2615945565b6020026020010151604051602001612cbc939291906152be565b60405160208183030381529060405291506020825111612ce457612cdf8261573c565b612cec565b815160208301205b9450612cf96002826156da565b9050612c60565b5092949350505050565b600081516008612d1a9190615706565b612d2690610100615725565b612d2f8361573c565b60029190910a900492915050565b600080612d506040840160208501614de6565b612d5d60408501856155ba565b6060860135612d6f60808801886155ba565b604051602001612d84969594939291906150f7565b60408051601f19818403018152919052612da160a08501856155ba565b612dae60c08701876155ba565b612dbb60e08901896155ba565b612dc96101008b018b6155ba565b612dd76101608d018d6155ba565b604051602001612df09a999897969594939291906151c7565b60408051601f1981840301815290829052612e0e92916020016152f5565b60408051601f1981840301815291905280516020909101209392505050565b6000612e3b617530886156f2565b90506000612e4c8787868686612eb6565b9050612e5a856000196156f2565b811115612eac5760405160e560020a62461bcd02815260206004820152601960248201527f45746861736820646966666963756c747920746f6f206c6f770000000000000060448201526064016108e3565b5050505050505050565b600080612ec387876131a3565b9050612ecd614a37565b612ed5614a56565b600085815260d7602052604081206102018101546102009091015490918082612f435760405160e560020a62461bcd02815260206004820152601160248201527f45706f636844617461206e6f742073657400000000000000000000000000000060448201526064016108e3565b600091505b6010821015612f7a57602082028781018051918801918252516102009091015281612f72816158e4565b925050612f48565b600091505b60408210156131035786516000908490612fbb90851889612fa16020886158ff565b60208110612fb157612fb1615945565b602002015161324a565b612fc591906158ff565b9050612fd18a8261326a565b612fde82858f8f8a6132cf565b1461302e5760405160e560020a62461bcd02815260206004820152600a60248201527f506f57206661696c65640000000000000000000000000000000000000000000060448201526064016108e3565b600091505b60088210156130f057602060808481028e0182810180519386028b01805163ffffffff9586166301000193918202188616825260408401805161010084018051918916918402919091188816905260608501805161020085018051918a169185029190911889169052949095018051610300909301805193881693909202929092189095169094528051640100000000908190049091528251819004909252805182900490528151049052816130e8816158e4565b925050613033565b50816130fb816158e4565b925050612f7f565b600091505b60208210156131885761315561314961313d88856020811061312c5761312c615945565b602002015189612fa18760016156da565b88612fa18660026156da565b87612fa18560036156da565b856131616004856156f2565b6008811061317157613171615945565b60200201526131816004836156da565b9150613108565b61319287866134aa565b9d9c50505050505050505050505050565b6131ab614a75565b6131b3614a94565b6131bc846137e2565b67ffffffffffffffff8116825293506131de68010000000000000000856156f2565b67ffffffffffffffff81166020830152935061320368010000000000000000856156f2565b67ffffffffffffffff81166040830152935061322868010000000000000000856156f2565b67ffffffffffffffff8116606083015260808201849052935061288a81613824565b60008161325b846301000193615706565b1863ffffffff16905092915050565b600082815260d760205260408120610201810154600290810a84049183918304610200811061329b5761329b615945565b015490506132aa6002836158ff565b6132c0576001608060020a031691506108519050565b608060020a9004949350505050565b6000806132dc8587613b39565b6001608060020a031690506000808080806132f86002896158ff565b600290980497119050600061330d888c615706565b905081156133225761331f8b826156da565b90505b60005b8881101561341d5760208282010260208b01015193508c6001166000141561335b578695506001608060020a038416945061336b565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965060018d166133c157869550608060020a840494506133ce565b608060020a840495508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206002909d049c6001608060020a0316965080613415816158e4565b915050613325565b82156134995760208282010260208b01015193508c60011660001415613451578695506001608060020a0384169450613461565b6001608060020a03841695508694505b604080516020810188905290810186905260600160408051601f1981840301815291905280516020909101206001608060020a031696505b50949b9a5050505050505050505050565b60008083600760200201516134cc906c01000000000000000000000000615706565b60c08501516134e49068010000000000000000615706565b60a08601516134f890640100000000615706565b608087015161350791906156da565b61351191906156da565b61351b91906156da565b61352990608060020a615706565b6060850151613545906c01000000000000000000000000615706565b604086015161355d9068010000000000000000615706565b602087015161357190640100000000615706565b875161357d91906156da565b61358791906156da565b61359191906156da565b61359b91906156da565b9050600084600f60200201516135be906c01000000000000000000000000615706565b6101c08601516135d79068010000000000000000615706565b6101a08701516135ec90640100000000615706565b6101808801516135fc91906156da565b61360691906156da565b61361091906156da565b61361e90608060020a615706565b61016086015161363b906c01000000000000000000000000615706565b6101408701516136549068010000000000000000615706565b61012088015161366990640100000000615706565b61010089015161367991906156da565b61368391906156da565b61368d91906156da565b61369791906156da565b9050600084600760200201516136ba906c01000000000000000000000000615706565b60c08601516136d29068010000000000000000615706565b60a08701516136e690640100000000615706565b60808801516136f591906156da565b6136ff91906156da565b61370991906156da565b61371790608060020a615706565b6060860151613733906c01000000000000000000000000615706565b604087015161374b9068010000000000000000615706565b602088015161375f90640100000000615706565b885161376b91906156da565b61377591906156da565b61377f91906156da565b61378991906156da565b9050613794836137e2565b61379d836137e2565b6137a6836137e2565b604080516020810194909452830191909152606082015260800160408051808303601f1901815291905280516020909101209695505050505050565b60008060005b602081101561381d5761380260ff851661010084026156da565b61010090940493915080613815816158e4565b9150506137e8565b5092915050565b61382c614a75565b61383860096008615706565b60481461388a5760405160e560020a62461bcd02815260206004820152600c60248201527f73706f6e6765206572726f72000000000000000000000000000000000000000060448201526064016108e3565b600160a08301526780000000000000006101008301526048600860006138b1600983615706565b90506138bb614ab3565b600080805b6138ca87866156f2565b8310156139ed57600091505b60058210156139d0575060005b60058110156139be576138f686886156f2565b613901836005615706565b61390b90836156da565b10156139ac578861391d836005615706565b82613929866009615706565b61393391906156da565b61393d91906156da565b6009811061394d5761394d615945565b6020020151848361395f846005615706565b61396991906156da565b6019811061397957613979615945565b602002015118848361398c846005615706565b61399691906156da565b601981106139a6576139a6615945565b60200201525b806139b6816158e4565b9150506138e3565b816139c8816158e4565b9250506138d6565b6139d984613c3a565b9350826139e5816158e4565b9350506138c0565b6139f5614a75565b60005b6010811015613b2b57600093505b6005841015613b2657600092505b6005831015613b1457613a27888a6156f2565b613a32856005615706565b613a3c90856156da565b108015613a495750601081105b15613b02578584613a5b856005615706565b613a6591906156da565b60198110613a7557613a75615945565b602002015163ffffffff16828260108110613a9257613a92615945565b60200201526401000000008685613aaa866005615706565b613ab491906156da565b60198110613ac457613ac4615945565b6020020151613ad391906156f2565b82613adf8360016156da565b60108110613aef57613aef615945565b6020020152613aff6002826156da565b90505b82613b0c816158e4565b935050613a14565b83613b1e816158e4565b945050613a06565b6139f8565b509998505050505050505050565b600082613b47836004615706565b81518110613b5757613b57615945565b602002602001015183836004613b6d9190615706565b613b789060016156da565b81518110613b8857613b88615945565b602002602001015184846004613b9e9190615706565b613ba99060026156da565b81518110613bb957613bb9615945565b602002602001015185856004613bcf9190615706565b613bda9060036156da565b81518110613bea57613bea615945565b6020026020010151604051602001613c1b949392919093845260208401929092526040830152606082015260800190565b60408051808303601f1901815291905280516020909101209392505050565b613c42614ab3565b613c4a614ab3565b613c52614ad2565b613c5a614ad2565b600060405180610300016040528060018152602001618082815260200167800000000000808a8152602001678000000080008000815260200161808b81526020016380000001815260200167800000008000808181526020016780000000000080098152602001608a81526020016088815260200163800080098152602001638000000a8152602001638000808b815260200167800000000000008b8152602001678000000000008089815260200167800000000000800381526020016780000000000080028152602001678000000000000080815260200161800a815260200167800000008000000a81526020016780000000800080818152602001678000000000008080815260200163800000018152602001678000000080008008815250905060005b60188110156149fb576080808801516060808a01516040808c01516020808e01518e511890911890921890931888526101208b01516101008c015160e08d015160c08e015160a08f0151181818189088018190526101c08b01516101a08c01516101808d01516101608e01516101408f015118181818928801929092526102608a01516102408b01516102208c01516102008d01516101e08e015118181818908701526103008901516102e08a01516102c08b01516102a08c01516102808d01511818181891860191909152613e5f90678000000000000000906156f2565b6020850151613e6f906002615706565b608086015167ffffffffffffffff91909116919091171883526040840151613ea090678000000000000000906156f2565b6040850151613eb0906002615706565b855167ffffffffffffffff91909116919091171860208401526060840151613ee190678000000000000000906156f2565b6060850151613ef1906002615706565b67ffffffffffffffff161784600160200201511883600260200201526780000000000000008460046020020151613f2891906156f2565b6080850151613f38906002615706565b604086015167ffffffffffffffff91909116919091171860608401528351613f6990678000000000000000906156f2565b8451613f76906002615706565b60608087015167ffffffffffffffff929092169290921718608080860191825285518a5118808b52865160208c81018051909218825288516040808f01805190921890915289518e8801805190911890528951948e0180519095189094528801805160a08e0180519091189052805160c08e0180519091189052805160e08e018051909118905280516101008e0180519091189052516101208d018051909118905291870180516101408d018051909118905280516101608d018051909118905280516101808d018051909118905280516101a08d0180519091189052516101c08c018051909118905292860180516101e08c018051909118905280516102008c018051909118905280516102208c018051909118905280516102408c0180519091189052516102608b018051909118905281516102808b018051909118905281516102a08b018051909118905281516102c08b018051909118905281516102e08b018051909118905290516103008a018051909118905290865251614101906310000000906156f2565b602088015161411590641000000000615706565b67ffffffffffffffff1617610100860152604087015161413e90672000000000000000906156f2565b604088015161414e906008615706565b67ffffffffffffffff161761016086015260608701516141729062800000906156f2565b60608801516141879065020000000000615706565b67ffffffffffffffff161761026086015260808701516141ae9065400000000000906156f2565b60808801516141c09062040000615706565b67ffffffffffffffff16176102c086015260a08701516141e990678000000000000000906156f2565b60a08801516141f9906002615706565b67ffffffffffffffff1617604086015260c087015161421c9062100000906156f2565b60c08801516142319065100000000000615706565b67ffffffffffffffff161760a086015260e0870151614258906640000000000000906156f2565b60e088015161426990610400615706565b67ffffffffffffffff16176101a086015261010087015161428e9062080000906156f2565b6101008801516142a49065200000000000615706565b67ffffffffffffffff16176102008601526101208701516142ce90674000000000000000906156f2565b6101208801516142df906004615706565b67ffffffffffffffff1617610300860152610140870151614302906004906156f2565b61014088015161431a90674000000000000000615706565b67ffffffffffffffff1617608086015261016087015161434390670400000000000000906156f2565b610160880151614354906040615706565b67ffffffffffffffff161760e08601526101808701516143789062200000906156f2565b61018088015161438e9065080000000000615706565b67ffffffffffffffff16176101408601526101a08701516143b7906602000000000000906156f2565b6101a08801516143c990618000615706565b67ffffffffffffffff16176102408601526101c08701516143ec906008906156f2565b6101c088015161440490672000000000000000615706565b67ffffffffffffffff16176102a08601526101e087015161442b90641000000000906156f2565b6101e088015161443f906310000000615706565b67ffffffffffffffff161760208601526102008781015161446091906156f2565b610200880151614477906680000000000000615706565b67ffffffffffffffff161761012086015261022087015161449e90648000000000906156f2565b6102208801516144b2906302000000615706565b67ffffffffffffffff16176101808601526102408701516144da9065080000000000906156f2565b6102408801516144ed9062200000615706565b67ffffffffffffffff16176101e086015261026087015161451190610100906156f2565b61026088015161452990670100000000000000615706565b67ffffffffffffffff16176102e086015261028087015161455090642000000000906156f2565b610280880151614564906308000000615706565b67ffffffffffffffff161760608601526102a087015161458b9065100000000000906156f2565b6102a088015161459e9062100000615706565b67ffffffffffffffff161760c08601526102c08701516145c3906302000000906156f2565b6102c08801516145d890648000000000615706565b67ffffffffffffffff16176101c08601526102e087015161460290670100000000000000906156f2565b6102e088015161461490610100615706565b67ffffffffffffffff161761022086015261030087015161463d906604000000000000906156f2565b61030088015161464f90614000615706565b67ffffffffffffffff1617856014602002015284600a602002015185600560200201511916856000602002015118876000602002015284600b602002015185600660200201511916856001602002015118876001602002015284600c602002015185600760200201511916856002602002015118876002602002015284600d602002015185600860200201511916856003602002015118876003602002015284600e602002015185600960200201511916856004602002015118876004602002015284600f602002015185600a602002015119168560056020020151188760056020020152846010602002015185600b602002015119168560066020020151188760066020020152846011602002015185600c602002015119168560076020020151188760076020020152846012602002015185600d602002015119168560086020020151188760086020020152846013602002015185600e602002015119168560096020020151188760096020020152846014602002015185600f6020020151191685600a60200201511887600a602002015284601560200201518560106020020151191685600b60200201511887600b602002015284601660200201518560116020020151191685600c60200201511887600c602002015284601760200201518560126020020151191685600d60200201511887600d602002015284601860200201518560136020020151191685600e60200201511887600e602002015284600060200201518560146020020151191685600f60200201511887600f60200201528460016020020151856015602002015119168560106020020151188760106020020152846002602002015185601660200201511916856011602002015118876011602002015284600360200201518560176020020151191685601260200201511887601260200201528460046020020151856018602002015119168560136020020151188760136020020152846005602002015185600060200201511916856014602002015118876014602002015284600660200201518560016020020151191685601560200201511887601560200201528460076020020151856002602002015119168560166020020151188760166020020152846008602002015185600360200201511916856017602002015118876017602002015284600960200201518560046020020151191685601860200201511887601860200201528181601881106149df576149df615945565b60200201518751188752806149f3816158e4565b915050613d80565b509495945050505050565b5080546000825560030290600052602060002090810190610c249190614af0565b50610c2490610200810190614b27565b6040518061040001604052806020906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b6040518061020001604052806010906020820280368337509192915050565b6040518061012001604052806009906020820280368337509192915050565b6040518061032001604052806019906020820280368337509192915050565b6040518060a001604052806005906020820280368337509192915050565b5b80821115614b23578054600160a060020a03199081168255600182018054909116905560006002820155600301614af1565b5090565b5b80821115614b235760008155600101614b28565b8035614b4781615977565b919050565b600082601f830112614b5d57600080fd5b81356020614b72614b6d836156b6565b615685565b8281528181019085830183850287018401881015614b8f57600080fd5b60005b85811015614bb7578135614ba581615977565b84529284019290840190600101614b92565b5090979650505050505050565b600082601f830112614bd557600080fd5b81356020614be5614b6d836156b6565b82815281810190858301606080860288018501891015614c0457600080fd5b60005b86811015614c2b57614c198a84614c39565b85529385019391810191600101614c07565b509198975050505050505050565b600060608284031215614c4b57600080fd5b614c53615638565b90508135614c6081615977565b81526020820135614c7081615977565b806020830152506040820135604082015292915050565b600060208284031215614c9957600080fd5b813561278c81615977565b60008060408385031215614cb757600080fd5b8235614cc281615977565b91506020830135614cd281615977565b809150509250929050565b60008060008060808587031215614cf357600080fd5b8435614cfe81615977565b93506020850135614d0e81615977565b9250604085013591506060850135614d258161598c565b939692955090935050565b600060208284031215614d4257600080fd5b813567ffffffffffffffff811115614d5957600080fd5b61288a84828501614b4c565b60008060408385031215614d7857600080fd5b823567ffffffffffffffff80821115614d9057600080fd5b614d9c86838701614b4c565b93506020850135915080821115614db257600080fd5b50614dbf85828601614b4c565b9150509250929050565b600060208284031215614ddb57600080fd5b815161278c8161598c565b600060208284031215614df857600080fd5b81357cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198116811461278c57600080fd5b600060208284031215614e3857600080fd5b5035919050565b60008060408385031215614e5257600080fd5b823591506020830135614cd281615977565b600060208284031215614e7657600080fd5b81357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff198116811461278c57600080fd5b60008060408385031215614eb657600080fd5b823567ffffffffffffffff80821115614ece57600080fd5b908401906101608287031215614ee357600080fd5b614eeb615661565b614ef483614b3c565b8152614f0260208401614b3c565b6020820152614f1360408401614b3c565b6040820152614f2460608401614b3c565b6060820152608083013582811115614f3b57600080fd5b614f4788828601614b4c565b60808301525060a083013582811115614f5f57600080fd5b614f6b88828601614b4c565b60a08301525060c083013560c0820152614f8760e08401614b3c565b60e082015261010083810135908201526101208084013590820152610140928301359281019290925250946020939093013593505050565b600060208284031215614fd157600080fd5b813567ffffffffffffffff811115614fe857600080fd5b82016040818503121561278c57600080fd5b60006060828403121561500c57600080fd5b61278c8383614c39565b60008060008060006080868803121561502e57600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff8082111561505b57600080fd5b818801915088601f83011261506f57600080fd5b81358181111561507e57600080fd5b896020808302850101111561509257600080fd5b9699959850939650602001949392505050565b600081518084526020808501945080840160005b838110156149fb5781518051600160a060020a03908116895284820151168489015260409081015190880152606090960195908201906001016150b9565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19871681528486600383013784810160038101859052600090838560238301376000930160230192835250909695505050505050565b7cffffffffffffffffffffffffffffffffffffffffffffffffffffffffff198b168152888a600383013788810160038101899052600090878960238301378781019050602381016000815286888237508581019050602381016000815284868237506000930160230192835250909a9950505050505050505050565b898b823760008a820160008152898b82376000908a01908152878982376000908801908152858782376000908601908152838582376000930192835250909a9950505050505050505050565b6000885160206152268285838e016158a1565b81840191506c01000000000000000000000000600160a060020a038b160282526014895161525981838601858e016158a1565b895193019261526d81838601858d016158a1565b885193019261528181838601858c016158a1565b875193019261529581838601858b016158a1565b86519301926152a981838601858a016158a1565b929092019091019a9950505050505050505050565b600084516152d08184602089016158a1565b820184815283516152e88160208085019088016158a1565b0160200195945050505050565b600083516153078184602088016158a1565b83519083019061531b8183602088016158a1565b01949350505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161535c8160178501602088016158a1565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516153998160288401602088016158a1565b01602801949350505050565b60208152600061278c60208301846150a5565b60006020808301818452808554808352604092508286019150866000528360002060005b8281101561541b578154600160a060020a03908116855260018084015490911687860152600283015486860152606090940193600390920191016153dc565b5091979650505050505050565b60208152600082518060208401526154478160408501602087016158a1565b601f01601f19169190910160400192915050565b60208082526010908201527f5061757361626c653a2070617573656400000000000000000000000000000000604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b60208152600082516040602084015261550b60608401826150a5565b9050602084015160408401528091505092915050565b6000808335601e1984360301811261553857600080fd5b83018035915067ffffffffffffffff82111561555357600080fd5b602090810192508102360382131561556a57600080fd5b9250929050565b6000808335601e1984360301811261558857600080fd5b83018035915067ffffffffffffffff8211156155a357600080fd5b602001915060608102360382131561556a57600080fd5b6000808335601e198436030181126155d157600080fd5b83018035915067ffffffffffffffff8211156155ec57600080fd5b60200191503681900382131561556a57600080fd5b600082356101be1983360301811261561857600080fd5b9190910192915050565b60008235605e1983360301811261561857600080fd5b6040516060810167ffffffffffffffff8111828210171561565b5761565b61595e565b60405290565b604051610160810167ffffffffffffffff8111828210171561565b5761565b61595e565b604051601f8201601f1916810167ffffffffffffffff811182821017156156ae576156ae61595e565b604052919050565b600067ffffffffffffffff8211156156d0576156d061595e565b5060209081020190565b600082198211156156ed576156ed615913565b500190565b6000826157015761570161592c565b500490565b600081600019048311821515161561572057615720615913565b500290565b60008282101561573757615737615913565b500390565b8051602080830151919081101561575f578060200360080260020a600003821691505b50919050565b60006060823603121561577757600080fd5b61577f615638565b823567ffffffffffffffff8082111561579757600080fd5b90840190601f36818401126157ab57600080fd5b823560206157bb614b6d836156b6565b82815281810190868301368486028901850111156157d857600080fd5b60005b85811015615865578135888111156157f257600080fd5b890136603f82011261580357600080fd5b8581013560408a8211156158195761581961595e565b61582a828b01601f19168901615685565b828152368284860101111561583e57600080fd5b828285018a83013760009281018901929092525085525092840192908401906001016157db565b505087525087810135908601525050604085013591508082111561588857600080fd5b5061589536828601614bc4565b60408301525092915050565b60005b838110156158bc5781810151838201526020016158a4565b83811115610cc55750506000910152565b6000816158dc576158dc615913565b506000190190565b60006000198214156158f8576158f8615913565b5060010190565b60008261590e5761590e61592c565b500690565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052601260045260246000fd5b60e060020a634e487b7102600052603260045260246000fd5b60e060020a634e487b7102600052604160045260246000fd5b600160a060020a0381168114610c2457600080fd5b8015158114610c2457600080fdfea49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775a2646970667358221220fc72767c7cc170583376348df66d6fdabaad068c7e692789e4b30e698d46604464736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 413,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 416,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 609,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 858,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 48,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)43_storage)"
      },
      {
        "astId": 333,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 474,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 565,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6794,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "queue",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_struct(Transfer)7670_storage)dyn_storage"
      },
      {
        "astId": 6799,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "lockedTransfers",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_struct(LockedTransfers)7687_storage)"
      },
      {
        "astId": 6801,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "oldestLockedEventId",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 6805,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "204",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6807,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "205",
        "type": "t_address"
      },
      {
        "astId": 6809,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "fee",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 6811,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "207",
        "type": "t_address_payable"
      },
      {
        "astId": 6813,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "sideBridgeAddress",
        "offset": 0,
        "slot": "208",
        "type": "t_address"
      },
      {
        "astId": 6815,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "minSafetyBlocks",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 6817,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "timeframeSeconds",
        "offset": 0,
        "slot": "210",
        "type": "t_uint256"
      },
      {
        "astId": 6819,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "lockTime",
        "offset": 0,
        "slot": "211",
        "type": "t_uint256"
      },
      {
        "astId": 6821,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "inputEventId",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 6823,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "outputEventId",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 6825,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "lastTimeframe",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 5556,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "epochData",
        "offset": 0,
        "slot": "215",
        "type": "t_mapping(t_uint256,t_struct(EthashCacheOptData)5551_storage)"
      },
      {
        "astId": 3274,
        "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
        "label": "minimumDifficulty",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Transfer)7670_storage)dyn_storage": {
        "base": "t_struct(Transfer)7670_storage",
        "encoding": "dynamic_array",
        "label": "struct CommonStructs.Transfer[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)512_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[512]",
        "numberOfBytes": "16384"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)43_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)43_storage"
      },
      "t_mapping(t_uint256,t_struct(EthashCacheOptData)5551_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Ethash.EthashCacheOptData)",
        "numberOfBytes": "32",
        "value": "t_struct(EthashCacheOptData)5551_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedTransfers)7687_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CommonStructs.LockedTransfers)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedTransfers)7687_storage"
      },
      "t_struct(EthashCacheOptData)5551_storage": {
        "encoding": "inplace",
        "label": "struct Ethash.EthashCacheOptData",
        "members": [
          {
            "astId": 5546,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "merkleNodes",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)512_storage"
          },
          {
            "astId": 5548,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "fullSizeIn128Resultion",
            "offset": 0,
            "slot": "512",
            "type": "t_uint256"
          },
          {
            "astId": 5550,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "branchDepth",
            "offset": 0,
            "slot": "513",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "16448"
      },
      "t_struct(LockedTransfers)7687_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.LockedTransfers",
        "members": [
          {
            "astId": 7684,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "transfers",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(Transfer)7670_storage)dyn_storage"
          },
          {
            "astId": 7686,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "endTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)43_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 40,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 42,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Transfer)7670_storage": {
        "encoding": "inplace",
        "label": "struct CommonStructs.Transfer",
        "members": [
          {
            "astId": 7665,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7667,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "toAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7669,
            "contract": "contracts/networks/ETH_AmbBridge.sol:ETH_AmbBridge",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}